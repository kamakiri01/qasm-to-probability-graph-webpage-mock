/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/app.js":
/*!********************!*\
  !*** ./lib/app.js ***!
  \********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar qasm = __webpack_require__(/*! qasm-ts */ \"./node_modules/qasm-ts/dist/main.js\");\nvar chart_js_1 = __webpack_require__(/*! chart.js */ \"./node_modules/chart.js/dist/chart.cjs\");\nvar qulacsExec_1 = __webpack_require__(/*! ./qulacsExec */ \"./lib/qulacsExec.js\");\n// Chart.jsの必要なコンポーネントを登録\nchart_js_1.Chart.register(chart_js_1.CategoryScale, chart_js_1.LinearScale, chart_js_1.BarElement, chart_js_1.BarController, chart_js_1.Title, chart_js_1.Tooltip, chart_js_1.Legend);\n// ファイルの内容を保存する変数\nvar currentFile = null;\nvar currentFileContent = '';\nvar quantumChart = null;\n// DOM要素の取得\nvar dropZone = document.getElementById('dropZone');\nvar fileInput = document.getElementById('fileInput');\nvar fileInfo = document.getElementById('fileInfo');\nvar fileName = document.getElementById('fileName');\nvar fileContent = document.getElementById('fileContent');\nvar executeBtn = document.getElementById('executeBtn');\nvar resultArea = document.getElementById('resultArea');\nvar errorArea = document.getElementById('errorArea');\nvar graphContainer = document.getElementById('graphContainer');\nvar resultChart = document.getElementById('resultChart');\n// ドラッグ＆ドロップイベントのセットアップ\ndropZone.addEventListener('dragover', handleDragOver);\ndropZone.addEventListener('drop', handleDrop);\ndropZone.addEventListener('dragenter', handleDragEnter);\ndropZone.addEventListener('dragleave', handleDragLeave);\n// ファイル選択イベント\nfileInput.addEventListener('change', handleFileSelect);\nexecuteBtn.addEventListener(\"click\", executeQuantumCircuit);\nfunction handleDragOver(e) {\n  e.preventDefault();\n}\nfunction handleDragEnter(e) {\n  e.preventDefault();\n  dropZone.classList.add('dragover');\n}\nfunction handleDragLeave(e) {\n  e.preventDefault();\n  dropZone.classList.remove('dragover');\n}\nfunction handleDrop(e) {\n  e.preventDefault();\n  dropZone.classList.remove('dragover');\n  var files = e.dataTransfer.files;\n  if (files.length > 0) {\n    handleFile(files[0]);\n  }\n}\nfunction handleFileSelect(e) {\n  var files = e.target.files;\n  if (files.length > 0) {\n    handleFile(files[0]);\n  }\n}\nfunction handleFile(file) {\n  // ファイルの拡張子チェック\n  if (!file.name.toLowerCase().endsWith('.qasm')) {\n    showError('QASMファイル (.qasm) を選択してください。');\n    return;\n  }\n  currentFile = file;\n  // ファイル読み込み\n  var reader = new FileReader();\n  reader.onload = function (e) {\n    currentFileContent = e.target.result;\n    showFileInfo();\n    hideError();\n  };\n  reader.onerror = function () {\n    showError('ファイルの読み込み中にエラーが発生しました。');\n  };\n  reader.readAsText(file);\n}\nfunction showFileInfo() {\n  fileName.textContent = \"\".concat(currentFile.name, \" (\").concat(currentFile.size, \" bytes)\");\n  // ファイル内容を表示\n  if (fileContent) {\n    fileContent.textContent = currentFileContent;\n  }\n  fileInfo.style.display = 'block';\n  executeBtn.disabled = false;\n}\nfunction showError(message) {\n  errorArea.innerHTML = \"<div class=\\\"error\\\">\".concat(message, \"</div>\");\n  errorArea.style.display = 'block';\n}\nfunction hideError() {\n  errorArea.style.display = 'none';\n}\nfunction executeQuantumCircuit() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {\n    var qasmParseCircuit, result;\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          try {\n            hideError();\n            executeBtn.disabled = true;\n            executeBtn.textContent = '実行中...';\n            // QASMファイルのパース（qasm-ts使用）\n            qasmParseCircuit = qasm.parseString(currentFileContent, 3);\n            console.log(\"qasmParseCircuit\", qasmParseCircuit);\n            result = (0, qulacsExec_1.qulacsExec)(qasmParseCircuit);\n            displayResults(result);\n          } catch (error) {\n            showError(\"\\u5B9F\\u884C\\u4E2D\\u306B\\u30A8\\u30E9\\u30FC\\u304C\\u767A\\u751F\\u3057\\u307E\\u3057\\u305F: \".concat(error.message));\n          } finally {\n            executeBtn.disabled = false;\n            executeBtn.textContent = '量子回路を実行';\n          }\n        case 1:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n}\n// 結果をグラフで表示する関数\nfunction displayResults(results) {\n  // 状態ベクトルの正規化\n  var mags = results.map(function (r) {\n    return Object.assign(Object.assign({}, r), {\n      magnitude: Math.sqrt(r.real * r.real + r.imag * r.imag)\n    });\n  });\n  var totalMagnitude = Math.sqrt(mags.reduce(function (sum, state) {\n    return sum + state.magnitude * state.magnitude;\n  }, 0));\n  mags.forEach(function (state) {\n    state.real /= totalMagnitude;\n    state.imag /= totalMagnitude;\n    state.magnitude /= totalMagnitude;\n    state.probability = state.magnitude * state.magnitude;\n  });\n  resultArea.style.display = 'block';\n  // Chart.jsを使用した確率分布のグラフ\n  var ctx = resultChart.getContext('2d');\n  // 既存のチャートがあれば破棄\n  if (quantumChart) {\n    quantumChart.destroy();\n    quantumChart = null;\n  }\n  var labels = mags.map(function (_, index) {\n    return \"|\".concat(index.toString(2).padStart(Math.log2(mags.length), '0'), \"\\u27E9\");\n  });\n  var probabilities = mags.map(function (state) {\n    return state.probability;\n  });\n  quantumChart = new chart_js_1.Chart(ctx, {\n    type: 'bar',\n    data: {\n      labels: labels,\n      datasets: [{\n        label: '確率',\n        data: probabilities,\n        backgroundColor: 'rgba(54, 162, 235, 0.8)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 1\n      }]\n    },\n    options: {\n      responsive: true,\n      maintainAspectRatio: false,\n      scales: {\n        y: {\n          beginAtZero: true,\n          max: 1,\n          title: {\n            display: true,\n            text: '確率'\n          }\n        },\n        x: {\n          title: {\n            display: true,\n            text: '量子状態'\n          }\n        }\n      },\n      plugins: {\n        title: {\n          display: true,\n          text: '量子状態の確率分布'\n        },\n        legend: {\n          display: true\n        }\n      }\n    }\n  });\n}\n// 初期化\ndocument.addEventListener('DOMContentLoaded', function () {\n  console.log('QASM量子回路シミュレーターが初期化されました');\n});\n\n//# sourceURL=webpack://qasm-quantum-simulator/./lib/app.js?\n}");

/***/ }),

/***/ "./lib/qulacsExec.js":
/*!***************************!*\
  !*** ./lib/qulacsExec.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\n\nfunction _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = \"function\" == typeof Symbol ? Symbol : {}, n = r.iterator || \"@@iterator\", o = r.toStringTag || \"@@toStringTag\"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, \"_invoke\", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError(\"Generator is already running\"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = \"next\"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError(\"iterator result is not an object\"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i[\"return\"]) && t.call(i), c < 2 && (u = TypeError(\"The iterator does not provide a '\" + o + \"' method\"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, \"GeneratorFunction\")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, \"constructor\", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = \"GeneratorFunction\", _regeneratorDefine2(GeneratorFunctionPrototype, o, \"GeneratorFunction\"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, \"Generator\"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, \"toString\", function () { return \"[object Generator]\"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }\nfunction _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, \"\", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); } r ? i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n : (o(\"next\", 0), o(\"throw\", 1), o(\"return\", 2)); }, _regeneratorDefine2(e, r, n, t); }\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.qulacsExec = qulacsExec;\nvar qulacs_wasm_1 = __webpack_require__(/*! qulacs-wasm */ \"./node_modules/qulacs-wasm/lib/bundle/index.js\");\nvar ast_1 = __webpack_require__(/*! qasm-ts/dist/qasm3/ast */ \"./node_modules/qasm-ts/dist/qasm3/ast.js\");\nvar q;\n(0, qulacs_wasm_1.initQulacs)().then(function () {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {\n    return _regenerator().w(function (_context) {\n      while (1) switch (_context.n) {\n        case 0:\n          _context.n = 1;\n          return Promise.resolve().then(function () {\n            return __webpack_require__(/*! qulacs-wasm */ \"./node_modules/qulacs-wasm/lib/bundle/index.js\");\n          });\n        case 1:\n          q = _context.v;\n        case 2:\n          return _context.a(2);\n      }\n    }, _callee);\n  }));\n});\n// X/Y/Z/H/CNOTのみ対応している\nfunction qulacsExec(parsedCircuit) {\n  var count;\n  var gates = [];\n  parsedCircuit.forEach(function (e) {\n    if (e instanceof ast_1.QuantumDeclaration) {\n      var size = e.size;\n      count = Number(size.value);\n    } else if (e instanceof ast_1.QuantumGateCall) {\n      gates.push(e);\n    }\n  });\n  var state = new q.QuantumState(count);\n  state.set_zero_state();\n  var circuit = new q.QuantumCircuit(count);\n  gates.forEach(function (g) {\n    var value0 = g.qubits[0].subscript.value;\n    value0 = Number(value0);\n    switch (g.quantumGateName.name) {\n      case \"x\":\n        circuit.add_X_gate(value0);\n        break;\n      case \"y\":\n        circuit.add_Y_gate(value0);\n        break;\n      case \"z\":\n        circuit.add_Z_gate(value0);\n        break;\n      case \"h\":\n        circuit.add_H_gate(value0);\n        break;\n      case \"cx\":\n        var value1 = g.qubits[1].subscript.value;\n        circuit.add_CNOT_gate(value0, Number(value1));\n        break;\n      default:\n      // do nothing\n    }\n  });\n  circuit.update_quantum_state(state);\n  return state.get_vector();\n}\n\n//# sourceURL=webpack://qasm-quantum-simulator/./lib/qulacsExec.js?\n}");

/***/ }),

/***/ "./node_modules/@kurkle/color/dist/color.cjs":
/*!***************************************************!*\
  !*** ./node_modules/@kurkle/color/dist/color.cjs ***!
  \***************************************************/
/***/ (function(module) {

eval("{/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\n(function (global, factory) {\n true ? module.exports = factory() :\n0;\n})(this, (function () { 'use strict';\n\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nvar color = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColor: Color,\nb2n: b2n,\nb2p: b2p,\ndefault: index_esm,\nhexParse: hexParse,\nhexString: hexString,\nhsl2rgb: hsl2rgb,\nhslString: hslString,\nhsv2rgb: hsv2rgb,\nhueParse: hueParse,\nhwb2rgb: hwb2rgb,\nlim: lim,\nn2b: n2b,\nn2p: n2p,\nnameParse: nameParse,\np2b: p2b,\nrgb2hsl: rgb2hsl,\nrgbParse: rgbParse,\nrgbString: rgbString,\nrotate: rotate,\nround: round\n});\n\nvar index = Object.assign(index_esm, color);\n\nreturn index;\n\n}));\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/@kurkle/color/dist/color.cjs?\n}");

/***/ }),

/***/ "./node_modules/chart.js/dist/chart.cjs":
/*!**********************************************!*\
  !*** ./node_modules/chart.js/dist/chart.cjs ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\n\n\nvar helpers_dataset = __webpack_require__(/*! ./chunks/helpers.dataset.cjs */ \"./node_modules/chart.js/dist/chunks/helpers.dataset.cjs\");\n__webpack_require__(/*! @kurkle/color */ \"./node_modules/@kurkle/color/dist/color.cjs\");\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = helpers_dataset.requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = helpers_dataset.color(from || transparent);\n        const c1 = c0.valid && helpers_dataset.color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = helpers_dataset.resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = helpers_dataset.resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = helpers_dataset.effects[cfg.easing] || helpers_dataset.effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = helpers_dataset.resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = helpers_dataset.resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!helpers_dataset.isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(helpers_dataset.defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!helpers_dataset.isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (helpers_dataset.isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (helpers_dataset.isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (helpers_dataset.isNumberFinite(otherValue) && (singleMode || value === 0 || helpers_dataset.sign(value) === helpers_dataset.sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return helpers_dataset.createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return helpers_dataset.createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = helpers_dataset.valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = helpers_dataset.valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = helpers_dataset.valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            helpers_dataset.unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (helpers_dataset.isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                helpers_dataset.unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                helpers_dataset.listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (helpers_dataset.isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (helpers_dataset.isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(helpers_dataset.resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(helpers_dataset.resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !helpers_dataset.isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (helpers_dataset.isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(helpers_dataset.valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && helpers_dataset.defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(helpers_dataset.defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = helpers_dataset._arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (helpers_dataset.defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (helpers_dataset.isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (helpers_dataset.isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return helpers_dataset.sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(helpers_dataset.resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(helpers_dataset.resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || helpers_dataset.isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (helpers_dataset.isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n    _getAxisCount() {\n        return this._getAxis().length;\n    }\n    getFirstScaleIdForIndexAxis() {\n        const scales = this.chart.scales;\n        const indexScaleId = this.chart.options.indexAxis;\n        return Object.keys(scales).filter((key)=>scales[key].axis === indexScaleId).shift();\n    }\n    _getAxis() {\n        const axis = {};\n        const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n        for (const dataset of this.chart.data.datasets){\n            axis[helpers_dataset.valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n        }\n        return Object.keys(axis);\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && helpers_dataset.sign(value) !== helpers_dataset.sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !helpers_dataset.isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = helpers_dataset.sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = helpers_dataset.valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        const axisCount = this._getAxisCount();\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n            const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n            const axisNumber = this._getAxis().indexOf(helpers_dataset.valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = helpers_dataset.valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = helpers_dataset.valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += helpers_dataset.valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < helpers_dataset.TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>helpers_dataset._angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>helpers_dataset._angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(helpers_dataset.HALF_PI, startY, endY);\n        const minX = calcMin(helpers_dataset.PI, startX, endX);\n        const minY = calcMin(helpers_dataset.PI + helpers_dataset.HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (helpers_dataset.isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+helpers_dataset.resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return helpers_dataset.toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return helpers_dataset.toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = helpers_dataset.TAU;\n        let max = -helpers_dataset.TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(helpers_dataset.toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = helpers_dataset.toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / helpers_dataset.TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return helpers_dataset.TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = helpers_dataset.formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(helpers_dataset.valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = helpers_dataset._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (helpers_dataset._scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = helpers_dataset.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = helpers_dataset.isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = helpers_dataset.formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return helpers_dataset._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * helpers_dataset.PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? helpers_dataset.toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return helpers_dataset._parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = helpers_dataset._getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (helpers_dataset._scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = helpers_dataset.isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = helpers_dataset.isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? helpers_dataset._rlookupByKey : helpers_dataset._lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!helpers_dataset.isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!helpers_dataset.isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !helpers_dataset._isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = helpers_dataset.getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (helpers_dataset._angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = helpers_dataset.getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!helpers_dataset.isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (helpers_dataset.defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (helpers_dataset.defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = helpers_dataset.toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        helpers_dataset.each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, helpers_dataset.toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        helpers_dataset.each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = helpers_dataset.readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = helpers_dataset.readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = helpers_dataset.supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = helpers_dataset.getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && helpers_dataset._getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = helpers_dataset.throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = helpers_dataset.throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (helpers_dataset.isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return helpers_dataset.getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && helpers_dataset._getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!helpers_dataset._isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return helpers_dataset.isNumber(this.x) && helpers_dataset.isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, helpers_dataset.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, helpers_dataset.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = helpers_dataset._factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = helpers_dataset.valueOrDefault(majorStart, 0);\n    const end = Math.min(helpers_dataset.valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    helpers_dataset.each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = helpers_dataset.toFont(options.font, fallback);\n    const padding = helpers_dataset.toPadding(options.padding);\n    const lines = helpers_dataset.isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return helpers_dataset.createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return helpers_dataset.createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = helpers_dataset._toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = helpers_dataset._alignStartEnd(align, left, right);\n        if (helpers_dataset.isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (helpers_dataset.isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = helpers_dataset._alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -helpers_dataset.HALF_PI : helpers_dataset.HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = helpers_dataset.finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = helpers_dataset.finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = helpers_dataset.finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = helpers_dataset.finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: helpers_dataset.finiteOrDefault(_userMin, _suggestedMin),\n            max: helpers_dataset.finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: helpers_dataset.isNumberFinite(_userMin),\n            maxDefined: helpers_dataset.isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: helpers_dataset.finiteOrDefault(min, helpers_dataset.finiteOrDefault(max, min)),\n            max: helpers_dataset.finiteOrDefault(max, helpers_dataset.finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        helpers_dataset.callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = helpers_dataset._addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        helpers_dataset.callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        helpers_dataset.callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        helpers_dataset.callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        helpers_dataset.callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        helpers_dataset.callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = helpers_dataset.callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        helpers_dataset.callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        helpers_dataset.callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = helpers_dataset._limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = helpers_dataset.toDegrees(Math.min(Math.asin(helpers_dataset._limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(helpers_dataset._limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(helpers_dataset._limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        helpers_dataset.callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        helpers_dataset.callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = helpers_dataset.toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        helpers_dataset.callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (helpers_dataset.isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!helpers_dataset.isNullOrUndef(label) && !helpers_dataset.isArray(label)) {\n                width = helpers_dataset._measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (helpers_dataset.isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!helpers_dataset.isNullOrUndef(nestedLabel) && !helpers_dataset.isArray(nestedLabel)) {\n                        width = helpers_dataset._measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return helpers_dataset._int16Range(this._alignToPixels ? helpers_dataset._alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = helpers_dataset.toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return helpers_dataset._alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (helpers_dataset.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (helpers_dataset.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = helpers_dataset.valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = helpers_dataset._alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -helpers_dataset.toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (helpers_dataset.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (helpers_dataset.isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = helpers_dataset.isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = helpers_dataset.toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -helpers_dataset.toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = helpers_dataset._alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = helpers_dataset._alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = helpers_dataset._alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = helpers_dataset._alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            helpers_dataset.clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            helpers_dataset.renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            helpers_dataset.unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = helpers_dataset.toFont(title.font);\n        const padding = helpers_dataset.toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || helpers_dataset.isObject(position)) {\n            offset += padding.bottom;\n            if (helpers_dataset.isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        helpers_dataset.renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = helpers_dataset.valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = helpers_dataset.valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return helpers_dataset.toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            helpers_dataset.defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in helpers_dataset.defaults[scope]) {\n            delete helpers_dataset.defaults[scope][id];\n            if (this.override) {\n                delete helpers_dataset.overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = helpers_dataset.merge(Object.create(null), [\n        parentScope ? helpers_dataset.defaults.get(parentScope) : {},\n        helpers_dataset.defaults.get(scope),\n        item.defaults\n    ]);\n    helpers_dataset.defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        helpers_dataset.defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        helpers_dataset.defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                helpers_dataset.each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = helpers_dataset._capitalize(method);\n        helpers_dataset.callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        helpers_dataset.callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (helpers_dataset.callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!helpers_dataset.isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = helpers_dataset.valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = helpers_dataset.defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = helpers_dataset.overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!helpers_dataset.isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), helpers_dataset.defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = helpers_dataset.mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = helpers_dataset.overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            helpers_dataset.mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        helpers_dataset.mergeIf(scale, [\n            helpers_dataset.defaults.scales[scale.type],\n            helpers_dataset.defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = helpers_dataset.valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = helpers_dataset.resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_dataset.overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_dataset.defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, helpers_dataset.descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            helpers_dataset.overrides[type] || {},\n            helpers_dataset.defaults.datasets[type] || {},\n            {\n                type\n            },\n            helpers_dataset.defaults,\n            helpers_dataset.descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = helpers_dataset.isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = helpers_dataset._attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return helpers_dataset.isObject(context) ? helpers_dataset._attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = helpers_dataset._createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>helpers_dataset.isObject(value) && Object.getOwnPropertyNames(value).some((key)=>helpers_dataset.isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = helpers_dataset._descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (helpers_dataset.isFunction(value) || hasFunction(value)) || indexable && helpers_dataset.isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.5.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    helpers_dataset.callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    helpers_dataset.callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (helpers_dataset._isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nclass Chart {\n    static defaults = helpers_dataset.defaults;\n    static instances = instances;\n    static overrides = helpers_dataset.overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = helpers_dataset.uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = helpers_dataset.debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!helpers_dataset.isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            helpers_dataset.retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        helpers_dataset.clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!helpers_dataset.retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        helpers_dataset.callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        helpers_dataset.each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        helpers_dataset.each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = helpers_dataset.valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        helpers_dataset.each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        helpers_dataset.each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = helpers_dataset.defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        helpers_dataset.each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            helpers_dataset.each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        helpers_dataset.each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!helpers_dataset.setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!helpers_dataset.setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        helpers_dataset.each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, helpers_dataset.isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        const clip = helpers_dataset.getDatasetClipArea(this, meta);\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (clip) {\n            helpers_dataset.clipArea(ctx, clip);\n        }\n        meta.controller.draw();\n        if (clip) {\n            helpers_dataset.unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return helpers_dataset._isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = helpers_dataset.createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (helpers_dataset.defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            helpers_dataset.clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        helpers_dataset.each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        helpers_dataset.each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        helpers_dataset.each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !helpers_dataset._elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = helpers_dataset._isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            helpers_dataset.callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                helpers_dataset.callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !helpers_dataset._elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return helpers_dataset.each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipSelf(ctx, element, endAngle) {\n    const { startAngle , x , y , outerRadius , innerRadius , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const outerAngleClip = Math.min(borderWidth / outerRadius, helpers_dataset._normalizeAngle(startAngle - endAngle));\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n    if (innerRadius > 0) {\n        const innerAngleClip = Math.min(borderWidth / innerRadius, helpers_dataset._normalizeAngle(startAngle - endAngle));\n        ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n    } else {\n        const clipWidth = Math.min(borderWidth / 2, outerRadius * helpers_dataset._normalizeAngle(startAngle - endAngle));\n        if (borderJoinStyle === 'round') {\n            ctx.arc(x, y, clipWidth, endAngle - helpers_dataset.PI / 2, startAngle + helpers_dataset.PI / 2, true);\n        } else if (borderJoinStyle === 'bevel') {\n            const r = 2 * clipWidth * clipWidth;\n            const endX = -r * Math.cos(endAngle + helpers_dataset.PI / 2) + x;\n            const endY = -r * Math.sin(endAngle + helpers_dataset.PI / 2) + y;\n            const startX = r * Math.cos(startAngle + helpers_dataset.PI / 2) + x;\n            const startY = r * Math.sin(startAngle + helpers_dataset.PI / 2) + y;\n            ctx.lineTo(endX, endY);\n            ctx.lineTo(startX, startY);\n        }\n    }\n    ctx.closePath();\n    ctx.moveTo(0, 0);\n    ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + helpers_dataset.HALF_PI, startAngle - helpers_dataset.HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return helpers_dataset._readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return helpers_dataset._limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: helpers_dataset._limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: helpers_dataset._limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / helpers_dataset.PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + helpers_dataset.HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + helpers_dataset.HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - helpers_dataset.HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - helpers_dataset.HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % helpers_dataset.TAU || helpers_dataset.TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset , borderRadius  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % helpers_dataset.TAU || helpers_dataset.TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (options.selfJoin && endAngle - startAngle >= helpers_dataset.PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n        clipSelf(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true,\n        selfJoin: false\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = helpers_dataset.getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = helpers_dataset.valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = helpers_dataset._angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= helpers_dataset.TAU || nonZeroBetween;\n        const withinRadius = helpers_dataset._isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > helpers_dataset.TAU ? Math.floor(circumference / helpers_dataset.TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(helpers_dataset.PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = helpers_dataset.valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(helpers_dataset.valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = helpers_dataset.valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = helpers_dataset.valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = helpers_dataset.valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = helpers_dataset.valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return helpers_dataset._steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return helpers_dataset._bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return helpers_dataset._steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return helpers_dataset._bezierInterpolation;\n    }\n    return helpers_dataset._pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            helpers_dataset._updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = helpers_dataset._computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = helpers_dataset._boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !helpers_dataset._isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        helpers_dataset.drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : helpers_dataset._limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = helpers_dataset.toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = helpers_dataset.toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || helpers_dataset.isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || helpers_dataset._isBetween(x, bounds.left, bounds.right)) && (skipY || helpers_dataset._isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? helpers_dataset.addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return helpers_dataset.defaults.borderColor !== 'rgba(0,0,0,0.1)' || helpers_dataset.defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!helpers_dataset.isNullOrUndef(minIndex) && !helpers_dataset.isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = helpers_dataset._limitValue(helpers_dataset._lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = helpers_dataset._limitValue(helpers_dataset._lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (helpers_dataset.resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (helpers_dataset.isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = helpers_dataset._boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = helpers_dataset._boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = helpers_dataset._normalizeAngle(start);\n        end = helpers_dataset._normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (helpers_dataset.isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!helpers_dataset.isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (helpers_dataset.isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (helpers_dataset.isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (helpers_dataset.isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (helpers_dataset.isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = helpers_dataset.valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (helpers_dataset._isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: helpers_dataset.TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (helpers_dataset.isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (helpers_dataset.isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { chart , index , line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    const meta = chart.getDatasetMeta(index);\n    const clip = helpers_dataset.getDatasetClipArea(chart, meta);\n    if (target && line.points.length) {\n        helpers_dataset.clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis,\n            clip\n        });\n        helpers_dataset.unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale , clip  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    let fillColor = below;\n    if (below !== above) {\n        if (property === 'x') {\n            clipVertical(ctx, target, area.top);\n            fill(ctx, {\n                line,\n                target,\n                color: above,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipVertical(ctx, target, area.bottom);\n        } else if (property === 'y') {\n            clipHorizontal(ctx, target, area.left);\n            fill(ctx, {\n                line,\n                target,\n                color: below,\n                scale,\n                property,\n                clip\n            });\n            ctx.restore();\n            ctx.save();\n            clipHorizontal(ctx, target, area.right);\n            fillColor = above;\n        }\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: fillColor,\n        scale,\n        property,\n        clip\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(clipX, firstPoint.y);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(clipX, lastPoint.y);\n        }\n    }\n    ctx.lineTo(clipX, target.first().y);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale , clip  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n    const chartArea = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x' || property === 'y') {\n        let left, top, right, bottom;\n        if (property === 'x') {\n            left = start;\n            top = chartArea.top;\n            right = end;\n            bottom = chartArea.bottom;\n        } else {\n            left = chartArea.left;\n            top = start;\n            right = chartArea.right;\n            bottom = end;\n        }\n        ctx.beginPath();\n        if (clip) {\n            left = Math.max(left, clip.left);\n            right = Math.min(right, clip.right);\n            top = Math.max(top, clip.top);\n            bottom = Math.min(bottom, clip.bottom);\n        }\n        ctx.rect(left, top, right - left, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = helpers_dataset.callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = helpers_dataset.toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = helpers_dataset.getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = helpers_dataset._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = helpers_dataset._alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = helpers_dataset._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = helpers_dataset._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            helpers_dataset.clipArea(ctx, this);\n            this._draw();\n            helpers_dataset.unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = helpers_dataset.defaults.color;\n        const rtlHelper = helpers_dataset.getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = helpers_dataset.toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = helpers_dataset.valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = helpers_dataset.valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = helpers_dataset.valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = helpers_dataset.valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = helpers_dataset.valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = helpers_dataset.valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(helpers_dataset.valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                helpers_dataset.drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = helpers_dataset.toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    helpers_dataset.addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            helpers_dataset.renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: helpers_dataset._alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: helpers_dataset._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        helpers_dataset.overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = helpers_dataset._alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = helpers_dataset._alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = helpers_dataset._textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        helpers_dataset.restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = helpers_dataset.toFont(titleOpts.font);\n        const titlePadding = helpers_dataset.toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = helpers_dataset.getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = helpers_dataset._alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + helpers_dataset._alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = helpers_dataset._alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(helpers_dataset._toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        helpers_dataset.renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = helpers_dataset.toFont(titleOpts.font);\n        const titlePadding = helpers_dataset.toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (helpers_dataset._isBetween(x, this.left, this.right) && helpers_dataset._isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (helpers_dataset._isBetween(x, hitBox.left, hitBox.left + hitBox.width) && helpers_dataset._isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                helpers_dataset.callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                helpers_dataset.callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            helpers_dataset.callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = helpers_dataset.toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = helpers_dataset.isArray(opts.text) ? opts.text.length : 1;\n        this._padding = helpers_dataset.toPadding(opts.padding);\n        const textSize = lineCount * helpers_dataset.toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = helpers_dataset._alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = helpers_dataset._alignStartEnd(align, bottom, top);\n                rotation = helpers_dataset.PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = helpers_dataset._alignStartEnd(align, top, bottom);\n                rotation = helpers_dataset.PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = helpers_dataset.toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        helpers_dataset.renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: helpers_dataset._toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = helpers_dataset.distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (helpers_dataset.isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = helpers_dataset.toFont(options.bodyFont);\n    const titleFont = helpers_dataset.toFont(options.titleFont);\n    const footerFont = helpers_dataset.toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = helpers_dataset.toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    helpers_dataset.each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    helpers_dataset.each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    helpers_dataset.each(body, (bodyItem)=>{\n        helpers_dataset.each(bodyItem.before, maxLineWidth);\n        helpers_dataset.each(bodyItem.lines, maxLineWidth);\n        helpers_dataset.each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    helpers_dataset.each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_dataset.toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: helpers_dataset._limitValue(x, 0, chart.width - size.width),\n        y: helpers_dataset._limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = helpers_dataset.toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return helpers_dataset.createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: helpers_dataset.noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: helpers_dataset.noop,\n    beforeBody: helpers_dataset.noop,\n    beforeLabel: helpers_dataset.noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!helpers_dataset.isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: helpers_dataset.noop,\n    afterBody: helpers_dataset.noop,\n    beforeFooter: helpers_dataset.noop,\n    footer: helpers_dataset.noop,\n    afterFooter: helpers_dataset.noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        helpers_dataset.each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        helpers_dataset.each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_dataset.toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = helpers_dataset.getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = helpers_dataset.toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = helpers_dataset.toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            helpers_dataset.drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            helpers_dataset.drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = helpers_dataset.isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = helpers_dataset.toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                helpers_dataset.addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                helpers_dataset.addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = helpers_dataset.toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = helpers_dataset.getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        helpers_dataset.each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            helpers_dataset.each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            helpers_dataset.each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        helpers_dataset.each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = helpers_dataset.getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = helpers_dataset.toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = helpers_dataset.toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = helpers_dataset.toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            helpers_dataset.overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            helpers_dataset.restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !helpers_dataset._elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !helpers_dataset._elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : helpers_dataset._limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (helpers_dataset.isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, helpers_dataset.valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !helpers_dataset.isNullOrUndef(min);\n    const maxDefined = !helpers_dataset.isNullOrUndef(max);\n    const countDefined = !helpers_dataset.isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = helpers_dataset.niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = helpers_dataset.niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!helpers_dataset.isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && helpers_dataset.almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (helpers_dataset.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(helpers_dataset._decimalPlaces(spacing), helpers_dataset._decimalPlaces(niceMin));\n    factor = Math.pow(10, helpers_dataset.isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (helpers_dataset.almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && helpers_dataset.almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = helpers_dataset.toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (helpers_dataset.isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = helpers_dataset.sign(min);\n            const maxSign = helpers_dataset.sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            helpers_dataset._setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return helpers_dataset.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: helpers_dataset.Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = helpers_dataset.isNumberFinite(min) ? min : 0;\n        this.max = helpers_dataset.isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = helpers_dataset.toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(helpers_dataset.log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = helpers_dataset.finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = helpers_dataset.finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = helpers_dataset.finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: helpers_dataset.Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return helpers_dataset.isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = helpers_dataset.isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = helpers_dataset.isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !helpers_dataset.isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            helpers_dataset._setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : helpers_dataset.formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = helpers_dataset.log10(start);\n        this._valueRange = helpers_dataset.log10(this.max) - helpers_dataset.log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (helpers_dataset.log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = helpers_dataset.toPadding(tickOpts.backdropPadding);\n        return helpers_dataset.valueOrDefault(tickOpts.font && tickOpts.font.size, helpers_dataset.defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = helpers_dataset.isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: helpers_dataset._longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? helpers_dataset.PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = helpers_dataset.toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = helpers_dataset._normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(helpers_dataset.toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(helpers_dataset.toDegrees(helpers_dataset._normalizeAngle(pointLabelPosition.angle + helpers_dataset.HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = helpers_dataset._isPointInArea({\n        x: left,\n        y: top\n    }, area) || helpers_dataset._isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || helpers_dataset._isPointInArea({\n        x: right,\n        y: top\n    }, area) || helpers_dataset._isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? helpers_dataset.PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!helpers_dataset.isNullOrUndef(backdropColor)) {\n        const borderRadius = helpers_dataset.toTRBLCorners(opts.borderRadius);\n        const padding = helpers_dataset.toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            helpers_dataset.addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = helpers_dataset.toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        helpers_dataset.renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, helpers_dataset.TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return helpers_dataset.createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: helpers_dataset.Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = helpers_dataset.toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = helpers_dataset.isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = helpers_dataset.isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = helpers_dataset.callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = helpers_dataset.TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return helpers_dataset._normalizeAngle(index * angleMultiplier + helpers_dataset.toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (helpers_dataset.isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (helpers_dataset.isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - helpers_dataset.HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = helpers_dataset.toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = helpers_dataset.toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            helpers_dataset.renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (helpers_dataset.isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!helpers_dataset.isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (helpers_dataset.isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = helpers_dataset._lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        helpers_dataset.mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = helpers_dataset.isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = helpers_dataset.isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = helpers_dataset._filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = helpers_dataset._limitValue(start, 0, limit);\n        end = helpers_dataset._limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = helpers_dataset.valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = helpers_dataset.isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return helpers_dataset.callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = helpers_dataset.toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return helpers_dataset._arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = helpers_dataset._lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = helpers_dataset._lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexports.Ticks = helpers_dataset.Ticks;\nexports.defaults = helpers_dataset.defaults;\nexports.Animation = Animation;\nexports.Animations = Animations;\nexports.ArcElement = ArcElement;\nexports.BarController = BarController;\nexports.BarElement = BarElement;\nexports.BasePlatform = BasePlatform;\nexports.BasicPlatform = BasicPlatform;\nexports.BubbleController = BubbleController;\nexports.CategoryScale = CategoryScale;\nexports.Chart = Chart;\nexports.Colors = plugin_colors;\nexports.DatasetController = DatasetController;\nexports.Decimation = plugin_decimation;\nexports.DomPlatform = DomPlatform;\nexports.DoughnutController = DoughnutController;\nexports.Element = Element;\nexports.Filler = index;\nexports.Interaction = Interaction;\nexports.Legend = plugin_legend;\nexports.LineController = LineController;\nexports.LineElement = LineElement;\nexports.LinearScale = LinearScale;\nexports.LogarithmicScale = LogarithmicScale;\nexports.PieController = PieController;\nexports.PointElement = PointElement;\nexports.PolarAreaController = PolarAreaController;\nexports.RadarController = RadarController;\nexports.RadialLinearScale = RadialLinearScale;\nexports.Scale = Scale;\nexports.ScatterController = ScatterController;\nexports.SubTitle = plugin_subtitle;\nexports.TimeScale = TimeScale;\nexports.TimeSeriesScale = TimeSeriesScale;\nexports.Title = plugin_title;\nexports.Tooltip = plugin_tooltip;\nexports._adapters = adapters;\nexports._detectPlatform = _detectPlatform;\nexports.animator = animator;\nexports.controllers = controllers;\nexports.elements = elements;\nexports.layouts = layouts;\nexports.plugins = plugins;\nexports.registerables = registerables;\nexports.registry = registry;\nexports.scales = scales;\n//# sourceMappingURL=chart.cjs.map\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/chart.js/dist/chart.cjs?\n}");

/***/ }),

/***/ "./node_modules/chart.js/dist/chunks/helpers.dataset.cjs":
/*!***************************************************************!*\
  !*** ./node_modules/chart.js/dist/chunks/helpers.dataset.cjs ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\n\n\nvar color$1 = __webpack_require__(/*! @kurkle/color */ \"./node_modules/@kurkle/color/dist/color.cjs\");\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new color$1.Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new color$1.Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nfunction getDatasetClipArea(chart, meta) {\n    const clip = meta._clip;\n    if (clip.disabled) {\n        return false;\n    }\n    const area = getDatasetArea(meta, chart.chartArea);\n    return {\n        left: clip.left === false ? 0 : area.left - (clip.left === true ? 0 : clip.left),\n        right: clip.right === false ? chart.width : area.right + (clip.right === true ? 0 : clip.right),\n        top: clip.top === false ? 0 : area.top - (clip.top === true ? 0 : clip.top),\n        bottom: clip.bottom === false ? chart.height : area.bottom + (clip.bottom === true ? 0 : clip.bottom)\n    };\n}\n\nexports.HALF_PI = HALF_PI;\nexports.INFINITY = INFINITY;\nexports.PI = PI;\nexports.PITAU = PITAU;\nexports.QUARTER_PI = QUARTER_PI;\nexports.RAD_PER_DEG = RAD_PER_DEG;\nexports.TAU = TAU;\nexports.TWO_THIRDS_PI = TWO_THIRDS_PI;\nexports.Ticks = Ticks;\nexports._addGrace = _addGrace;\nexports._alignPixel = _alignPixel;\nexports._alignStartEnd = _alignStartEnd;\nexports._angleBetween = _angleBetween;\nexports._angleDiff = _angleDiff;\nexports._arrayUnique = _arrayUnique;\nexports._attachContext = _attachContext;\nexports._bezierCurveTo = _bezierCurveTo;\nexports._bezierInterpolation = _bezierInterpolation;\nexports._boundSegment = _boundSegment;\nexports._boundSegments = _boundSegments;\nexports._capitalize = _capitalize;\nexports._computeSegments = _computeSegments;\nexports._createResolver = _createResolver;\nexports._decimalPlaces = _decimalPlaces;\nexports._deprecated = _deprecated;\nexports._descriptors = _descriptors;\nexports._elementsEqual = _elementsEqual;\nexports._factorize = _factorize;\nexports._filterBetween = _filterBetween;\nexports._getParentNode = _getParentNode;\nexports._getStartAndCountOfVisiblePoints = _getStartAndCountOfVisiblePoints;\nexports._int16Range = _int16Range;\nexports._isBetween = _isBetween;\nexports._isClickEvent = _isClickEvent;\nexports._isDomSupported = _isDomSupported;\nexports._isPointInArea = _isPointInArea;\nexports._limitValue = _limitValue;\nexports._longestText = _longestText;\nexports._lookup = _lookup;\nexports._lookupByKey = _lookupByKey;\nexports._measureText = _measureText;\nexports._merger = _merger;\nexports._mergerIf = _mergerIf;\nexports._normalizeAngle = _normalizeAngle;\nexports._parseObjectDataRadialScale = _parseObjectDataRadialScale;\nexports._pointInLine = _pointInLine;\nexports._readValueToProps = _readValueToProps;\nexports._rlookupByKey = _rlookupByKey;\nexports._scaleRangesChanged = _scaleRangesChanged;\nexports._setMinAndMaxByKey = _setMinAndMaxByKey;\nexports._splitKey = _splitKey;\nexports._steppedInterpolation = _steppedInterpolation;\nexports._steppedLineTo = _steppedLineTo;\nexports._textX = _textX;\nexports._toLeftRightCenter = _toLeftRightCenter;\nexports._updateBezierControlPoints = _updateBezierControlPoints;\nexports.addRoundedRectPath = addRoundedRectPath;\nexports.almostEquals = almostEquals;\nexports.almostWhole = almostWhole;\nexports.callback = callback;\nexports.clearCanvas = clearCanvas;\nexports.clipArea = clipArea;\nexports.clone = clone;\nexports.color = color;\nexports.createContext = createContext;\nexports.debounce = debounce;\nexports.defaults = defaults;\nexports.defined = defined;\nexports.descriptors = descriptors;\nexports.distanceBetweenPoints = distanceBetweenPoints;\nexports.drawPoint = drawPoint;\nexports.drawPointLegend = drawPointLegend;\nexports.each = each;\nexports.effects = effects;\nexports.finiteOrDefault = finiteOrDefault;\nexports.fontString = fontString;\nexports.formatNumber = formatNumber;\nexports.getAngleFromPoint = getAngleFromPoint;\nexports.getDatasetClipArea = getDatasetClipArea;\nexports.getHoverColor = getHoverColor;\nexports.getMaximumSize = getMaximumSize;\nexports.getRelativePosition = getRelativePosition;\nexports.getRtlAdapter = getRtlAdapter;\nexports.getStyle = getStyle;\nexports.isArray = isArray;\nexports.isFunction = isFunction;\nexports.isNullOrUndef = isNullOrUndef;\nexports.isNumber = isNumber;\nexports.isNumberFinite = isNumberFinite;\nexports.isObject = isObject;\nexports.isPatternOrGradient = isPatternOrGradient;\nexports.listenArrayEvents = listenArrayEvents;\nexports.log10 = log10;\nexports.merge = merge;\nexports.mergeIf = mergeIf;\nexports.niceNum = niceNum;\nexports.noop = noop;\nexports.overrideTextDirection = overrideTextDirection;\nexports.overrides = overrides;\nexports.readUsedSize = readUsedSize;\nexports.renderText = renderText;\nexports.requestAnimFrame = requestAnimFrame;\nexports.resolve = resolve;\nexports.resolveObjectKey = resolveObjectKey;\nexports.restoreTextDirection = restoreTextDirection;\nexports.retinaScale = retinaScale;\nexports.setsEqual = setsEqual;\nexports.sign = sign;\nexports.splineCurve = splineCurve;\nexports.splineCurveMonotone = splineCurveMonotone;\nexports.supportsEventListenerOptions = supportsEventListenerOptions;\nexports.throttled = throttled;\nexports.toDegrees = toDegrees;\nexports.toDimension = toDimension;\nexports.toFont = toFont;\nexports.toFontString = toFontString;\nexports.toLineHeight = toLineHeight;\nexports.toPadding = toPadding;\nexports.toPercentage = toPercentage;\nexports.toRadians = toRadians;\nexports.toTRBL = toTRBL;\nexports.toTRBLCorners = toTRBLCorners;\nexports.uid = uid;\nexports.unclipArea = unclipArea;\nexports.unlistenArrayEvents = unlistenArrayEvents;\nexports.valueOrDefault = valueOrDefault;\n//# sourceMappingURL=helpers.dataset.cjs.map\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/chart.js/dist/chunks/helpers.dataset.cjs?\n}");

/***/ }),

/***/ "./node_modules/path/path.js":
/*!***********************************!*\
  !*** ./node_modules/path/path.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("{// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\n\r\n\r\nvar isWindows = process.platform === 'win32';\r\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\r\n\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  var res = [];\r\n  for (var i = 0; i < parts.length; i++) {\r\n    var p = parts[i];\r\n\r\n    // ignore empty parts\r\n    if (!p || p === '.')\r\n      continue;\r\n\r\n    if (p === '..') {\r\n      if (res.length && res[res.length - 1] !== '..') {\r\n        res.pop();\r\n      } else if (allowAboveRoot) {\r\n        res.push('..');\r\n      }\r\n    } else {\r\n      res.push(p);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// returns an array with empty elements removed from either end of the input\r\n// array or the original array if no elements need to be removed\r\nfunction trimArray(arr) {\r\n  var lastIndex = arr.length - 1;\r\n  var start = 0;\r\n  for (; start <= lastIndex; start++) {\r\n    if (arr[start])\r\n      break;\r\n  }\r\n\r\n  var end = lastIndex;\r\n  for (; end >= 0; end--) {\r\n    if (arr[end])\r\n      break;\r\n  }\r\n\r\n  if (start === 0 && end === lastIndex)\r\n    return arr;\r\n  if (start > end)\r\n    return [];\r\n  return arr.slice(start, end + 1);\r\n}\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nfunction win32StatPath(path) {\r\n  var result = splitDeviceRe.exec(path),\r\n      device = result[1] || '',\r\n      isUnc = !!device && device[1] !== ':';\r\n  return {\r\n    device: device,\r\n    isUnc: isUnc,\r\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\r\n    tail: result[3]\r\n  };\r\n}\r\n\r\nfunction normalizeUNCRoot(device) {\r\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\r\n}\r\n\r\n// path.resolve([from ...], to)\r\nwin32.resolve = function() {\r\n  var resolvedDevice = '',\r\n      resolvedTail = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1; i--) {\r\n    var path;\r\n    if (i >= 0) {\r\n      path = arguments[i];\r\n    } else if (!resolvedDevice) {\r\n      path = process.cwd();\r\n    } else {\r\n      // Windows has the concept of drive-specific current working\r\n      // directories. If we've resolved a drive letter but not yet an\r\n      // absolute path, get cwd for that drive. We're sure the device is not\r\n      // an unc path at this points, because unc paths are always absolute.\r\n      path = process.env['=' + resolvedDevice];\r\n      // Verify that a drive-local cwd was found and that it actually points\r\n      // to our drive. If not, default to the drive's root.\r\n      if (!path || path.substr(0, 3).toLowerCase() !==\r\n          resolvedDevice.toLowerCase() + '\\\\') {\r\n        path = resolvedDevice + '\\\\';\r\n      }\r\n    }\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    var result = win32StatPath(path),\r\n        device = result.device,\r\n        isUnc = result.isUnc,\r\n        isAbsolute = result.isAbsolute,\r\n        tail = result.tail;\r\n\r\n    if (device &&\r\n        resolvedDevice &&\r\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n      // This path points to another device so it is not applicable\r\n      continue;\r\n    }\r\n\r\n    if (!resolvedDevice) {\r\n      resolvedDevice = device;\r\n    }\r\n    if (!resolvedAbsolute) {\r\n      resolvedTail = tail + '\\\\' + resolvedTail;\r\n      resolvedAbsolute = isAbsolute;\r\n    }\r\n\r\n    if (resolvedDevice && resolvedAbsolute) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC\r\n  // root. Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path,\r\n  // but handle relative paths to be safe (might happen when process.cwd()\r\n  // fails)\r\n\r\n  // Normalize the tail path\r\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\r\n                                !resolvedAbsolute).join('\\\\');\r\n\r\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\r\n         '.';\r\n};\r\n\r\n\r\nwin32.normalize = function(path) {\r\n  var result = win32StatPath(path),\r\n      device = result.device,\r\n      isUnc = result.isUnc,\r\n      isAbsolute = result.isAbsolute,\r\n      tail = result.tail,\r\n      trailingSlash = /[\\\\\\/]$/.test(tail);\r\n\r\n  // Normalize the tail path\r\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\r\n\r\n  if (!tail && !isAbsolute) {\r\n    tail = '.';\r\n  }\r\n  if (tail && trailingSlash) {\r\n    tail += '\\\\';\r\n  }\r\n\r\n  // Convert slashes to backslashes when `device` points to an UNC root.\r\n  // Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    device = normalizeUNCRoot(device);\r\n  }\r\n\r\n  return device + (isAbsolute ? '\\\\' : '') + tail;\r\n};\r\n\r\n\r\nwin32.isAbsolute = function(path) {\r\n  return win32StatPath(path).isAbsolute;\r\n};\r\n\r\nwin32.join = function() {\r\n  var paths = [];\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i];\r\n    if (!util.isString(arg)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (arg) {\r\n      paths.push(arg);\r\n    }\r\n  }\r\n\r\n  var joined = paths.join('\\\\');\r\n\r\n  // Make sure that the joined path doesn't start with two slashes, because\r\n  // normalize() will mistake it for an UNC path then.\r\n  //\r\n  // This step is skipped when it is very clear that the user actually\r\n  // intended to point at an UNC path. This is assumed when the first\r\n  // non-empty string arguments starts with exactly two slashes followed by\r\n  // at least one more non-slash character.\r\n  //\r\n  // Note that for normalize() to treat a path as an UNC path it needs to\r\n  // have at least 2 components, so we don't filter for that here.\r\n  // This means that the user can use join to construct UNC paths from\r\n  // a server name and a share name; for example:\r\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\r\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\r\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\r\n  }\r\n\r\n  return win32.normalize(joined);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// it will solve the relative path from 'from' to 'to', for instance:\r\n// from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\nwin32.relative = function(from, to) {\r\n  from = win32.resolve(from);\r\n  to = win32.resolve(to);\r\n\r\n  // windows is not case sensitive\r\n  var lowerFrom = from.toLowerCase();\r\n  var lowerTo = to.toLowerCase();\r\n\r\n  var toParts = trimArray(to.split('\\\\'));\r\n\r\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\r\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));\r\n\r\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (lowerFromParts[i] !== lowerToParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (samePartsLength == 0) {\r\n    return to;\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('\\\\');\r\n};\r\n\r\n\r\nwin32._makeLong = function(path) {\r\n  // Note: this will *probably* throw somewhere.\r\n  if (!util.isString(path))\r\n    return path;\r\n\r\n  if (!path) {\r\n    return '';\r\n  }\r\n\r\n  var resolvedPath = win32.resolve(path);\r\n\r\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\r\n    // path is local filesystem path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\' + resolvedPath;\r\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\r\n    // path is network UNC path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n\r\nwin32.dirname = function(path) {\r\n  var result = win32SplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nwin32.basename = function(path, ext) {\r\n  var f = win32SplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nwin32.extname = function(path) {\r\n  return win32SplitPath(path)[3];\r\n};\r\n\r\n\r\nwin32.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir;\r\n  var base = pathObject.base || '';\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  if (dir[dir.length - 1] === win32.sep) {\r\n    return dir + base;\r\n  }\r\n  return dir + win32.sep + base;\r\n};\r\n\r\n\r\nwin32.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nwin32.sep = '\\\\';\r\nwin32.delimiter = ';';\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nposix.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path[0] === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\r\n                                !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nposix.normalize = function(path) {\r\n  var isAbsolute = posix.isAbsolute(path),\r\n      trailingSlash = path && path[path.length - 1] === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nposix.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nposix.join = function() {\r\n  var path = '';\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var segment = arguments[i];\r\n    if (!util.isString(segment)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (segment) {\r\n      if (!path) {\r\n        path += segment;\r\n      } else {\r\n        path += '/' + segment;\r\n      }\r\n    }\r\n  }\r\n  return posix.normalize(path);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nposix.relative = function(from, to) {\r\n  from = posix.resolve(from).substr(1);\r\n  to = posix.resolve(to).substr(1);\r\n\r\n  var fromParts = trimArray(from.split('/'));\r\n  var toParts = trimArray(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\n\r\nposix._makeLong = function(path) {\r\n  return path;\r\n};\r\n\r\n\r\nposix.dirname = function(path) {\r\n  var result = posixSplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nposix.basename = function(path, ext) {\r\n  var f = posixSplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nposix.extname = function(path) {\r\n  return posixSplitPath(path)[3];\r\n};\r\n\r\n\r\nposix.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\r\n  var base = pathObject.base || '';\r\n  return dir + base;\r\n};\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nposix.sep = '/';\r\nposix.delimiter = ':';\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32;\r\nelse /* posix */\r\n  module.exports = posix;\r\n\r\nmodule.exports.posix = posix;\r\nmodule.exports.win32 = win32;\r\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/path/path.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/qasm-ts/dist/errors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadArgumentError: () => (/* binding */ BadArgumentError),\n/* harmony export */   BadBarrierError: () => (/* binding */ BadBarrierError),\n/* harmony export */   BadClassicalTypeError: () => (/* binding */ BadClassicalTypeError),\n/* harmony export */   BadConditionalError: () => (/* binding */ BadConditionalError),\n/* harmony export */   BadCregError: () => (/* binding */ BadCregError),\n/* harmony export */   BadEqualsError: () => (/* binding */ BadEqualsError),\n/* harmony export */   BadExpressionError: () => (/* binding */ BadExpressionError),\n/* harmony export */   BadGateError: () => (/* binding */ BadGateError),\n/* harmony export */   BadIncludeError: () => (/* binding */ BadIncludeError),\n/* harmony export */   BadLoopError: () => (/* binding */ BadLoopError),\n/* harmony export */   BadMeasurementError: () => (/* binding */ BadMeasurementError),\n/* harmony export */   BadParameterError: () => (/* binding */ BadParameterError),\n/* harmony export */   BadQregError: () => (/* binding */ BadQregError),\n/* harmony export */   BadQuantumInstructionError: () => (/* binding */ BadQuantumInstructionError),\n/* harmony export */   BadStringLiteralError: () => (/* binding */ BadStringLiteralError),\n/* harmony export */   BadSubroutineError: () => (/* binding */ BadSubroutineError),\n/* harmony export */   MissingBraceError: () => (/* binding */ MissingBraceError),\n/* harmony export */   MissingSemicolonError: () => (/* binding */ MissingSemicolonError),\n/* harmony export */   UnsupportedOpenQASMVersionError: () => (/* binding */ UnsupportedOpenQASMVersionError)\n/* harmony export */ });\n/**\n * Error classes for QASM parsing and validation\n *\n * This module provides specific error types for different parsing failures,\n * enabling precise error handling and debugging. Each error includes contextual\n * information about where the error occurred in the source code.\n *\n * @module Error Handling\n */\n/** Class representing a bad argument exception. */\nclass BadArgumentError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadArgumentError.name;\n    }\n}\n/** Class representing a bad include statement */\nclass BadIncludeError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadIncludeError.name;\n    }\n}\n/** Class representing a bad quantum register exception. */\nclass BadQregError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadQregError.name;\n    }\n}\n/** Class representing a bad equality exception. */\nclass BadEqualsError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadEqualsError.name;\n    }\n}\n/** Class representing a bad classical register exception. */\nclass BadCregError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadCregError.name;\n    }\n}\n/** Class representing a bad conditional exception. */\nclass BadConditionalError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadConditionalError.name;\n    }\n}\n/** Class representing a bad barrier exception. */\nclass BadBarrierError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadBarrierError.name;\n    }\n}\n/** Class representing a bad measurement exception. */\nclass BadMeasurementError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadMeasurementError.name;\n    }\n}\n/** Class representing a bad gate exception. */\nclass BadGateError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadGateError.name;\n    }\n}\n/** Class representing a bad parameter exception. */\nclass BadParameterError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadParameterError.name;\n    }\n}\n/** Class representing a missing semicolon exception. */\nclass MissingSemicolonError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = MissingSemicolonError.name;\n    }\n}\n/** Class representing a missing opening or closing parenthesis, bracket, or curly brakcet. */\nclass MissingBraceError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = MissingSemicolonError.name;\n    }\n}\n/** Class representing an unsupported OpenQASM version exception. */\nclass UnsupportedOpenQASMVersionError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = UnsupportedOpenQASMVersionError.name;\n    }\n}\n/** Class representing an error parsing an expected string literal. */\nclass BadStringLiteralError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadStringLiteralError.name;\n    }\n}\n/** Class representing an error parsing scalar types. */\nclass BadClassicalTypeError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadClassicalTypeError.name;\n    }\n}\n/** Class representing an error parsing an expression. */\nclass BadExpressionError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadExpressionError.name;\n    }\n}\n/** Class representing an error in defining or calling a custom subroutine. */\nclass BadSubroutineError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadSubroutineError.name;\n    }\n}\n/** Class representing a bad loop statement declaration. */\nclass BadLoopError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadLoopError.name;\n    }\n}\n/** Class representing a bad quantum instruction. */\nclass BadQuantumInstructionError extends Error {\n    constructor(message) {\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n        this.name = BadQuantumInstructionError.name;\n    }\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/errors.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/lexer.js":
/*!********************************************!*\
  !*** ./node_modules/qasm-ts/dist/lexer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   lex: () => (/* binding */ lex)\n/* harmony export */ });\n/* harmony import */ var _qasm2_lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qasm2/lexer */ \"./node_modules/qasm-ts/dist/qasm2/lexer.js\");\n/* harmony import */ var _qasm3_lexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./qasm3/lexer */ \"./node_modules/qasm-ts/dist/qasm3/lexer.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ \"./node_modules/qasm-ts/dist/version.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/**\n * Main lexer interface for tokenizing QASM code\n *\n * The lexer is responsible for breaking down QASM source code into tokens\n * that can be consumed by the parser. It supports both OpenQASM 2.0 and 3.0\n * syntax, with version-specific lexers handling the differences in token types\n * and syntax rules.\n *\n * The specific Lexer implementations can be found at:\n * - {@link Qasm3Lexer}\n * - {@link Qasm2Lexer}\n *\n * @module Lexing\n *\n * @example Token Flow\n * ```\n * Source Code → Lexer → Tokens → Parser → AST\n * \"h q[0];\"  →  [Id, Id, LSParen, NNInteger, RSParen, Semicolon]\n * ```\n *\n *  * @example Basic lexing workflow\n * ```typescript\n * import { lex } from './lexer';\n *\n * const qasmCode = 'OPENQASM 3.0; qubit q; h q;';\n * const tokens = lex(qasmCode);\n * console.log(tokens);\n * // [\n * //   [Token.OpenQASM, undefined],\n * //   [Token.Id, 'qubit'],\n * //   [Token.Id, 'q'],\n * //   [Token.Semicolon, undefined],\n * //   [Token.Id, 'h'],\n * //   [Token.Id, 'q'],\n * //   [Token.Semicolon, undefined]\n * // ]\n * ```\n */\n\n\n\n\n/**\n * Tokenizes OpenQASM source code into an array of tokens.\n *\n * This is the main entry point for lexical analysis. It automatically selects\n * the appropriate lexer implementation based on the OpenQASM version and returns\n * an array of tokens that can be consumed by the parser.\n *\n * Each token is represented as a tuple containing:\n * - **Token type**: An enum value indicating the kind of token\n * - **Token value**: The associated value (for literals, identifiers, operators)\n *\n * @group Lexing\n * @param qasm - The OpenQASM source code to tokenize\n * @param cursor - Starting position in the input string (defaults to 0)\n * @param version - OpenQASM version to use for lexing (defaults to 3.0)\n * @returns Array of token tuples [TokenType, value?]\n * @throws {UnsupportedOpenQASMVersionError} When an unsupported version is specified\n *\n * @example Tokenize OpenQASM 3.0 code\n * ```typescript\n * const tokens = lex('qubit[2] q; h q[0];', 0, 3);\n * // Returns tokens using OpenQASM 3.0 syntax rules\n * ```\n *\n * @example Tokenize OpenQASM 2.0 code\n * ```typescript\n * const tokens = lex('qreg q[2]; h q[0];', 0, 2);\n * // Returns tokens using OpenQASM 2.0 syntax rules\n * ```\n *\n * @example Resume lexing from specific position\n * ```typescript\n * const code = 'OPENQASM 3.0; qubit q;';\n * const tokens = lex(code, 12); // Start after \"OPENQASM 3.0\"\n * ```\n */\nfunction lex(qasm, cursor, version) {\n    let lexer;\n    if (version instanceof _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMVersion) {\n        switch (version.major) {\n            case _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version2:\n                lexer = new _qasm2_lexer__WEBPACK_IMPORTED_MODULE_0__[\"default\"](qasm, cursor);\n                break;\n            case _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version3:\n                lexer = new _qasm3_lexer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](qasm, cursor);\n                break;\n            default:\n                throw new _errors__WEBPACK_IMPORTED_MODULE_3__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${version.major}`);\n        }\n    }\n    else if (typeof version === \"number\") {\n        switch (version) {\n            case 2:\n                lexer = new _qasm2_lexer__WEBPACK_IMPORTED_MODULE_0__[\"default\"](qasm, cursor);\n                break;\n            case 3:\n                lexer = new _qasm3_lexer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](qasm, cursor);\n                break;\n            default:\n                throw new _errors__WEBPACK_IMPORTED_MODULE_3__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${version}`);\n        }\n    }\n    else if (version === _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version2) {\n        lexer = new _qasm2_lexer__WEBPACK_IMPORTED_MODULE_0__[\"default\"](qasm, cursor);\n    }\n    else if (version === _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version3) {\n        lexer = new _qasm3_lexer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](qasm, cursor);\n    }\n    else {\n        lexer = new _qasm3_lexer__WEBPACK_IMPORTED_MODULE_1__[\"default\"](qasm, cursor);\n    }\n    const tokens = lexer.lex();\n    return tokens;\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/lexer.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/main.js":
/*!*******************************************!*\
  !*** ./node_modules/qasm-ts/dist/main.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseFile: () => (/* binding */ parseFile),\n/* harmony export */   parseString: () => (/* binding */ parseString)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"?253a\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lexer */ \"./node_modules/qasm-ts/dist/lexer.js\");\n/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ \"./node_modules/qasm-ts/dist/parser.js\");\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n/**\n * Main parsing functions for qasm-ts - the primary entry points for parsing OpenQASM code\n * @module Main Functions\n */\n\n\n\n/**\n * Parses OpenQASM code from a string and returns the abstract syntax tree.\n *\n * This is the primary entry point for parsing OpenQASM code. It handles both\n * OpenQASM 2.0 and 3.0 syntax, automatically selecting the appropriate lexer\n * and parser based on the version parameter.\n *\n * @group Main Functions\n * @param qasm - The OpenQASM code string to parse\n * @param version - The OpenQASM version to use (defaults to 3.0)\n * @param verbose - Whether to include class names in the output (defaults to false)\n * @param stringify - Whether to return stringified JSON (defaults to false)\n * @returns The corresponding AST as an array of nodes, or stringified JSON if stringify is true\n *\n * @example Basic OpenQASM 3.0 parsing\n * ```typescript\n * import { parseString } from 'qasm-ts';\n *\n * const qasmCode = `\n * OPENQASM 3.0;\n * include \"stdgates.inc\";\n * qubit[2] q;\n * h q[0];\n * cx q[0], q[1];\n * `;\n *\n * const ast = parseString(qasmCode);\n * console.log(ast);\n * ```\n *\n * @example OpenQASM 2.0 parsing\n * ```typescript\n * const qasm2Code = `\n * OPENQASM 2.0;\n * include \"qelib1.inc\";\n * qreg q[2];\n * creg c[2];\n * h q[0];\n * cx q[0],q[1];\n * measure q -> c;\n * `;\n *\n * const ast = parseString(qasm2Code, 2);\n * ```\n *\n * @example Verbose output with class names\n * ```typescript\n * const ast = parseString(qasmCode, 3, true);\n * // Output will include __className__ properties for each node\n * ```\n */\nfunction parseString(qasm, version, verbose, stringify) {\n    let ast;\n    const tokens = (0,_lexer__WEBPACK_IMPORTED_MODULE_1__.lex)(qasm, undefined, version);\n    ast = (0,_parser__WEBPACK_IMPORTED_MODULE_2__.parse)(tokens, version);\n    if (verbose === true) {\n        if (stringify === true) {\n            ast = JSON.stringify(getDetailedOutput(ast), null, 2);\n        }\n        ast = getDetailedOutput(ast);\n    }\n    else {\n        if (stringify === true) {\n            ast = JSON.stringify(ast, null, 2);\n        }\n    }\n    return ast;\n}\n/**\n * Parses OpenQASM code from a file and returns the abstract syntax tree.\n *\n * @group Main Functions\n * @param file - The path to the .qasm file to parse\n * @param version - The OpenQASM version to use (defaults to 3.0)\n * @param verbose - Whether to include class names in the output (defaults to false)\n * @param stringify - Whether to return stringified JSON (defaults to false)\n * @returns The corresponding AST as an array of nodes, or stringified JSON if stringify is true\n *\n * @example Parse a QASM file\n * ```typescript\n * import { parseFile } from 'qasm-ts';\n *\n * // Parse OpenQASM 3.0 file\n * const ast = parseFile('./my-circuit.qasm');\n *\n * // Parse OpenQASM 2.0 file\n * const ast2 = parseFile('./legacy-circuit.qasm', 2);\n * ```\n *\n * @example Parse with verbose output\n * ```typescript\n * const ast = parseFile('./circuit.qasm', 3, true);\n * // Includes detailed class information for each AST node\n * ```\n */\nfunction parseFile(file, version, verbose, stringify) {\n    return parseString(fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync(file, \"utf8\"), version, verbose, stringify);\n}\n/**\n * Adds class names to AST nodes for detailed inspection.\n * @internal\n */\nfunction getDetailedOutput(object) {\n    if (Array.isArray(object)) {\n        return object.map(getDetailedOutput);\n    }\n    else if (object !== null && typeof object === \"object\") {\n        const result = {};\n        result[\"__className__\"] = object.constructor.name;\n        for (const [key, value] of Object.entries(object)) {\n            result[key] = getDetailedOutput(value);\n        }\n        return result;\n    }\n    else {\n        return object;\n    }\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/main.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/parser.js":
/*!*********************************************!*\
  !*** ./node_modules/qasm-ts/dist/parser.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _qasm2_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./qasm2/parser */ \"./node_modules/qasm-ts/dist/qasm2/parser.js\");\n/* harmony import */ var _qasm3_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./qasm3/parser */ \"./node_modules/qasm-ts/dist/qasm3/parser.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./version */ \"./node_modules/qasm-ts/dist/version.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/**\n * Main parser interface for generating AST from tokens\n *\n * The parser is responsible for transforming a stream of tokens into an Abstract\n * Syntax Tree (AST) that represents the structure of the OpenQASM program. It acts\n * as a dispatcher, selecting the appropriate version-specific parser based on the\n * OpenQASM version being used.\n *\n * The parsing process follows these steps:\n * 1. Receive tokenized input from the lexer\n * 2. Determine OpenQASM version (2.0 or 3.0)\n * 3. Select appropriate parser implementation\n * 4. Generate version-specific AST nodes\n *\n * The specific Parser implementations can be found at:\n * - {@link Qasm3Parser}\n * - {@link Qasm2Parser}\n *\n * @module Parsing\n *\n * @example Basic parsing workflow\n * ```typescript\n * import { lex } from './lexer';\n * import { parse } from './parser';\n *\n * const qasmCode = 'OPENQASM 3.0; h q[0];';\n * const tokens = lex(qasmCode, undefined, 3);\n * const ast = parse(tokens, 3);\n * console.log(ast); // Array of AST nodes\n * ```\n *\n * @example Version-specific parsing\n * ```typescript\n * // Parse as OpenQASM 2.0\n * const ast2 = parse(tokens, 2);\n *\n * // Parse as OpenQASM 3.0\n * const ast3 = parse(tokens, 3);\n *\n * // Use OpenQASMVersion object\n * const version = new OpenQASMVersion(3, 0);\n * const ast = parse(tokens, version);\n * ```\n */\n\n\n\n\n/**\n * Parses an array of tokens into an Abstract Syntax Tree (AST).\n *\n * This is the main entry point for parsing tokenized OpenQASM code. It automatically\n * selects the appropriate parser implementation based on the specified version and\n * returns an AST that can be used for further analysis, compilation, or execution.\n *\n * @group Parsing\n * @param tokens - Array of tokens generated by the lexer\n * @param version - OpenQASM version to use for parsing (defaults to 3.0)\n * @returns Abstract Syntax Tree representing the parsed program\n * @throws {UnsupportedOpenQASMVersionError} When an unsupported version is specified\n *\n * @example Parse OpenQASM 3.0 tokens\n * ```typescript\n * const tokens = lex('OPENQASM 3.0; qubit q; h q;');\n * const ast = parse(tokens, 3);\n * // Returns array of OpenQASM 3.0 AST nodes\n * ```\n *\n * @example Parse OpenQASM 2.0 tokens\n * ```typescript\n * const tokens = lex('OPENQASM 2.0; qreg q[1]; h q[0];');\n * const ast = parse(tokens, 2);\n * // Returns array of OpenQASM 2.0 AST nodes\n * ```\n */\nfunction parse(tokens, version) {\n    let parser;\n    let castTokens;\n    if (version instanceof _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMVersion) {\n        switch (version.major) {\n            case _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version2:\n                castTokens = tokens;\n                parser = new _qasm2_parser__WEBPACK_IMPORTED_MODULE_0__[\"default\"](castTokens);\n                break;\n            case _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version3:\n                castTokens = tokens;\n                parser = new _qasm2_parser__WEBPACK_IMPORTED_MODULE_0__[\"default\"](castTokens);\n                break;\n            default:\n                throw new _errors__WEBPACK_IMPORTED_MODULE_3__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${version.major}`);\n        }\n    }\n    else if (typeof version === \"number\") {\n        switch (version) {\n            case 2:\n                castTokens = tokens;\n                parser = new _qasm2_parser__WEBPACK_IMPORTED_MODULE_0__[\"default\"](castTokens);\n                break;\n            case 3:\n                castTokens = tokens;\n                parser = new _qasm3_parser__WEBPACK_IMPORTED_MODULE_1__[\"default\"](castTokens);\n                break;\n            default:\n                throw new _errors__WEBPACK_IMPORTED_MODULE_3__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${version}`);\n        }\n    }\n    else if (version === _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version2) {\n        castTokens = tokens;\n        parser = new _qasm2_parser__WEBPACK_IMPORTED_MODULE_0__[\"default\"](castTokens);\n    }\n    else if (version === _version__WEBPACK_IMPORTED_MODULE_2__.OpenQASMMajorVersion.Version3) {\n        castTokens = tokens;\n        parser = new _qasm3_parser__WEBPACK_IMPORTED_MODULE_1__[\"default\"](castTokens);\n    }\n    else {\n        castTokens = tokens;\n        parser = new _qasm3_parser__WEBPACK_IMPORTED_MODULE_1__[\"default\"](castTokens);\n    }\n    const ast = parser.parse();\n    return ast;\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/parser.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm2/ast.js":
/*!************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm2/ast.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplyGate: () => (/* binding */ ApplyGate),\n/* harmony export */   AstNode: () => (/* binding */ AstNode),\n/* harmony export */   Barrier: () => (/* binding */ Barrier),\n/* harmony export */   CReg: () => (/* binding */ CReg),\n/* harmony export */   Cos: () => (/* binding */ Cos),\n/* harmony export */   Divide: () => (/* binding */ Divide),\n/* harmony export */   Exp: () => (/* binding */ Exp),\n/* harmony export */   Gate: () => (/* binding */ Gate),\n/* harmony export */   Id: () => (/* binding */ Id),\n/* harmony export */   If: () => (/* binding */ If),\n/* harmony export */   Include: () => (/* binding */ Include),\n/* harmony export */   Ln: () => (/* binding */ Ln),\n/* harmony export */   Measure: () => (/* binding */ Measure),\n/* harmony export */   Minus: () => (/* binding */ Minus),\n/* harmony export */   NNInteger: () => (/* binding */ NNInteger),\n/* harmony export */   Opaque: () => (/* binding */ Opaque),\n/* harmony export */   Pi: () => (/* binding */ Pi),\n/* harmony export */   Plus: () => (/* binding */ Plus),\n/* harmony export */   Power: () => (/* binding */ Power),\n/* harmony export */   QReg: () => (/* binding */ QReg),\n/* harmony export */   Real: () => (/* binding */ Real),\n/* harmony export */   Sin: () => (/* binding */ Sin),\n/* harmony export */   Sqrt: () => (/* binding */ Sqrt),\n/* harmony export */   Tan: () => (/* binding */ Tan),\n/* harmony export */   Times: () => (/* binding */ Times),\n/* harmony export */   Variable: () => (/* binding */ Variable),\n/* harmony export */   Version: () => (/* binding */ Version)\n/* harmony export */ });\n/**\n * OpenQASM 2.0 Abstract Syntax Tree Node Definitions\n *\n * This module defines the AST node classes for OpenQASM 2.0, which provides\n * a simpler and more limited set of constructs compared to OpenQASM 3.0.\n *\n * OpenQASM 2.0 focuses on:\n * - Basic quantum register (`qreg`) and classical register (`creg`) declarations\n * - Gate definitions and applications\n * - Measurement operations\n * - Simple conditional statements\n * - Basic arithmetic expressions\n *\n * Key limitations compared to 3.0:\n * - No advanced classical types (only registers)\n * - No control flow structures (loops, complex conditionals)\n * - No function definitions or subroutines\n * - Limited expression capabilities\n *\n * @module\n *\n * @example Basic OpenQASM 2.0 constructs\n * ```typescript\n * // Quantum register: qreg q[2];\n * new QReg('q', 2)\n *\n * // Gate application: h q[0];\n * new ApplyGate('h', [['q', 0]], [])\n *\n * // Measurement: measure q[0] -> c[0];\n * new Measure('q', 'c', 0, 0)\n * ```\n */\n/** Base class representing a basic AST node. */\nclass AstNode {\n}\n/** Class representing the version statement. */\nclass Version extends AstNode {\n    constructor(version) {\n        super();\n        this.version = version;\n    }\n}\n/** Class representing an include statement. */\nclass Include extends AstNode {\n    constructor(filename) {\n        super();\n        this.filename = filename;\n    }\n}\n/** Class representing a qubit register. */\nclass QReg extends AstNode {\n    constructor(id, size) {\n        super();\n        this.id = id;\n        this.size = size;\n    }\n}\n/** Class representing a classical register. */\nclass CReg extends AstNode {\n    constructor(id, size) {\n        super();\n        this.id = id;\n        this.size = size;\n    }\n}\n/** Class representing an identifier. */\nclass Id extends AstNode {\n    constructor(id) {\n        super();\n        this.id = id;\n    }\n}\n/** Class representing a barrier. */\nclass Barrier extends AstNode {\n    constructor(register, index) {\n        super();\n        this.index = index || null;\n        this.register = register;\n    }\n}\n/** Class representing a variable. */\nclass Variable extends AstNode {\n    constructor(value) {\n        super();\n        this.value = value || null;\n    }\n}\n/** Class representing a measurement. */\nclass Measure extends AstNode {\n    constructor(src_register, dest_register, src_index, dest_index) {\n        super();\n        this.src_index = src_index != undefined ? src_index : null;\n        this.src_register = src_register;\n        this.dest_index = dest_index != undefined ? dest_index : null;\n        this.dest_register = dest_register;\n    }\n}\n/** Class representing a gate application. */\nclass ApplyGate extends AstNode {\n    constructor(name, qubits, params) {\n        super();\n        this.name = name;\n        this.qubits = qubits;\n        this.params = params;\n    }\n}\n/** Class representing a gate. */\nclass Gate extends AstNode {\n    constructor(name, registers, params, nodes) {\n        super();\n        this.name = name;\n        this.registers = registers;\n        this.params = params;\n        this.nodes = nodes;\n    }\n}\n/** Class representing an opaque gate declaration (only available in OpenQASM 2.x versions) */\nclass Opaque extends AstNode {\n    constructor(name, qubits, params = []) {\n        super();\n        this.name = name;\n        this.qubits = qubits;\n        this.params = params;\n    }\n}\n/** Class representing conditional. */\nclass If extends AstNode {\n    constructor(register, param, gate) {\n        super();\n        this.register = register;\n        this.param = param;\n        this.gate = gate;\n    }\n}\n/** Class representing minus. */\nclass Minus extends AstNode {\n}\n/** Class representing plus. */\nclass Plus extends AstNode {\n}\n/** Class representing times. */\nclass Times extends AstNode {\n}\n/** Class representing power. */\nclass Power extends AstNode {\n}\n/** Class representing division. */\nclass Divide extends AstNode {\n}\n/** Class representing pi. */\nclass Pi extends AstNode {\n}\n/** Class representing the square root. */\nclass Sqrt extends AstNode {\n}\n/** Class representing natural logarithm. */\nclass Ln extends AstNode {\n}\n/** Class representing exponentiation. */\nclass Exp extends AstNode {\n}\n/** Class representing tagnent. */\nclass Tan extends AstNode {\n}\n/** Class representing cosine. */\nclass Cos extends AstNode {\n}\n/** Class representing sine. */\nclass Sin extends AstNode {\n}\n/** Class representing an integer. */\nclass NNInteger extends AstNode {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing a real. */\nclass Real extends AstNode {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm2/ast.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm2/lexer.js":
/*!**************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm2/lexer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ \"./node_modules/qasm-ts/dist/qasm2/token.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/**\n * OpenQASM 2.0 Lexical Analyzer\n *\n * This module implements the lexer for OpenQASM 2.0, which provides a simpler\n * token set compared to OpenQASM 3.0. The lexer focuses on basic quantum circuit\n * constructs without the advanced classical programming features of version 3.0.\n *\n * Key characteristics of OpenQASM 2.0 lexing:\n * - **Limited token set**: Basic quantum and classical registers only\n * - **Simple operators**: Basic arithmetic and comparison operators\n * - **No control flow**: No tokens for loops, conditionals, or functions\n * - **Gate-focused**: Emphasis on gate definitions and applications\n * - **Mathematical functions**: Built-in math functions (sin, cos, etc.)\n *\n * Supported constructs:\n * - Quantum registers (`qreg`) and classical registers (`creg`)\n * - Gate definitions and applications\n * - Measurements with arrow notation (`->`)\n * - Basic arithmetic expressions for gate parameters\n * - Include statements for library files\n *\n * @module\n *\n * @example OpenQASM 2.0 lexing\n * ```typescript\n * const lexer = new Lexer('qreg q[2]; h q[0]; measure q -> c;');\n * const tokens = lexer.lex();\n * // Produces tokens for register declaration, gate, and measurement\n * ```\n */\n\n\n/**\n * Handles throwing lexer errors with basic stack trace.\n * @param error - The error to throw.\n * @param number - The line number in the source code.\n * @param code - The source code that the error is about.\n */\nfunction throwLexerError(error, line, code) {\n    throw new error(`Line ${line}: ${code}`);\n}\n/**\n * Returns whether a given character could be an element of a numeric value.\n * @param c - The character.\n * @return Whether the character is numeric.\n */\nfunction isNumeric(c) {\n    return c == \".\" || !isNaN(parseInt(c));\n}\n/**\n * Returns whether a given character is a letter.\n * @param c - The character.\n * @param matchCase - Whether to check for a letter that is upper case, lower case, or either. (optional)\n * @return Whether the character is a letter.\n */\nfunction isLetter(c, matchCase) {\n    switch (matchCase) {\n        case \"upper\":\n            return /^[A-Z]$/.test(c);\n        case \"lower\":\n            return /^[a-z]$/.test(c);\n        default:\n            return /^[A-Za-z]$/.test(c);\n    }\n}\n/**\n * Returns whether a given character is unicode.\n * @param c - The character.\n * @param excludePi - Whether to exclude the Pi symbol from consideration.\n * @return - Whether the given character is valid unicode.\n */\nfunction isUnicode(c, excludePi) {\n    const isBasicUnicode = /^\\u0000-\\u00ff/.test(c);\n    switch (excludePi) {\n        case true:\n            return isBasicUnicode && c !== \"\\u03C0\";\n        case false:\n            return isBasicUnicode;\n        default:\n            return isBasicUnicode;\n    }\n}\n/**\n * Returns whether a given character is alphanumeric.\n * @param c - The character.\n * @return Whether the character is alphanumeric.\n */\nfunction isAlpha(c) {\n    return /^[0-9a-zA-Z]+$/.test(c);\n}\n/**\n * Returns whether a given character is a newline character.\n * @param c - The character.\n * @return Whether the character is a newline.\n */\nfunction isNewline(c) {\n    return /\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/.test(c);\n}\n/**\n * OpenQASM 2.0 Lexical Analyzer\n *\n * A simpler lexer implementation focused on the core quantum circuit description\n * features of OpenQASM 2.0. This lexer handles the essential constructs needed\n * for basic quantum programming without the complexity of classical programming\n * language features.\n *\n * @example Basic OpenQASM 2.0 tokenization\n * ```typescript\n * const source = `\n *   OPENQASM 2.0;\n *   include \"qelib1.inc\";\n *   qreg q[2];\n *   creg c[2];\n *   h q[0];\n *   cx q[0],q[1];\n *   measure q -> c;\n * `;\n *\n * const lexer = new Lexer(source);\n * const tokens = lexer.lex();\n * ```\n */\nclass Lexer {\n    /**\n     * Creates a lexer.\n     * @param input - The string to lex.\n     * @param cursor - The starting cursor position.\n     */\n    constructor(input, cursor = 0) {\n        /**\n         * Verifies that all appropriate lines end with a semicolon.\n         * @return A tuple of the status and if False, returns the problematic line.\n         */\n        this.verifyInput = () => {\n            const lines = this.input.split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/g);\n            for (let i = 0; i < lines.length; i++) {\n                if (!lines[i].startsWith(\"//\") &&\n                    !(lines[i].length == 0) &&\n                    !lines[i].includes(\"gate\") &&\n                    !(lines[i].trim() == \"{\" || lines[i].trim() == \"}\") &&\n                    !lines[i].includes(\";\")) {\n                    return [false, i + 1, lines[i]];\n                }\n            }\n            return [true, null, null];\n        };\n        /**\n         * Calling this method lexes the code represented by the provided string.\n         * @return An array of tokens and their corresponding values.\n         */\n        this.lex = () => {\n            const tokens = [];\n            let token;\n            const verifyInputResult = this.verifyInput();\n            if (!verifyInputResult[0]) {\n                throwLexerError(_errors__WEBPACK_IMPORTED_MODULE_1__.MissingSemicolonError, verifyInputResult[1], verifyInputResult[2]);\n            }\n            while (this.cursor < this.input.length) {\n                token = this.nextToken();\n                if (token) {\n                    tokens.push(token);\n                }\n            }\n            return tokens;\n        };\n        /**\n         * Reads a character and advances the cursor.\n         * @param num - Optional cursor position modifier.\n         */\n        this.readChar = (num = 1) => {\n            this.cursor += num;\n            return this.input[this.cursor - num];\n        };\n        /**\n         * Advances the cusor past the next comment.\n         */\n        this.skipComment = () => {\n            let char = \"\";\n            while (!isNewline(char)) {\n                char = this.readChar();\n            }\n        };\n        /**\n         * Determines whether the next character to process equals a given character.\n         * @param c - The given character.\n         * @return Whether the next character equals the given character.\n         */\n        this.peekEq = (c) => this.peek() == c;\n        /**\n         * Reads a character without advancing the cursor.\n         * @param index - Optional peek position offset.\n         */\n        this.peek = () => this.input[this.cursor];\n        /**\n         * Reads a numeric value.\n         * @return The numeric value as a string.\n         */\n        this.readNumeric = () => {\n            let num = \"\";\n            while (isNumeric(this.peek())) {\n                num += this.readChar();\n            }\n            return num;\n        };\n        /**\n         * Reads an identifier.\n         * @return The identifier as a string.\n         */\n        this.readIdentifier = () => {\n            let id = \"\";\n            let next = this.peek();\n            while (isAlpha(next) || next == \"_\" || isUnicode(next)) {\n                id += this.readChar();\n                next = this.peek();\n            }\n            return id;\n        };\n        /**\n         * Reads a string literal.\n         * @param terminator - The literal's termination character.\n         * @return The literal as a string.\n         */\n        this.readStringLiteral = (terminator) => {\n            let lit = \"\";\n            let char = \"\";\n            while (!(terminator == char)) {\n                char = this.readChar();\n                lit += char;\n            }\n            return lit;\n        };\n        /**\n         * Advances the cusor past the next block of whitespace.\n         */\n        this.skipWhitespace = () => {\n            while (\" \\t\\n\\r\\v\".indexOf(this.peek()) > -1) {\n                this.cursor += 1;\n            }\n            return null;\n        };\n        /**\n         * Lexes the next token.\n         * @return The next token and its corresponding value.\n         */\n        this.nextToken = () => {\n            this.skipWhitespace();\n            if (this.cursor == this.input.length) {\n                return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EndOfFile];\n            }\n            const char = this.peek();\n            this.readChar();\n            switch (char) {\n                case \"=\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Equals];\n                    }\n                    else {\n                        throwLexerError(_errors__WEBPACK_IMPORTED_MODULE_1__.BadEqualsError, this.getLineNumber(this.cursor), this.getCurrentLine(this.cursor));\n                        break;\n                    }\n                case \"-\":\n                    if (this.peekEq(\">\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Minus];\n                    }\n                case \"+\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Plus];\n                case \"*\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Times];\n                case \"^\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Power];\n                case \";\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon];\n                case \",\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma];\n                case \"(\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen];\n                case \"[\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen];\n                case \"{\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen];\n                case \")\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen];\n                case \"]\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen];\n                case \"}\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen];\n                case \"/\":\n                    if (this.peekEq(\"/\")) {\n                        this.skipComment();\n                        return;\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Divide];\n                    }\n                case \"g\":\n                    if (this.input[this.cursor] == \"a\" &&\n                        this.input[this.cursor + 1] == \"t\" &&\n                        this.input[this.cursor + 2] == \"e\") {\n                        this.readChar(3);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Gate];\n                    }\n                    {\n                        const literal = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(literal), literal];\n                    }\n                case \"q\":\n                    if (this.input[this.cursor] == \"r\" &&\n                        this.input[this.cursor + 1] == \"e\" &&\n                        this.input[this.cursor + 2] == \"g\") {\n                        this.readChar(3);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.QReg];\n                    }\n                    {\n                        const qregLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(qregLit), qregLit];\n                    }\n                case \"c\":\n                    if (this.input[this.cursor] == \"r\" &&\n                        this.input[this.cursor + 1] == \"e\" &&\n                        this.input[this.cursor + 2] == \"g\") {\n                        this.readChar(3);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CReg];\n                    }\n                    {\n                        const cregLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(cregLit), cregLit];\n                    }\n                case \"b\":\n                    if (this.input[this.cursor] == \"a\" &&\n                        this.input[this.cursor + 1] == \"r\" &&\n                        this.input[this.cursor + 2] == \"r\" &&\n                        this.input[this.cursor + 3] == \"i\" &&\n                        this.input[this.cursor + 4] == \"e\" &&\n                        this.input[this.cursor + 5] == \"r\") {\n                        this.readChar(6);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Barrier];\n                    }\n                    {\n                        const barLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(barLit), barLit];\n                    }\n                case \"m\":\n                    if (this.input[this.cursor] == \"e\" &&\n                        this.input[this.cursor + 1] == \"a\" &&\n                        this.input[this.cursor + 2] == \"s\" &&\n                        this.input[this.cursor + 3] == \"u\" &&\n                        this.input[this.cursor + 4] == \"r\" &&\n                        this.input[this.cursor + 5] == \"e\") {\n                        this.readChar(6);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure];\n                    }\n                    {\n                        const measureLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(measureLit), measureLit];\n                    }\n                case \"O\":\n                    if (this.input[this.cursor].toLowerCase() == \"p\" &&\n                        this.input[this.cursor + 1].toLowerCase() == \"e\" &&\n                        this.input[this.cursor + 2].toLowerCase() == \"n\" &&\n                        this.input[this.cursor + 3] == \"Q\" &&\n                        this.input[this.cursor + 4] == \"A\" &&\n                        this.input[this.cursor + 5] == \"S\" &&\n                        this.input[this.cursor + 6] == \"M\") {\n                        this.readChar(7);\n                        let offset = 0;\n                        while (this.cursor + offset < this.input.length &&\n                            \" \\t\".indexOf(this.input[this.cursor + offset]) > -1) {\n                            offset++;\n                        }\n                        // Read the major version\n                        let majorVersion = \"\";\n                        while (this.cursor + offset < this.input.length &&\n                            !isNaN(parseInt(this.input[this.cursor + offset], 10))) {\n                            majorVersion += this.input[this.cursor + offset];\n                            offset++;\n                        }\n                        // Attempt to read the minor version\n                        let minorVersion = undefined;\n                        if (this.input[this.cursor + offset] == \".\") {\n                            offset++;\n                            minorVersion = \"\";\n                            while (this.cursor + offset < this.input.length &&\n                                !isNaN(parseInt(this.input[this.cursor + offset], 10))) {\n                                minorVersion += this.input[this.cursor + offset];\n                                offset++;\n                            }\n                        }\n                        // Parse major and minor versions\n                        const major = parseInt(majorVersion, 10);\n                        const minor = minorVersion ? parseInt(minorVersion, 10) : undefined;\n                        if (major !== 2) {\n                            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${majorVersion}.${minor !== null && minor !== void 0 ? minor : 0}`);\n                        }\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.OpenQASM];\n                    }\n                    {\n                        const openQasmLit = char + this.readIdentifier();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.lookup[openQasmLit], openQasmLit];\n                    }\n                case \"i\":\n                    if (this.input[this.cursor] == \"n\" &&\n                        this.input[this.cursor + 1] == \"c\" &&\n                        this.input[this.cursor + 2] == \"l\" &&\n                        this.input[this.cursor + 3] == \"u\" &&\n                        this.input[this.cursor + 4] == \"d\" &&\n                        this.input[this.cursor + 5] == \"e\") {\n                        this.readChar(6);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Include];\n                    }\n                    {\n                        const includeLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(includeLit), includeLit];\n                    }\n                case \"o\":\n                    if (this.input[this.cursor] == \"p\" &&\n                        this.input[this.cursor + 1] == \"a\" &&\n                        this.input[this.cursor + 2] == \"q\" &&\n                        this.input[this.cursor + 3] == \"u\" &&\n                        this.input[this.cursor + 4] == \"e\") {\n                        this.readChar(5);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Opaque];\n                    }\n                    {\n                        const opaqueLit = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(opaqueLit), opaqueLit];\n                    }\n                case '\"': {\n                    const stringLiteral = char + this.readStringLiteral('\"');\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, stringLiteral];\n                }\n                case \"’\": {\n                    const singleStringLiteral = char + this.readStringLiteral(\"’\");\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, singleStringLiteral];\n                }\n                default:\n                    if (isLetter(char)) {\n                        const literal = char + this.readIdentifier();\n                        return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(literal), literal];\n                    }\n                    else if (isNumeric(char)) {\n                        const num = char + this.readNumeric();\n                        if (num.indexOf(\".\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Real, parseFloat(num)];\n                        }\n                        else {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger, parseFloat(num)];\n                        }\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Illegal];\n                    }\n            }\n        };\n        /**\n         * Returns the line number where the current cursor is located.\n         * @param cursor - The current cursor position in the input string.\n         * @return The line number.\n         */\n        this.getLineNumber = (cursor) => {\n            return this.input\n                .substring(0, cursor)\n                .split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/).length;\n        };\n        /**\n         * Returns the current line of code where the cursor is located.\n         * @param cursor - The current cursor position in the input string.\n         * @return The specific line where the cursor is located.\n         */\n        this.getCurrentLine = (cursor) => {\n            const lines = this.input.split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/);\n            const lineNumber = this.getLineNumber(cursor);\n            return lines[lineNumber - 1];\n        };\n        this.input = input;\n        this.cursor = cursor;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Lexer);\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm2/lexer.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm2/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm2/parser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ \"./node_modules/qasm-ts/dist/qasm2/token.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version */ \"./node_modules/qasm-ts/dist/version.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ast */ \"./node_modules/qasm-ts/dist/qasm2/ast.js\");\n/**\n * OpenQASM 2.0 Parser Implementation\n *\n * This module implements a parser for OpenQASM 2.0 that focuses on the core\n * quantum circuit description language without the advanced features of version 3.0.\n * The parser handles quantum and classical register declarations, gate definitions\n * and applications, measurements, and basic control structures.\n *\n * OpenQASM 2.0 parsing capabilities:\n * - **Register declarations**: qreg and creg with size specifications\n * - **Gate definitions**: Custom gate definitions with parameters and bodies\n * - **Gate applications**: Built-in and custom gate applications\n * - **Measurements**: Quantum measurements with classical result storage\n * - **Basic conditionals**: Simple if statements based on classical register values\n * - **Arithmetic expressions**: Parameter expressions for gate operations\n * - **Opaque gates**: External gate declarations\n *\n * The parser maintains a list of known gates and validates gate applications\n * against declared gates and built-in operations.\n *\n * @module\n *\n * @example Parsing OpenQASM 2.0 code\n * ```typescript\n * const tokens = lexer.lex();\n * const parser = new Parser(tokens);\n * const ast = parser.parse();\n *\n * // AST contains simplified node structure for OpenQASM 2.0\n * ```\n */\n\n\n\n\n/**\n * OpenQASM 2.0 Parser\n *\n * A straightforward recursive descent parser for OpenQASM 2.0 that produces\n * a simplified AST structure appropriate for the more limited feature set\n * of the 2.0 language specification.\n *\n * @example Basic parsing workflow\n * ```typescript\n * const parser = new Parser(tokens);\n * const ast = parser.parse();\n *\n * // Process the resulting AST nodes\n * ast.forEach(node => {\n *   if (node instanceof QReg) {\n *     console.log(`Quantum register: ${node.id}[${node.size}]`);\n *   }\n * });\n * ```\n */\nclass Parser {\n    /**\n     * Creates a parser.\n     * @param tokens - Tokens to parse.\n     */\n    constructor(tokens) {\n        this.tokens = tokens;\n        this.gates = [\n            \"x\",\n            \"y\",\n            \"z\",\n            \"u1\",\n            \"u2\",\n            \"u3\",\n            \"s\",\n            \"sdg\",\n            \"h\",\n            \"tdg\",\n            \"cx\",\n            \"cy\",\n            \"cz\",\n            \"t\",\n            \"ccx\",\n            \"reset\",\n            \"cu1\",\n            \"ccy\",\n            \"ccz\",\n        ];\n    }\n    /**\n     * Calling this method parses the code represented by the provided tokens.\n     * @return The abstract syntax tree.\n     */\n    parse() {\n        let ast = [];\n        let i = 0;\n        while (i < this.tokens.length - 1) {\n            const nodes = this.parseNode(this.tokens.slice(i));\n            ast = ast.concat(nodes ? nodes : []);\n            while (!this.matchNext(this.tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                if (this.matchNext(this.tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n                    while (!this.matchNext(this.tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                        i++;\n                    }\n                    break;\n                }\n                i++;\n            }\n            i++;\n        }\n        return ast;\n    }\n    /**\n    * Delegates the parsing of the next set of tokens to the appropriate method.\n    * @param tokens - Remaining tokens to parse.\n    * @param allowVariables - Whether encountered identifiers should be consider\n        variable initializations or references.\n    * @return A set of AST nodes.\n    */\n    parseNode(tokens, allowVariables = false) {\n        const token = tokens[0];\n        switch (token[0]) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Include:\n                return [this.include(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.OpenQASM:\n                return [this.versionHeader(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.QReg:\n                return [this.qreg(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.CReg:\n                return [this.creg(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Barrier:\n                return [this.barrier(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure:\n                return [this.measure(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id:\n                if (!(token[1].toString().indexOf(\"QASM\") != -1) &&\n                    !(token[1].toString().indexOf(\"include\") != -1)) {\n                    if (this.gates.includes(token[1].toString())) {\n                        return [this.application(tokens, token[1].toString())];\n                    }\n                    else if (allowVariables) {\n                        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Variable(token[1].toString())];\n                    }\n                    else {\n                        throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError;\n                    }\n                }\n                else {\n                    return [];\n                }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Gate:\n                return [this.gate(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Opaque:\n                return [this.opaque(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.If:\n                return [this.conditional(tokens.slice(1))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Power:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Power()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Divide:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Divide()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Times:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Times()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Plus:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Plus()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Minus:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Minus()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Pi:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Pi()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sin:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Sin()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Cos:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Cos()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Exp:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Exp()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ln:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Ln()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sqrt:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Sqrt()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Tan:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Tan()];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.NNInteger(Number(token[1]))];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Real:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Real(Number(token[1]))];\n        }\n    }\n    /**\n     * Checks if the next tokens match those expected.\n     * @param tokens - Remaining tokens to parse.\n     * @param expectedTokens - Expected tokens.\n     * @return Whether these is a match.\n     */\n    matchNext(tokens, expectedTokens) {\n        let matches = true;\n        let i = 0;\n        if (tokens.length == 0) {\n            return false;\n        }\n        while (i < expectedTokens.length) {\n            if (tokens[i][0] != expectedTokens[i]) {\n                matches = false;\n                break;\n            }\n            i++;\n        }\n        return matches;\n    }\n    /**\n     * Parses a quantum register.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the quantum register.\n     */\n    qreg(tokens) {\n        if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon,\n        ])) {\n            const id = tokens[0][1].toString();\n            if (!this.validateIdentifier(id)) {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadQregError;\n            }\n            const size = tokens[2][1];\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.QReg(id.toString(), Number(size));\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadQregError;\n        }\n    }\n    /**\n     * Parses a classical register.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the classical register.\n     */\n    creg(tokens) {\n        if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon,\n        ])) {\n            const id = tokens[0][1].toString();\n            if (!this.validateIdentifier(id)) {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadCregError;\n            }\n            const size = tokens[2][1];\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.CReg(id.toString(), Number(size));\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadCregError;\n        }\n    }\n    /**\n     * Parses a conditional.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the conditional.\n     */\n    conditional(tokens) {\n        if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Equals,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen,\n        ])) {\n            const id = tokens[1][1];\n            const val = tokens[3][1];\n            const node = this.parseNode(tokens.slice(5));\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.If(id.toString(), Number(val), node);\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadConditionalError;\n        }\n    }\n    /**\n     * Parses a barrier.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the barrier.\n     */\n    barrier(tokens) {\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            const id = tokens[0][1];\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Barrier(id.toString());\n        }\n        else if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon,\n        ])) {\n            const id = tokens[0][1];\n            const index = tokens[2][1];\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Barrier(id.toString(), Number(index));\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadBarrierError;\n        }\n    }\n    /**\n     * Parses a measurement.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the measurement.\n     */\n    measure(tokens) {\n        let first_id;\n        let second_id;\n        let first_index;\n        let second_index;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow])) {\n            first_id = tokens[0][1].toString();\n            tokens = tokens.slice(2);\n        }\n        else if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow,\n        ])) {\n            first_id = tokens[0][1].toString();\n            first_index = Number(tokens[2][1]);\n            tokens = tokens.slice(5);\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadMeasurementError;\n        }\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            second_id = tokens[0][1].toString();\n            tokens = tokens.slice(2);\n        }\n        else if (this.matchNext(tokens, [\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen,\n            _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon,\n        ])) {\n            second_id = tokens[0][1].toString();\n            second_index = Number(tokens[2][1]);\n            tokens = tokens.slice(5);\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadMeasurementError;\n        }\n        if (first_index != undefined && second_index != undefined) {\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Measure(first_id, second_id, first_index, second_index);\n        }\n        else if (first_index != undefined) {\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Measure(first_id, second_id, first_index, null);\n        }\n        else if (second_index != undefined) {\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Measure(first_id, second_id, null, second_index);\n        }\n        return new _ast__WEBPACK_IMPORTED_MODULE_3__.Measure(first_id, second_id);\n    }\n    /**\n     * Parses an application of one of the allowed gates.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the gate application.\n     */\n    application(tokens, op) {\n        let params = [];\n        const list = [];\n        const applications = [];\n        if (tokens[0][1] == op) {\n            tokens = tokens.slice(1);\n        }\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            if (this.matchNext(tokens.slice(1), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                params = [];\n                tokens = tokens.slice(2);\n            }\n            else {\n                params = this.matchParamList(tokens.slice(1));\n                let count = 0;\n                let commas = 0;\n                for (const i in params) {\n                    commas += 1;\n                    for (const j in params[i]) {\n                        count++;\n                    }\n                }\n                tokens = tokens.slice(count + (commas - 1) + 2);\n            }\n        }\n        const args = this.matchArgList(tokens);\n        for (const arg in args) {\n            list.push(args[arg]);\n        }\n        applications.push(new _ast__WEBPACK_IMPORTED_MODULE_3__.ApplyGate(op, list, params));\n        return applications;\n    }\n    /**\n     * Parses a subroutine used in a custom gate definition.\n     * @param tokens - Expression tokens to parse.\n     * @return A parsed subroutine.\n     */\n    sub(tokens) {\n        let ast = [];\n        let i = 0;\n        if (this.matchNext(tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            tokens = tokens.slice(1);\n        }\n        while (i < tokens.length - 1 && tokens[i][0] != _token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen) {\n            const nodes = this.parseNode(tokens.slice(i));\n            ast = ast.concat(nodes ? nodes : []);\n            while (!this.matchNext(tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon]) &&\n                !this.matchNext(tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                i++;\n            }\n            if (this.matchNext(tokens.slice(i), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                break;\n            }\n            i++;\n        }\n        return ast;\n    }\n    /**\n     * Parses a parameter value.\n     * @param tokens - Tokens to parse.\n     * @return An AST node representing the parameter value.\n     */\n    matchParam(tokens) {\n        let param;\n        if (!(0,_token__WEBPACK_IMPORTED_MODULE_0__.notParam)(tokens[0][0])) {\n            param = this.parseNode([tokens[0]], true);\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadParameterError;\n        }\n        return param;\n    }\n    /**\n     * Parses a list of parameter values.\n     * @param tokens - Tokens to parse.\n     * @return An array of AST nodes representing the parameter values.\n     */\n    matchParamList(tokens) {\n        const args = [];\n        let i = 0;\n        let j = 0;\n        args[0] = [];\n        while (!this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            while (!this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma]) &&\n                !this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                if ((0,_token__WEBPACK_IMPORTED_MODULE_0__.notParam)(tokens[j][0])) {\n                    throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadParameterError;\n                }\n                const next = this.matchParam(tokens.slice(j));\n                args[i].push(next);\n                j++;\n            }\n            if (this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                break;\n            }\n            i++;\n            j++;\n            args[i] = [];\n        }\n        return args;\n    }\n    /**\n     * Parses an argument value.\n     * @param tokens - Tokens to parse.\n     * @return An AST node representing the argument value.\n     */\n    matchArg(tokens) {\n        let index;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            tokens = tokens.slice(1);\n            if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger])) {\n                index = Number(tokens[0][1]);\n                tokens = tokens.slice(1);\n            }\n            else {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadArgumentError;\n            }\n            if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                return index;\n            }\n            else {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadArgumentError;\n            }\n        }\n    }\n    /**\n     * Parses a list of argument values.\n     * @param tokens - Tokens to parse.\n     * @return An array of AST nodes representing the argument values.\n     */\n    matchArgList(tokens) {\n        const args = [];\n        let next;\n        let id;\n        let j = 0;\n        while (j < tokens.length &&\n            !this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            if (this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n                id = tokens[j][1].toString();\n                const index = this.matchArg(tokens.slice(j + 1));\n                next = [id, index];\n                args.push(next);\n                if (index != undefined) {\n                    j += 4;\n                }\n                else {\n                    j++;\n                }\n                if (this.matchNext(tokens.slice(j), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                    j++;\n                }\n            }\n            else {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadArgumentError;\n            }\n        }\n        return args;\n    }\n    /**\n     * Parses an include statement.\n     * @param tokens - Tokens to parse.\n     * @return An Include node representing the include statement.\n     */\n    include(tokens) {\n        let filename;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            filename = tokens[0][1].toString();\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Include(filename);\n        }\n        throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadIncludeError;\n    }\n    /**\n     * Parses the version header and sets the parser version.\n     * @param tokens - Tokens to parse.\n     * @return A Version node representing the version statement.\n     */\n    versionHeader(tokens) {\n        let version;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            version = new _version__WEBPACK_IMPORTED_MODULE_1__.OpenQASMVersion(Number(tokens[0][1]));\n            if (!version.isVersion2()) {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError;\n            }\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Version(version);\n        }\n        else if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Real, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            const versionSplits = tokens[0][1].toString().split(\".\");\n            version = new _version__WEBPACK_IMPORTED_MODULE_1__.OpenQASMVersion(Number(versionSplits[0]), Number(versionSplits[1]));\n            if (!version.isVersion2()) {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError;\n            }\n            return new _ast__WEBPACK_IMPORTED_MODULE_3__.Version(version);\n        }\n        throw _errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError;\n    }\n    /**\n     * Parses a list of identifiers.\n     * @param tokens - Tokens to parse.\n     * @return An array of AST nodes representing the identifiers.\n     */\n    matchIdList(tokens) {\n        let args = [];\n        let head;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            head = tokens[0][1].toString();\n        }\n        tokens = tokens.slice(1);\n        args.push(head);\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n            tokens = tokens.slice(1);\n            const sub = this.matchIdList(tokens);\n            args = args.concat(sub);\n        }\n        return args;\n    }\n    /**\n     * Parses a gate.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the gate.\n     */\n    gate(tokens) {\n        let name;\n        let params;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            name = tokens[0][1].toString();\n            if (!this.validateIdentifier(name)) {\n                throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError;\n            }\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError;\n        }\n        tokens = tokens.slice(1);\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            tokens = tokens.slice(1);\n            if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                params = [];\n                tokens = tokens.slice(1);\n            }\n            else {\n                params = this.matchIdList(tokens);\n                const count = params.length;\n                tokens = tokens.slice(count + 1);\n            }\n        }\n        const registers = this.matchIdList(tokens);\n        const count = registers.length;\n        tokens = tokens.slice(count + (count - 1));\n        const applications = this.sub(tokens);\n        this.gates.push(name);\n        return new _ast__WEBPACK_IMPORTED_MODULE_3__.Gate(name, registers, params, applications);\n    }\n    /**\n     * Parses an opaque declaration if using OpenQASM 2. If using OpenQASM 3 it skips the line.\n     * @param tokens - Remaining tokens to parse.\n     * @return An AST node representing the opaque declaration.\n     */\n    opaque(tokens) {\n        let name;\n        let params;\n        let qubits = [];\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            name = tokens[0][1].toString();\n            tokens = tokens.slice(1);\n        }\n        else {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError;\n        }\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            tokens = tokens.slice(1);\n            if (!this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                params = this.matchIdList(tokens);\n                tokens = tokens.slice(params.length + 1);\n            }\n            else {\n                tokens = tokens.slice(1);\n            }\n        }\n        qubits = this.matchArgList(tokens);\n        tokens = tokens.slice(qubits.length * 2);\n        if (!this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            throw _errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError;\n        }\n        return new _ast__WEBPACK_IMPORTED_MODULE_3__.Opaque(name, qubits, params);\n    }\n    /**\n     * Validates whether a register or gate identifier.\n     * @param identifier - The identifier to validate.\n     * @return Boolean indicating successful validation or not.\n     */\n    validateIdentifier(identifier) {\n        const firstChar = identifier[0];\n        return /^[a-z]$/.test(firstChar);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Parser);\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm2/parser.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm2/token.js":
/*!**************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm2/token.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   inverseLookup: () => (/* binding */ inverseLookup),\n/* harmony export */   lookup: () => (/* binding */ lookup),\n/* harmony export */   notParam: () => (/* binding */ notParam)\n/* harmony export */ });\n/**\n * OpenQASM 2.0 Token Definitions and Utilities\n *\n * This module defines the token types used in OpenQASM 2.0 syntax. OpenQASM 2.0\n * has a simpler token set compared to 3.0, focusing on basic quantum operations\n * and classical registers without advanced control flow or data types.\n *\n * Key differences from OpenQASM 3.0:\n * - Limited to `qreg` and `creg` declarations (no advanced types)\n * - No control flow tokens (if/else/for/while)\n * - No subroutine or function definitions\n * - Simpler expression and operator support\n *\n * @module\n *\n * @example OpenQASM 2.0 token usage\n * ```typescript\n * import { lookup, Token } from './qasm2/token';\n *\n * console.log(lookup('qreg'));    // Token.QReg\n * console.log(lookup('barrier')); // Token.Barrier\n * console.log(lookup('measure')); // Token.Measure\n * ```\n */\n/**\n * Enumeration of OpenQASM 2.0 token types.\n *\n * This simplified token set reflects OpenQASM 2.0's focus on basic quantum\n * circuit description without the advanced features of version 3.0.\n */\nvar Token;\n(function (Token) {\n    // 0; invalid or unrecognized token\n    Token[Token[\"Illegal\"] = 0] = \"Illegal\";\n    // 1; end of file character\n    Token[Token[\"EndOfFile\"] = 1] = \"EndOfFile\";\n    // 2; real number (floating point)\n    Token[Token[\"Real\"] = 2] = \"Real\";\n    // 3; non-negative integer\n    Token[Token[\"NNInteger\"] = 3] = \"NNInteger\";\n    // 4; identifier (variables names, function names, etc.)\n    Token[Token[\"Id\"] = 4] = \"Id\";\n    // 5; OPENQASM version declaration\n    Token[Token[\"OpenQASM\"] = 5] = \"OpenQASM\";\n    // 6; semicolon to terminate statements\n    Token[Token[\"Semicolon\"] = 6] = \"Semicolon\";\n    // 7; comma\n    Token[Token[\"Comma\"] = 7] = \"Comma\";\n    // 8; left paren (\n    Token[Token[\"LParen\"] = 8] = \"LParen\";\n    // 9; left square bracket [\n    Token[Token[\"LSParen\"] = 9] = \"LSParen\";\n    // 10; left curly brakcet {\n    Token[Token[\"LCParen\"] = 10] = \"LCParen\";\n    // 11; right paren )\n    Token[Token[\"RParen\"] = 11] = \"RParen\";\n    // 12; right square paren ]\n    Token[Token[\"RSParen\"] = 12] = \"RSParen\";\n    // 13; right curly bracket }\n    Token[Token[\"RCParen\"] = 13] = \"RCParen\";\n    // 14; arrow (->) used in measurement operations\n    Token[Token[\"Arrow\"] = 14] = \"Arrow\";\n    // 15; equality operator (==)\n    Token[Token[\"Equals\"] = 15] = \"Equals\";\n    // 16; addition operator (+)\n    Token[Token[\"Plus\"] = 16] = \"Plus\";\n    // 17; subtraction operator (-)\n    Token[Token[\"Minus\"] = 17] = \"Minus\";\n    // 18; multiplication operator (*)\n    Token[Token[\"Times\"] = 18] = \"Times\";\n    // 19; division operator (/)\n    Token[Token[\"Divide\"] = 19] = \"Divide\";\n    // 20; exponentiation operator (^)\n    Token[Token[\"Power\"] = 20] = \"Power\";\n    // 21; sine function\n    Token[Token[\"Sin\"] = 21] = \"Sin\";\n    // 22; cosine function\n    Token[Token[\"Cos\"] = 22] = \"Cos\";\n    // 23; tangent function\n    Token[Token[\"Tan\"] = 23] = \"Tan\";\n    // 24; exponential function\n    Token[Token[\"Exp\"] = 24] = \"Exp\";\n    // 25; natural logarithm function\n    Token[Token[\"Ln\"] = 25] = \"Ln\";\n    // 26; square root function\n    Token[Token[\"Sqrt\"] = 26] = \"Sqrt\";\n    // 27; mathematical constant pi\n    Token[Token[\"Pi\"] = 27] = \"Pi\";\n    // 28; quantum register declaration\n    Token[Token[\"QReg\"] = 28] = \"QReg\";\n    // 29; classical register declaration\n    Token[Token[\"CReg\"] = 29] = \"CReg\";\n    // 30; barrier operation\n    Token[Token[\"Barrier\"] = 30] = \"Barrier\";\n    // 31; gate declaration or application\n    Token[Token[\"Gate\"] = 31] = \"Gate\";\n    // 32; measurement operation\n    Token[Token[\"Measure\"] = 32] = \"Measure\";\n    // 33; qubit reset operation\n    Token[Token[\"Reset\"] = 33] = \"Reset\";\n    // 34; include statement\n    Token[Token[\"Include\"] = 34] = \"Include\";\n    // 35; if statement conditional\n    Token[Token[\"If\"] = 35] = \"If\";\n    // 36; string literal\n    Token[Token[\"String\"] = 36] = \"String\";\n    // 37; opaque keyword\n    Token[Token[\"Opaque\"] = 37] = \"Opaque\";\n})(Token || (Token = {}));\nconst lookupMap = {\n    if: Token.If,\n    sin: Token.Sin,\n    cos: Token.Cos,\n    tan: Token.Tan,\n    exp: Token.Exp,\n    ln: Token.Ln,\n    sqrt: Token.Sqrt,\n    pi: Token.Pi,\n    \"+\": Token.Plus,\n    \"-\": Token.Minus,\n    \"/\": Token.Divide,\n    \"*\": Token.Times,\n    \"^\": Token.Power,\n};\n/**\n * Returns the token that represents a given string.\n * @param ident - The string.\n * @return The corresponding token.\n */\nfunction lookup(ident) {\n    return ident in lookupMap ? lookupMap[ident] : Token.Id;\n}\n/**\n * Returns the string representation of a token.\n * @param tokens - The token.\n * @return The string representation of the token.\n */\nfunction inverseLookup(token) {\n    return Object.keys(lookupMap).find((ident) => lookupMap[ident] == token);\n}\n/**\n * Determines whether a token denotes a parameter.\n * @param tokens - The token.\n * @return Whether the token does NOT denote a parameter.\n */\nfunction notParam(token) {\n    if (token == Token.NNInteger ||\n        token == Token.Real ||\n        token == Token.Id ||\n        inverseLookup(token)) {\n        return false;\n    }\n    return true;\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm2/token.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm3/ast.js":
/*!************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm3/ast.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AliasStatement: () => (/* binding */ AliasStatement),\n/* harmony export */   AngleType: () => (/* binding */ AngleType),\n/* harmony export */   Arithmetic: () => (/* binding */ Arithmetic),\n/* harmony export */   ArithmeticOp: () => (/* binding */ ArithmeticOp),\n/* harmony export */   ArrayAccess: () => (/* binding */ ArrayAccess),\n/* harmony export */   ArrayDeclaration: () => (/* binding */ ArrayDeclaration),\n/* harmony export */   ArrayInitializer: () => (/* binding */ ArrayInitializer),\n/* harmony export */   ArrayReference: () => (/* binding */ ArrayReference),\n/* harmony export */   ArrayReferenceModifier: () => (/* binding */ ArrayReferenceModifier),\n/* harmony export */   AssignmentStatement: () => (/* binding */ AssignmentStatement),\n/* harmony export */   AstNode: () => (/* binding */ AstNode),\n/* harmony export */   Binary: () => (/* binding */ Binary),\n/* harmony export */   BinaryOp: () => (/* binding */ BinaryOp),\n/* harmony export */   BitType: () => (/* binding */ BitType),\n/* harmony export */   BitstringLiteral: () => (/* binding */ BitstringLiteral),\n/* harmony export */   BoolType: () => (/* binding */ BoolType),\n/* harmony export */   BooleanLiteral: () => (/* binding */ BooleanLiteral),\n/* harmony export */   BoxDefinition: () => (/* binding */ BoxDefinition),\n/* harmony export */   BranchingStatement: () => (/* binding */ BranchingStatement),\n/* harmony export */   BreakStatement: () => (/* binding */ BreakStatement),\n/* harmony export */   CalibrationGrammarDeclaration: () => (/* binding */ CalibrationGrammarDeclaration),\n/* harmony export */   CaseStatement: () => (/* binding */ CaseStatement),\n/* harmony export */   Cast: () => (/* binding */ Cast),\n/* harmony export */   ClassicalDeclaration: () => (/* binding */ ClassicalDeclaration),\n/* harmony export */   ClassicalType: () => (/* binding */ ClassicalType),\n/* harmony export */   ComplexType: () => (/* binding */ ComplexType),\n/* harmony export */   ContinueStatement: () => (/* binding */ ContinueStatement),\n/* harmony export */   DefaultStatement: () => (/* binding */ DefaultStatement),\n/* harmony export */   DurationLiteral: () => (/* binding */ DurationLiteral),\n/* harmony export */   DurationOf: () => (/* binding */ DurationOf),\n/* harmony export */   DurationType: () => (/* binding */ DurationType),\n/* harmony export */   DurationUnit: () => (/* binding */ DurationUnit),\n/* harmony export */   Euler: () => (/* binding */ Euler),\n/* harmony export */   Expression: () => (/* binding */ Expression),\n/* harmony export */   ExternSignature: () => (/* binding */ ExternSignature),\n/* harmony export */   FloatLiteral: () => (/* binding */ FloatLiteral),\n/* harmony export */   FloatType: () => (/* binding */ FloatType),\n/* harmony export */   ForLoopStatement: () => (/* binding */ ForLoopStatement),\n/* harmony export */   HardwareQubit: () => (/* binding */ HardwareQubit),\n/* harmony export */   IODeclaration: () => (/* binding */ IODeclaration),\n/* harmony export */   IOModifier: () => (/* binding */ IOModifier),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   ImaginaryLiteral: () => (/* binding */ ImaginaryLiteral),\n/* harmony export */   Include: () => (/* binding */ Include),\n/* harmony export */   IndexSet: () => (/* binding */ IndexSet),\n/* harmony export */   IntType: () => (/* binding */ IntType),\n/* harmony export */   IntegerLiteral: () => (/* binding */ IntegerLiteral),\n/* harmony export */   MathFunction: () => (/* binding */ MathFunction),\n/* harmony export */   MathFunctionTypes: () => (/* binding */ MathFunctionTypes),\n/* harmony export */   NumericLiteral: () => (/* binding */ NumericLiteral),\n/* harmony export */   Parameters: () => (/* binding */ Parameters),\n/* harmony export */   Pi: () => (/* binding */ Pi),\n/* harmony export */   ProgramBlock: () => (/* binding */ ProgramBlock),\n/* harmony export */   QuantumBarrier: () => (/* binding */ QuantumBarrier),\n/* harmony export */   QuantumBlock: () => (/* binding */ QuantumBlock),\n/* harmony export */   QuantumDeclaration: () => (/* binding */ QuantumDeclaration),\n/* harmony export */   QuantumDelay: () => (/* binding */ QuantumDelay),\n/* harmony export */   QuantumGateCall: () => (/* binding */ QuantumGateCall),\n/* harmony export */   QuantumGateDefinition: () => (/* binding */ QuantumGateDefinition),\n/* harmony export */   QuantumGateModifier: () => (/* binding */ QuantumGateModifier),\n/* harmony export */   QuantumGateModifierName: () => (/* binding */ QuantumGateModifierName),\n/* harmony export */   QuantumMeasurement: () => (/* binding */ QuantumMeasurement),\n/* harmony export */   QuantumMeasurementAssignment: () => (/* binding */ QuantumMeasurementAssignment),\n/* harmony export */   QuantumReset: () => (/* binding */ QuantumReset),\n/* harmony export */   Range: () => (/* binding */ Range),\n/* harmony export */   ReturnStatement: () => (/* binding */ ReturnStatement),\n/* harmony export */   SizeOf: () => (/* binding */ SizeOf),\n/* harmony export */   Statement: () => (/* binding */ Statement),\n/* harmony export */   StretchType: () => (/* binding */ StretchType),\n/* harmony export */   SubroutineBlock: () => (/* binding */ SubroutineBlock),\n/* harmony export */   SubroutineCall: () => (/* binding */ SubroutineCall),\n/* harmony export */   SubroutineDefinition: () => (/* binding */ SubroutineDefinition),\n/* harmony export */   SubscriptedIdentifier: () => (/* binding */ SubscriptedIdentifier),\n/* harmony export */   SwitchStatement: () => (/* binding */ SwitchStatement),\n/* harmony export */   Tau: () => (/* binding */ Tau),\n/* harmony export */   TrigFunction: () => (/* binding */ TrigFunction),\n/* harmony export */   TrigFunctionTypes: () => (/* binding */ TrigFunctionTypes),\n/* harmony export */   UIntType: () => (/* binding */ UIntType),\n/* harmony export */   Unary: () => (/* binding */ Unary),\n/* harmony export */   UnaryOp: () => (/* binding */ UnaryOp),\n/* harmony export */   Version: () => (/* binding */ Version),\n/* harmony export */   WhileLoopStatement: () => (/* binding */ WhileLoopStatement)\n/* harmony export */ });\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n/** Base class representing a basic AST node. */\nclass AstNode {\n}\n/**\n * Base class representing an instruction which performs an action.\n *\n * statement\n *  : expressionStatement\n *  | assignmentStatement\n *  | classicalDeclarationStatement\n *  | branchingStatement\n *  | loopStatement\n *  | endStatement\n *  | aliasStatement\n *  | quantumStatement\n */\nclass Statement extends AstNode {\n}\n/**\n * Class representing a custom grammar for specifying calibrations.\n *\n * calibrationGrammarStatement:\n *  | DEFCALGRAMMAR StringLiteral SEMICOLON\n */\nclass CalibrationGrammarDeclaration extends Statement {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n}\n/**\n * Class representing an include statement.\n *\n * includeStatement:\n *   INCLUDE StringLiteral SEMICOLON\n */\nclass Include extends AstNode {\n    constructor(filename) {\n        super();\n        this.filename = filename;\n    }\n}\n/**\n * Class representing the version statement.\n *\n * version\n *  : 'OPENQASM'(Integer | RealNumber) SEMICOLON\n */\nclass Version extends AstNode {\n    constructor(version) {\n        super();\n        this.version = version;\n    }\n}\n/**\n * Base class representing a quantum instruction.\n *\n * quantumInstruction\n *  : quantumGateCall\n *  | quantumPhase\n *  | quantumMeasurement\n *  | quantumReset\n *  | quantumBarrier\n */\nclass QuantumInstruction extends AstNode {\n}\n/** Base class representing a classical computing type. */\nclass ClassicalType extends AstNode {\n}\n/**\n * Class representing a classical float type.\n *\n * scalarType:\n *   FLOAT designator?\n */\nclass FloatType extends ClassicalType {\n    constructor(width) {\n        super();\n        this.width = width ? width : null;\n    }\n}\n/**\n * Class representing a complex number type.\n *\n * scalarType:\n *   COMPLEX (LBRACKET scalarType RBRACKET)?\n */\nclass ComplexType extends ClassicalType {\n    constructor(float) {\n        super();\n        this.float = float;\n    }\n}\n/** Class representing a classical boolean type. */\nclass BoolType extends ClassicalType {\n}\n/** Class representing a classical signed integer type. */\nclass IntType extends ClassicalType {\n    constructor(size) {\n        super();\n        this.size = size ? size : null;\n    }\n}\n/** Class representing a classical unsigned integer type. */\nclass UIntType extends ClassicalType {\n    constructor(size) {\n        super();\n        this.size = size ? size : null;\n    }\n}\n/** Class representing a classical bit type. */\nclass BitType extends ClassicalType {\n    constructor(size) {\n        super();\n        this.size = size ? size : null;\n    }\n}\n/** Class representing an angle type. */\nclass AngleType extends ClassicalType {\n    constructor(size) {\n        super();\n        this.size = size ? size : null;\n    }\n}\n/** Class representing the stretch type. */\nclass StretchType extends ClassicalType {\n}\n/** Class representing a duration type. */\nclass DurationType extends ClassicalType {\n}\n/** Base class representing an expression. */\nclass Expression extends AstNode {\n}\n/** Class representing a list of parameters. */\nclass Parameters extends Expression {\n    constructor(args) {\n        super();\n        this.args = args;\n    }\n}\n/** Class representing a range. */\nclass Range extends Expression {\n    constructor(start, end, step) {\n        super();\n        this.start = start ? start : null;\n        this.end = end ? end : null;\n        this.step = step ? step : null;\n    }\n}\n/** Class representing an expression identifier. */\nclass Identifier extends Expression {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n}\n/** Class representing an identifier with subscripted access. */\nclass SubscriptedIdentifier extends Identifier {\n    constructor(name, subscript) {\n        super(name);\n        this.subscript = subscript;\n    }\n}\n/** Class representing the Pi constant. */\nclass Pi extends Expression {\n}\n/** Class representing the Euler constant. */\nclass Euler extends Expression {\n}\n/** Class representing the Tau constant. */\nclass Tau extends Expression {\n}\n/** Enum representing the available mathematical functions. */\nvar MathFunctionTypes;\n(function (MathFunctionTypes) {\n    MathFunctionTypes[\"CEILING\"] = \"ceiling\";\n    MathFunctionTypes[\"EXP\"] = \"exponential\";\n    MathFunctionTypes[\"FLOOR\"] = \"floor\";\n    MathFunctionTypes[\"LOG\"] = \"logarithm\";\n    MathFunctionTypes[\"MOD\"] = \"modulus\";\n    MathFunctionTypes[\"POPCOUNT\"] = \"popcount\";\n    MathFunctionTypes[\"POW\"] = \"power\";\n    MathFunctionTypes[\"SQRT\"] = \"sqrt\";\n    MathFunctionTypes[\"ROTR\"] = \"rotr\";\n    MathFunctionTypes[\"ROTL\"] = \"rotl\";\n})(MathFunctionTypes || (MathFunctionTypes = {}));\n/** Class representing a mathematical function. */\nclass MathFunction extends Expression {\n    constructor(mathType, operands) {\n        super();\n        this.mathType = mathType;\n        this.operands = operands;\n    }\n}\n/** Enum representing the available trigonometric functions. */\nvar TrigFunctionTypes;\n(function (TrigFunctionTypes) {\n    TrigFunctionTypes[\"ARCCOS\"] = \"ArcCos\";\n    TrigFunctionTypes[\"ARCSIN\"] = \"ArcSin\";\n    TrigFunctionTypes[\"ARCTAN\"] = \"ArcTan\";\n    TrigFunctionTypes[\"COS\"] = \"Cos\";\n    TrigFunctionTypes[\"SIN\"] = \"Sin\";\n    TrigFunctionTypes[\"TAN\"] = \"Tan\";\n})(TrigFunctionTypes || (TrigFunctionTypes = {}));\n/** Class representing a trigonometric function. */\nclass TrigFunction extends Expression {\n    constructor(trigType, operand) {\n        super();\n        this.trigType = trigType;\n        this.operand = operand;\n    }\n}\n/** Class representing an integer literal. */\nclass IntegerLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing a scientific notation, binary, octal, or hex literal. */\nclass NumericLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing a float literal. */\nclass FloatLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing an imaginary number literal. */\nclass ImaginaryLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing a boolean literal. */\nclass BooleanLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Class representing a bit string literal. */\nclass BitstringLiteral extends Expression {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n}\n/** Enum representing the supported duration units. */\nvar DurationUnit;\n(function (DurationUnit) {\n    DurationUnit[\"NANOSECOND\"] = \"ns\";\n    DurationUnit[\"MICROSECOND\"] = \"us\";\n    DurationUnit[\"MILLISECOND\"] = \"ms\";\n    DurationUnit[\"SECOND\"] = \"s\";\n    DurationUnit[\"SAMPLE\"] = \"dt\";\n})(DurationUnit || (DurationUnit = {}));\n/** Class representing a duration literal. */\nclass DurationLiteral extends Expression {\n    constructor(value, unit) {\n        super();\n        this.value = value;\n        this.unit = unit;\n    }\n}\n/** Class representing a durationof function call. */\nclass DurationOf extends Expression {\n    constructor(scope) {\n        super();\n        this.scope = scope;\n    }\n}\n/** Class representing a sizeof function call. */\nclass SizeOf extends Expression {\n    constructor(array, dimensionIndex) {\n        super();\n        this.array = array;\n        this.dimensionIndex =\n            dimensionIndex !== undefined && dimensionIndex !== null\n                ? dimensionIndex\n                : new IntegerLiteral(0);\n    }\n}\n/** Enum representing Unary operands. */\nvar UnaryOp;\n(function (UnaryOp) {\n    UnaryOp[\"LOGIC_NOT\"] = \"!\";\n    UnaryOp[\"BIT_NOT\"] = \"~\";\n    UnaryOp[\"MINUS\"] = \"-\";\n})(UnaryOp || (UnaryOp = {}));\n/** Class representing a unary operator. */\nclass Unary extends Expression {\n    constructor(op, operand) {\n        super();\n        this.op = op;\n        this.operand = operand;\n    }\n}\n/** Enum representing arithmetic operations. */\nvar ArithmeticOp;\n(function (ArithmeticOp) {\n    ArithmeticOp[\"POWER\"] = \"**\";\n    ArithmeticOp[\"TIMES\"] = \"*\";\n    ArithmeticOp[\"DIVISION\"] = \"/\";\n    ArithmeticOp[\"MOD\"] = \"%\";\n    ArithmeticOp[\"PLUS\"] = \"+\";\n    ArithmeticOp[\"MINUS\"] = \"-\";\n    ArithmeticOp[\"CONCAT\"] = \"++\";\n})(ArithmeticOp || (ArithmeticOp = {}));\n/** Class representing an arithmetic operator expression. */\nclass Arithmetic extends Expression {\n    constructor(op, left, right) {\n        super();\n        this.op = op;\n        this.left = left;\n        this.right = right;\n    }\n}\n/** Enum representing binary operands. */\nvar BinaryOp;\n(function (BinaryOp) {\n    BinaryOp[\"BIT_AND\"] = \"&\";\n    BinaryOp[\"BIT_OR\"] = \"|\";\n    BinaryOp[\"BIT_XOR\"] = \"^\";\n    BinaryOp[\"LOGIC_AND\"] = \"&&\";\n    BinaryOp[\"LOGIC_OR\"] = \"||\";\n    BinaryOp[\"LESS\"] = \"<\";\n    BinaryOp[\"LESS_EQUAL\"] = \"<=\";\n    BinaryOp[\"GREATER\"] = \">\";\n    BinaryOp[\"GREATER_EQUAL\"] = \">=\";\n    BinaryOp[\"EQUAL\"] = \"==\";\n    BinaryOp[\"NOT_EQUAL\"] = \"!=\";\n    BinaryOp[\"SHIFT_LEFT\"] = \"<<\";\n    BinaryOp[\"SHIFT_RIGHT\"] = \">>\";\n})(BinaryOp || (BinaryOp = {}));\n/** Class representing binary operator expressions. */\nclass Binary extends Expression {\n    constructor(op, left, right) {\n        super();\n        this.op = op;\n        this.left = left;\n        this.right = right;\n    }\n}\n/** Class representing an cast expression. */\nclass Cast extends Expression {\n    constructor(type, operand) {\n        super();\n        this.type = type;\n        this.operand = operand;\n    }\n}\n/**\n * Class representing a literal index set of values.\n *\n * { Expression (, Expression )* }\n */\nclass IndexSet extends Expression {\n    constructor(values) {\n        super();\n        this.values = values;\n    }\n}\n/** Enum representing the supported array reference modifiers. */\nvar ArrayReferenceModifier;\n(function (ArrayReferenceModifier) {\n    ArrayReferenceModifier[\"READONLY\"] = \"readonly\";\n    ArrayReferenceModifier[\"MUTABLE\"] = \"mutable\";\n})(ArrayReferenceModifier || (ArrayReferenceModifier = {}));\n/** Class representing an array reference. */\nclass ArrayReference extends Expression {\n    constructor(array, modifier) {\n        super();\n        this.array = array;\n        this.modifier = modifier;\n    }\n}\n/** Class representing a statically sized array. */\nclass ArrayDeclaration extends Statement {\n    constructor(baseType, dimensions, identifier, initializer) {\n        super();\n        this.baseType = baseType;\n        this.dimensions = dimensions;\n        this.identifier = identifier;\n        this.initializer =\n            initializer !== undefined && initializer !== null ? initializer : null;\n    }\n}\n/** Class representing an initial value for an ArrayDeclaration. */\nclass ArrayInitializer extends Expression {\n    constructor(values) {\n        super();\n        this.values = values;\n    }\n}\n/** Class representing an array access */\nclass ArrayAccess extends Expression {\n    constructor(array, indices) {\n        super();\n        this.array = array;\n        this.indices = indices !== undefined && indices !== null ? indices : null;\n    }\n}\n/**\n * Class representing a quantum measurement.\n *\n * quantumMeasurement\n *  : `measure` identifierList\n */\nclass QuantumMeasurement extends AstNode {\n    constructor(identifierList) {\n        super();\n        this.identifierList = identifierList;\n    }\n}\n/**\n * Class representing a quantum measurement assignment statement.\n *\n * QuantumMeasurementAssignment\n *  : quantumMeasurement ARROW indexIdentifierList\n *  | indexIdentifier EQUALS quantumMeasurement\n */\nclass QuantumMeasurementAssignment extends Statement {\n    constructor(identifier, quantumMeasurement) {\n        super();\n        this.identifier = identifier;\n        this.quantumMeasurement = quantumMeasurement;\n    }\n}\n/** Class representing the declaration of a classical type, optionally initializing it to a value. */\nclass ClassicalDeclaration extends Statement {\n    constructor(classicalType, identifier, initializer, isConst) {\n        super();\n        this.classicalType = classicalType;\n        this.identifier =\n            identifier !== undefined && identifier !== null ? identifier : null;\n        this.initializer =\n            initializer !== undefined && initializer !== null ? initializer : null;\n        this.isConst = isConst !== undefined && isConst !== null ? isConst : false;\n    }\n}\n/** Class representing an expression to a left value. */\nclass AssignmentStatement extends Statement {\n    constructor(leftValue, rightValue) {\n        super();\n        this.leftValue = leftValue;\n        this.rightValue = rightValue;\n    }\n}\n/**\n * Class representing a quantum declaration.\n *\n * quantumDeclaration\n *  : `qreg` Identifier designator?\n *    `qubit` designator? Identifier\n */\nclass QuantumDeclaration extends AstNode {\n    constructor(identifier, size) {\n        super();\n        this.identifier = identifier;\n        this.size = size ? size : null;\n    }\n}\n/**\n * Class representing a hardware qubit.\n *\n * $[NUM]\n */\nclass HardwareQubit extends AstNode {\n    constructor(number) {\n        super();\n        this.number = number;\n    }\n}\n/** Class representing an alias statement. */\nclass AliasStatement extends AstNode {\n    constructor(identifier, value) {\n        super();\n        this.identifier = identifier;\n        this.value = value;\n    }\n}\n/** Enum representing the available quantum gate modifiers. */\nvar QuantumGateModifierName;\n(function (QuantumGateModifierName) {\n    QuantumGateModifierName[QuantumGateModifierName[\"CTRL\"] = 0] = \"CTRL\";\n    QuantumGateModifierName[QuantumGateModifierName[\"NRGCTRL\"] = 1] = \"NRGCTRL\";\n    QuantumGateModifierName[QuantumGateModifierName[\"INV\"] = 2] = \"INV\";\n    QuantumGateModifierName[QuantumGateModifierName[\"POW\"] = 3] = \"POW\";\n})(QuantumGateModifierName || (QuantumGateModifierName = {}));\n/** Class representing a modifier of a gate. */\nclass QuantumGateModifier extends AstNode {\n    constructor(modifier, argument) {\n        super();\n        this.modifier = modifier;\n        this.argument = argument ? argument : null;\n    }\n}\n/**\n * Class representing a quantum gate call.\n *\n * quantumGateCall\n *  : quantumGateModifier* quantumGateName ( LPAREN expressionList? RPAREN )? indexIdentifierList\n */\nclass QuantumGateCall extends QuantumInstruction {\n    constructor(quantumGateCall, qubits, parameters, modifiers) {\n        super();\n        this.quantumGateName = quantumGateCall;\n        this.qubits = qubits;\n        this.parameters = parameters ? parameters : null;\n        this.modifiers = modifiers ? modifiers : [];\n    }\n}\n/**\n * Class representing a quantum barrier.\n *\n * quantumBarrier\n *  : `barrier` indexIdentifierList\n */\nclass QuantumBarrier extends QuantumInstruction {\n    constructor(qubits) {\n        super();\n        this.qubits = qubits;\n    }\n}\n/** Class representing a quantum reset instruction. */\nclass QuantumReset extends QuantumInstruction {\n    constructor(identifier) {\n        super();\n        this.identifier = identifier;\n    }\n}\n/** Class representing a quantum delay instruction. */\nclass QuantumDelay extends QuantumInstruction {\n    constructor(duration, qubits) {\n        super();\n        this.duration = duration;\n        this.qubits = qubits;\n    }\n}\n/** Class representing a return statement. */\nclass ReturnStatement extends Statement {\n    constructor(expression) {\n        super();\n        this.expression = expression ? expression : null;\n    }\n}\n/**\n * Base class representing a program block.\n *\n * programBlock\n *  : statement | controlDirective\n *  | LBRACE(statement | controlDirective) * RBRACEj\n */\nclass ProgramBlock extends AstNode {\n    constructor(statements) {\n        super();\n        this.statements = statements;\n    }\n}\n/**\n * Class representing a block of quantum operation statements.\n *\n * quantumBlock\n *  : LBRACE (quantumStatement | quantumLoop) * RBRACE\n */\nclass QuantumBlock extends ProgramBlock {\n    constructor(statements) {\n        super(statements);\n    }\n}\n/**\n * Class representing a block of statements in a subroutine.\n *\n * subroutineBlock\n *  : LBRACE statement* returnStatement? RBRACE\n */\nclass SubroutineBlock extends ProgramBlock {\n    constructor(statements) {\n        super(statements);\n    }\n}\n/**\n * Class representing a quantum gate definition.\n *\n * quantumGateDefinition\n *  : `gate` quantumGateDefinition quantumBlock\n */\nclass QuantumGateDefinition extends Statement {\n    constructor(name, params, qubits, body) {\n        super();\n        this.name = name;\n        this.params = params;\n        this.qubits = qubits;\n        this.body = body;\n    }\n}\n/**\n * Class representing an extern function signature.\n *\n * externStatement\n *   : EXTERN Identifier LPAREN externArgumentList? RPAREN returnSignature? SEMICOLON;\n */\nclass ExternSignature extends Statement {\n    constructor(name, args, returnType) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.returnType =\n            returnType !== undefined && returnType !== null ? returnType : null;\n    }\n}\n/**\n * Class representing a subroutine.\n *\n * subroutineDefinition\n *  : `def` Identifier LPAREN anyTypeArgumentList? RPAREN\n *  returnSignature? subroutineBlock\n */\nclass SubroutineDefinition extends Statement {\n    constructor(name, subroutineBlock, args, returnType) {\n        super();\n        this.name = name;\n        this.subroutineBlock = subroutineBlock;\n        this.args = args;\n        this.returnType = returnType ? returnType : null;\n    }\n}\n/**\n * Class representing a box scoping statement.\n *\n * boxStatement\n *   : BOX designator? scope;\n */\nclass BoxDefinition extends Statement {\n    constructor(scope, designator) {\n        super();\n        this.scope = scope;\n        this.designator =\n            designator !== undefined && designator !== null ? designator : null;\n    }\n}\n/** Class representing a subroutine call. */\nclass SubroutineCall extends Statement {\n    constructor(subroutineName, parameters) {\n        super();\n        this.subroutineName = subroutineName;\n        this.parameters = parameters ? parameters : null;\n    }\n}\n/**\n * Class representing a branching if statement.\n *\n * branchingStatement\n *  : `if` LPAREN booleanExpression RPAREN programBlock (`else` programBlock)?\n */\nclass BranchingStatement extends Statement {\n    constructor(condition, trueBody, falseBody) {\n        super();\n        this.condition = condition;\n        this.trueBody = trueBody;\n        this.falseBody = falseBody;\n    }\n}\n/**\n * Class representing a for loop statement.\n *\n * ForLoop: \"for\" Identifier \"in\" SetDeclaration ProgramBlock\n * SetDeclaration:\n *  | Identifier\n *  | \"{\" Expression (\",\" Expression)* \"}\"\n *  | \"[\" Range \"]\"\n */\nclass ForLoopStatement extends Statement {\n    constructor(indexSet, loopVarType, parameter, body) {\n        super();\n        this.indexSet = indexSet;\n        this.loopVarType = loopVarType;\n        this.parameter = parameter;\n        this.body = body;\n    }\n}\n/**\n * Class representing a while loop statement.\n *\n * WhileLoop: \"while\" \"(\" Expression \")\" ProgramBlock\n */\nclass WhileLoopStatement extends Statement {\n    constructor(condition, body) {\n        super();\n        this.condition = condition;\n        this.body = body;\n    }\n}\n/** Class representing a break loop statement. */\nclass BreakStatement extends Statement {\n}\n/** Class representing a continue loop statement. */\nclass ContinueStatement extends Statement {\n}\n/** Enum representing the available IO modifiers. */\nvar IOModifier;\n(function (IOModifier) {\n    IOModifier[\"INPUT\"] = \"input\";\n    IOModifier[\"OUTPUT\"] = \"output\";\n})(IOModifier || (IOModifier = {}));\n/** Class representing a declaration of an IO variable. */\nclass IODeclaration extends Statement {\n    constructor(modifier, classicalType) {\n        super();\n        this.modifier = modifier;\n        this.classicalType = classicalType;\n    }\n}\n/** Class representing a switch statement. */\nclass SwitchStatement extends Statement {\n    constructor(controlExpression, cases, defaultBlock) {\n        super();\n        this.controlExpression = controlExpression;\n        this.cases = cases;\n        this.defaultBlock = defaultBlock ? defaultBlock : null;\n    }\n}\n/** Class representing a single case in a switch statement. */\nclass CaseStatement extends Statement {\n    constructor(labels, body) {\n        super();\n        this.labels = labels;\n        this.body = body;\n    }\n}\n/** Class representing the default case in a swtich statement. */\nclass DefaultStatement extends Statement {\n    constructor(body) {\n        super();\n        this.body = body;\n    }\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm3/ast.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm3/lexer.js":
/*!**************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm3/lexer.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ \"./node_modules/qasm-ts/dist/qasm3/token.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/* eslint-disable no-useless-escape */\n/**\n * OpenQASM 3.0 Lexical Analyzer\n *\n * This module implements the lexer for OpenQASM 3.0, which transforms source code\n * into a stream of tokens. The lexer handles the significantly expanded syntax of\n * OpenQASM 3.0, including classical programming constructs, control flow, and\n * advanced quantum features.\n *\n * Key features of the OpenQASM 3.0 lexer:\n * - **Extended token set**: Classical types, control flow, functions\n * - **Complex operators**: Compound assignment, bitwise operations\n * - **Advanced literals**: Scientific notation, binary/hex/octal, durations\n * - **Gate modifiers**: ctrl, negctrl, inv, pow with @ syntax\n * - **Unicode support**: Mathematical constants (π, ℇ, τ)\n * - **Robust error handling**: Detailed syntax error reporting\n *\n * The lexer performs several validation passes:\n * - Semicolon verification for statement termination\n * - Comment handling (single-line // and multi-line /* *\\/)\n * - String literal parsing with multiple quote styles\n * - Number format validation and conversion\n *\n * @module\n *\n * @example Basic lexing process\n * ```typescript\n * const lexer = new Lexer('qubit[2] q; h q[0];');\n * const tokens = lexer.lex();\n * // Returns: [\n * //   [Token.Id, 'qubit'], [Token.LSParen], [Token.NNInteger, 2],\n * //   [Token.RSParen], [Token.Id, 'q'], [Token.Semicolon], ...\n * // ]\n * ```\n */\n\n\n/**\n * Handles throwing lexer errors with basic stack trace.\n * @param error - The error to throw.\n * @param number - The line number in the source code.\n * @param code - The source code that the error is about.\n */\nfunction throwLexerError(error, line, code) {\n    throw new error(`Line ${line}: ${code}`);\n}\n/**\n * Returns whether a given character could be an element of a numeric value.\n * @param c - The character.\n * @return Whether the character is numeric.\n */\nfunction isNumeric(c) {\n    return c == \".\" || c == \"e\" || c == \"_\" || !isNaN(parseInt(c));\n}\n/**\n * Returns whether a given character is a letter.\n * @param c - The character.\n * @param matchCase - Whether to check for a letter that is upper case, lower case, or either. (optional)\n * @return Whether the character is a letter.\n */\nfunction isLetter(c, matchCase) {\n    switch (matchCase) {\n        case \"upper\":\n            return /^[A-Z]$/.test(c);\n        case \"lower\":\n            return /^[a-z]$/.test(c);\n        default:\n            return /^[A-Za-z]$/.test(c);\n    }\n}\n/**\n * Returns whether a given character is unicode.\n * @param c - The character.\n * @param excludePi - Whether to exclude the Pi symbol from consideration.\n * @return - Whether the given character is valid unicode.\n */\nfunction isUnicode(c, excludePi) {\n    const isBasicUnicode = /^\\u0000-\\u00ff/.test(c);\n    switch (excludePi) {\n        case true:\n            return isBasicUnicode && c !== \"\\u03C0\";\n        case false:\n            return isBasicUnicode;\n        default:\n            return isBasicUnicode;\n    }\n}\n/**\n * Returns whether a given character is alphanumeric.\n * @param c - The character.\n * @return Whether the character is alphanumeric.\n */\nfunction isAlpha(c) {\n    return /^[0-9a-zA-Z]+$/.test(c);\n}\n/**\n * Returns whether a given character is a newline character.\n * @param c - The character.\n * @return Whether the character is a newline.\n */\nfunction isNewline(c) {\n    return /\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/.test(c);\n}\n/**\n * OpenQASM 3.0 Lexical Analyzer\n *\n * The main lexer class that processes OpenQASM 3.0 source code character by\n * character and produces a stream of tokens for the parser to consume.\n *\n * The lexer maintains state including:\n * - Current cursor position in the input\n * - Input validation status\n * - Error reporting context\n *\n * @example Creating and using a lexer\n * ```typescript\n * const source = `\n *   OPENQASM 3.0;\n *   include \"stdgates.inc\";\n *   qubit[2] q;\n *   h q[0];\n *   cx q[0], q[1];\n * `;\n *\n * const lexer = new Lexer(source);\n * const tokens = lexer.lex();\n * ```\n */\nclass Lexer {\n    /**\n     * Creates a lexer.\n     * @param input - The string to lex.\n     * @param cursor - The starting cursor position.\n     */\n    constructor(input, cursor = 0) {\n        /**\n         * Verifies that all appropriate lines end with a semicolon.\n         * @return A tuple of the status and if False, returns the problematic line.\n         */\n        this.verifyInput = () => {\n            const lines = this.input.split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/g);\n            for (let i = 0; i < lines.length; i++) {\n                const trimmedLine = lines[i].trim();\n                if (!trimmedLine.startsWith(\"//\") &&\n                    !trimmedLine.startsWith(\"/*\") &&\n                    !trimmedLine.startsWith(\"*\") &&\n                    !trimmedLine.startsWith(\"*/\") &&\n                    trimmedLine.length > 0 &&\n                    !trimmedLine.startsWith(\"gate\") &&\n                    trimmedLine !== \"{\" &&\n                    trimmedLine !== \"}\" &&\n                    !trimmedLine.includes(\";\") &&\n                    !trimmedLine.startsWith(\"def\") &&\n                    !trimmedLine.startsWith(\"if\") &&\n                    !trimmedLine.startsWith(\"else\") &&\n                    !trimmedLine.startsWith(\"for\") &&\n                    !trimmedLine.startsWith(\"while\") &&\n                    !trimmedLine.startsWith(\"switch\") &&\n                    !trimmedLine.startsWith(\"case\") &&\n                    !trimmedLine.startsWith(\"box\") &&\n                    !trimmedLine.startsWith(\"array\") &&\n                    !trimmedLine.startsWith(\"{\") &&\n                    !trimmedLine.startsWith(\"default\")) {\n                    return [false, i + 1, lines[i]];\n                }\n            }\n            return [true, null, null];\n        };\n        /**\n         * Calling this method lexes the code represented by the provided string.\n         * @return An array of tokens and their corresponding values.\n         */\n        this.lex = () => {\n            const tokens = [];\n            let token;\n            const verifyInputResult = this.verifyInput();\n            if (!verifyInputResult[0]) {\n                throwLexerError(_errors__WEBPACK_IMPORTED_MODULE_1__.MissingSemicolonError, verifyInputResult[1], verifyInputResult[2]);\n            }\n            while (this.cursor < this.input.length) {\n                token = this.nextToken();\n                if (token) {\n                    tokens.push(token);\n                }\n            }\n            return tokens;\n        };\n        /**\n         * Reads a character and advances the cursor.\n         * @param num - Optional cursor position modifier.\n         */\n        this.readChar = (num = 1) => {\n            this.cursor += num;\n            return this.input[this.cursor - num];\n        };\n        /**\n         * Advances the cusor past the next comment.\n         */\n        this.skipComment = () => {\n            let char = \"\";\n            while (!isNewline(char)) {\n                char = this.readChar();\n            }\n        };\n        /**\n         * Advances the cursor past a multiline comment.\n         */\n        this.skipMultiLineComment = () => {\n            let char = \"\";\n            let nextChar = \"\";\n            const multiLineCommentTerminator = \"*/\";\n            while (`${char}${nextChar}` !== multiLineCommentTerminator) {\n                char = this.readChar();\n                nextChar = this.peek();\n            }\n            this.readChar();\n        };\n        /**\n         * Determines whether the next character to process equals a given character.\n         * @param c - The given character.\n         * @return Whether the next character equals the given character.\n         */\n        this.peekEq = (c) => this.peek() == c;\n        /**\n         * Reads a character without advancing the cursor.\n         * @param index - Optional peek position offset.\n         */\n        this.peek = () => this.input[this.cursor];\n        /**\n         * Reads a numeric value.\n         * @return The numeric value as a string.\n         */\n        this.readNumeric = () => {\n            let num = \"\";\n            let char = this.peek();\n            while (isNumeric(char) || char === \"e\") {\n                num += this.readChar();\n                if (char === \"e\" && this.peek() === \"-\") {\n                    num += this.readChar();\n                }\n                char = this.peek();\n            }\n            return num;\n        };\n        /**\n         * Reads an identifier.\n         * @return The identifier as a string.\n         */\n        this.readIdentifier = () => {\n            let id = \"\";\n            let next = this.peek();\n            while (isAlpha(next) || next == \"_\" || isUnicode(next)) {\n                id += this.readChar();\n                next = this.peek();\n            }\n            return id;\n        };\n        /**\n         * Reds a keyword or identifier.\n         * If the character sequence matches a keyword, returns the corresponding token.\n         * Otherwise, treats the sequence as an identifier.\n         * @param char - The first character of the keyword or identifier.\n         * @return The corresponding token or identifier.\n         */\n        this.readKeywordOrIdentifier = (char) => {\n            const identifier = char + this.readIdentifier();\n            return [(0,_token__WEBPACK_IMPORTED_MODULE_0__.lookup)(identifier), identifier];\n        };\n        /**\n         * Reads a string literal.\n         * @param terminator - The literal's termination character.\n         * @return The literal as a string.\n         */\n        this.readStringLiteral = (terminator) => {\n            let lit = \"\";\n            let char = \"\";\n            while (!(terminator == char)) {\n                char = this.readChar();\n                lit += char;\n            }\n            return lit;\n        };\n        /**\n         * Advances the cusor past the next block of whitespace.\n         */\n        this.skipWhitespace = () => {\n            while (\" \\t\\n\\r\\v\".indexOf(this.peek()) > -1) {\n                this.cursor += 1;\n            }\n            return null;\n        };\n        /**\n         * Lexes the next token.\n         * @return The next token and its corresponding value.\n         */\n        this.nextToken = () => {\n            this.skipWhitespace();\n            if (this.cursor == this.input.length) {\n                return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EndOfFile];\n            }\n            const char = this.peek();\n            this.readChar();\n            switch (char) {\n                case \"π\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Pi];\n                case \"ℇ\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Euler];\n                case \"τ\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Tau];\n                case \"@\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.At];\n                case \"θ\":\n                    return this.readKeywordOrIdentifier(char);\n                case \"!\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"!=\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp, \"!\"];\n                    }\n                case \"~\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp, \"~\"];\n                case \"*\":\n                    if (this.peekEq(\"*\")) {\n                        this.readChar();\n                        if (this.peekEq(\"=\")) {\n                            this.readChar();\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"**=\"];\n                        }\n                        else {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"**\"];\n                        }\n                    }\n                    else if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"*=\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"*\"];\n                    }\n                case \"/\":\n                    if (this.peekEq(\"/\")) {\n                        this.skipComment();\n                        return;\n                    }\n                    else if (this.peekEq(\"*\")) {\n                        this.skipMultiLineComment();\n                        return;\n                    }\n                    else if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"/=\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"/\"];\n                    }\n                case \"%\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"%=\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"%\"];\n                    }\n                case \"+\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"+=\"];\n                    }\n                    else if (this.peekEq(\"+\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"++\"];\n                    }\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp, \"+\"];\n                case \"-\": {\n                    if (this.peekEq(\">\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow];\n                    }\n                    else if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp, \"-=\"];\n                    }\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp, \"-\"];\n                }\n                case \"&\":\n                    if (this.peekEq(\"&\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"&&\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"&\"];\n                    }\n                case \"|\":\n                    if (this.peekEq(\"|\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"||\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"|\"];\n                    }\n                case \"^\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp, \"^=\"];\n                    }\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"^\"];\n                case \"<\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"<=\"];\n                    }\n                    else if (this.input[this.cursor] == \"<\" &&\n                        this.input[this.cursor + 1] == \"=\") {\n                        this.readChar(2);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp, \"<<=\"];\n                    }\n                    else if (this.peekEq(\"<\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"<<\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"<\"];\n                    }\n                case \">\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \">=\"];\n                    }\n                    else if (this.input[this.cursor] == \">\" &&\n                        this.input[this.cursor + 1] == \"=\") {\n                        this.readChar(2);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp, \">>=\"];\n                    }\n                    else if (this.peekEq(\">\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \">>\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \">\"];\n                    }\n                case \"=\":\n                    if (this.peekEq(\"=\")) {\n                        this.readChar();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp, \"==\"];\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt];\n                    }\n                case \";\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon];\n                case \",\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma];\n                case \":\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon];\n                case \"(\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen];\n                case \"[\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen];\n                case \"{\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen];\n                case \")\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen];\n                case \"]\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen];\n                case \"}\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen];\n                case \"$\":\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Dollar];\n                case \"#\":\n                    if (this.input[this.cursor] == \"d\" &&\n                        this.input[this.cursor + 1] == \"i\" &&\n                        this.input[this.cursor + 2] == \"m\") {\n                        this.readChar(3);\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Dim];\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case \"c\":\n                    if (this.input[this.cursor] == \"t\" &&\n                        this.input[this.cursor + 1] == \"r\" &&\n                        this.input[this.cursor + 2] == \"l\") {\n                        this.readChar(3);\n                        return this.lexGateModifier(\"ctrl\");\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case \"n\":\n                    if (this.input[this.cursor] == \"e\" &&\n                        this.input[this.cursor + 1] == \"g\" &&\n                        this.input[this.cursor + 2] == \"c\" &&\n                        this.input[this.cursor + 3] == \"t\" &&\n                        this.input[this.cursor + 4] == \"r\" &&\n                        this.input[this.cursor + 5] == \"l\") {\n                        this.readChar(6);\n                        return this.lexGateModifier(\"negctrl\");\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case \"i\":\n                    if (this.input[this.cursor] == \"n\" &&\n                        this.input[this.cursor + 1] == \"v\") {\n                        this.readChar(2);\n                        return this.lexGateModifier(\"inv\");\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case \"p\":\n                    if (this.input[this.cursor] == \"o\" &&\n                        this.input[this.cursor + 1] == \"w\" &&\n                        !isLetter(this.input[this.cursor + 2])) {\n                        this.readChar(2);\n                        return this.lexGateModifier(\"pow\");\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case \"0\":\n                    if (this.peekEq(\"b\") || this.peekEq(\"B\")) {\n                        const char = this.readChar(1);\n                        const binaryLit = this.readIdentifier();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryLiteral, `0${char}${binaryLit}`];\n                    }\n                    else if (this.peekEq(\"o\") || this.peekEq(\"O\")) {\n                        const char = this.readChar(1);\n                        const octalLit = this.readIdentifier();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.OctalLiteral, `0${char}${octalLit}`];\n                    }\n                    else if (this.peekEq(\"x\") || this.peekEq(\"X\")) {\n                        const char = this.readChar(1);\n                        const hexLit = this.readIdentifier();\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.HexLiteral, `0${char}${hexLit}`];\n                    }\n                    else {\n                        const num = char + this.readNumeric();\n                        if (num.indexOf(\".\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Real, parseFloat(num)];\n                        }\n                        else if (num.indexOf(\"_\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Integer, num];\n                        }\n                        else {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger, parseInt(num)];\n                        }\n                    }\n                    // removed by dead control flow\n\n                case \"O\":\n                    if (this.input[this.cursor].toLowerCase() == \"p\" &&\n                        this.input[this.cursor + 1].toLowerCase() == \"e\" &&\n                        this.input[this.cursor + 2].toLowerCase() == \"n\" &&\n                        this.input[this.cursor + 3] == \"Q\" &&\n                        this.input[this.cursor + 4] == \"A\" &&\n                        this.input[this.cursor + 5] == \"S\" &&\n                        this.input[this.cursor + 6] == \"M\") {\n                        this.readChar(7);\n                        let offset = 0;\n                        while (this.cursor + offset < this.input.length &&\n                            \" \\t\".indexOf(this.input[this.cursor + offset]) > -1) {\n                            offset++;\n                        }\n                        // Read the major version\n                        let majorVersion = \"\";\n                        while (this.cursor + offset < this.input.length &&\n                            !isNaN(parseInt(this.input[this.cursor + offset], 10))) {\n                            majorVersion += this.input[this.cursor + offset];\n                            offset++;\n                        }\n                        // Attempt to read the minor version\n                        let minorVersion = undefined;\n                        if (this.input[this.cursor + offset] == \".\") {\n                            offset++;\n                            minorVersion = \"\";\n                            while (this.cursor + offset < this.input.length &&\n                                !isNaN(parseInt(this.input[this.cursor + offset], 10))) {\n                                minorVersion += this.input[this.cursor + offset];\n                                offset++;\n                            }\n                        }\n                        // Parse major and minor versions\n                        const major = parseInt(majorVersion, 10);\n                        const minor = minorVersion ? parseInt(minorVersion, 10) : undefined;\n                        if (major !== 3) {\n                            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.UnsupportedOpenQASMVersionError(`Unsupported OpenQASM version detected: ${majorVersion}.${minor !== null && minor !== void 0 ? minor : 0}`);\n                        }\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.OpenQASM];\n                    }\n                    return this.readKeywordOrIdentifier(char);\n                case '\"': {\n                    const stringLiteral = char + this.readStringLiteral('\"');\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, stringLiteral];\n                }\n                case \"’\": {\n                    const singleStringLiteral = char + this.readStringLiteral(\"’\");\n                    return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, singleStringLiteral];\n                }\n                default:\n                    if (isLetter(char)) {\n                        return this.readKeywordOrIdentifier(char);\n                    }\n                    else if (isNumeric(char)) {\n                        const num = char + this.readNumeric();\n                        if (num.indexOf(\"e\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ScientificNotation, num];\n                        }\n                        else if (num.indexOf(\".\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Real, parseFloat(num)];\n                        }\n                        else if (num.indexOf(\"_\") != -1) {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Integer, num];\n                        }\n                        else {\n                            return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger, parseInt(num)];\n                        }\n                    }\n                    else {\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Illegal];\n                    }\n            }\n        };\n        /**\n         * Returns the line number where the current cursor is located.\n         * @param cursor - The current cursor position in the input string.\n         * @return The line number.\n         */\n        this.getLineNumber = (cursor) => {\n            return this.input\n                .substring(0, cursor)\n                .split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/).length;\n        };\n        /**\n         * Returns the current line of code where the cursor is located.\n         * @param cursor - The current cursor position in the input string.\n         * @return The specific line where the cursor is located.\n         */\n        this.getCurrentLine = (cursor) => {\n            const lines = this.input.split(/\\n|\\r(?!\\n)|\\u2028|\\u2029|\\r\\n/);\n            const lineNumber = this.getLineNumber(cursor);\n            return lines[lineNumber - 1];\n        };\n        /**\n         * Retruns an identifier or gate modifier.\n         */\n        this.lexGateModifier = (keyword) => {\n            let offset = 1;\n            let currChar = \"\";\n            while (this.cursor + offset < this.input.length &&\n                this.input[this.cursor + offset] !== \";\") {\n                currChar = this.input[this.cursor + offset];\n                if (currChar === \"@\") {\n                    break;\n                }\n                offset++;\n            }\n            if (currChar === \"@\") {\n                switch (keyword) {\n                    case \"ctrl\":\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Ctrl];\n                    case \"negctrl\":\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NegCtrl];\n                    case \"inv\":\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Inv];\n                    case \"pow\":\n                        return [_token__WEBPACK_IMPORTED_MODULE_0__.Token.PowM];\n                }\n            }\n            return this.readKeywordOrIdentifier(keyword);\n        };\n        this.input = input;\n        this.cursor = cursor;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Lexer);\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm3/lexer.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm3/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm3/parser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _token__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./token */ \"./node_modules/qasm-ts/dist/qasm3/token.js\");\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../version */ \"./node_modules/qasm-ts/dist/version.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors */ \"./node_modules/qasm-ts/dist/errors.js\");\n/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ast */ \"./node_modules/qasm-ts/dist/qasm3/ast.js\");\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n/**\n * OpenQASM 3.0 Parser Implementation\n *\n * This module implements a recursive descent parser for OpenQASM 3.0 that transforms\n * a stream of tokens into an Abstract Syntax Tree (AST). The parser handles the full\n * OpenQASM 3.0 language specification including classical programming constructs,\n * control flow, quantum operations, and advanced features.\n *\n * Key parsing capabilities:\n * - **Classical types**: int, uint, float, bool, bit, complex, angle\n * - **Control flow**: if/else, for/while loops, switch/case statements\n * - **Functions**: def, return, extern declarations, subroutine calls\n * - **Quantum operations**: gate definitions/calls, measurements, barriers, delays\n * - **Advanced features**: arrays, timing constructs, calibration grammar\n * - **Expressions**: Arithmetic, logical, function calls with proper precedence\n *\n * The parser maintains context about:\n * - Defined gates (built-in, standard library, custom)\n * - Declared subroutines and external functions\n * - Array declarations and aliases\n * - Type information for validation\n *\n * @module\n *\n * @example Basic parsing workflow\n * ```typescript\n * const tokens = lexer.lex();\n * const parser = new Parser(tokens);\n * const ast = parser.parse();\n * ```\n */\n\n\n\n\n/**\n * Handles throwing parser errors with basic stack trace.\n * @param error - The error to throw.\n * @param token - The source token for the error.\n * @param index - The token index.\n * @param message - Optional additional error context.\n */\nfunction throwParserError(error, token, index, message) {\n    const errorMessage = message\n        ? `index: ${index} at token [${token}], ${message}`\n        : `index: ${index} at token [${token}]`;\n    throw new error(errorMessage);\n}\n/**\n * OpenQASM 3.0 Recursive Descent Parser\n *\n * Implements a comprehensive parser for the OpenQASM 3.0 language specification.\n * The parser uses recursive descent parsing with appropriate error recovery and\n * maintains symbol tables for gates, subroutines, and variables.\n *\n * Parser state includes:\n * - Token stream and current position\n * - Symbol tables for gates, subroutines, arrays, aliases\n * - Machine-specific defaults (float width, int size)\n *\n * @example Creating and using the parser\n * ```typescript\n * const parser = new Parser(tokens);\n *\n * // Parse the entire program\n * const ast = parser.parse();\n *\n * // AST contains array of top-level statements and declarations\n * console.log(ast); // [VersionNode, IncludeNode, DeclarationNode, ...]\n * ```\n */\nclass Parser {\n    /**\n     * Creates a parser.\n     * @param tokens - Tokens to parse.\n     * @param defaultFloatWidth - Optional default float width override.\n     * @param machineIntSize - Optional default int size override.\n     */\n    constructor(tokens, defaultFloatWidth, machineIntSize) {\n        this.tokens = tokens;\n        this.gates = new Set([\"U\", \"gphase\"]);\n        this.standardGates = new Set();\n        this.customGates = new Set();\n        this.subroutines = new Set();\n        this.customArrays = new Set();\n        this.aliases = new Map();\n        this.index = 0;\n        this.machineFloatWidth = defaultFloatWidth ? defaultFloatWidth : 64;\n        this.machineIntSize = machineIntSize ? machineIntSize : 32;\n    }\n    /**\n     * Loads the standard library gates.\n     */\n    stdGates() {\n        const gates = [\n            \"p\",\n            \"x\",\n            \"y\",\n            \"z\",\n            \"h\",\n            \"s\",\n            \"sdg\",\n            \"t\",\n            \"tdg\",\n            \"sx\",\n            \"rx\",\n            \"ry\",\n            \"rz\",\n            \"cx\",\n            \"cy\",\n            \"cz\",\n            \"cp\",\n            \"crx\",\n            \"cry\",\n            \"crz\",\n            \"ch\",\n            \"swap\",\n            \"ccx\",\n            \"cswap\",\n            \"cu\",\n            // OpenQASM 2 backwards compatibility gates\n            \"CX\",\n            \"phase\",\n            \"cphase\",\n            \"id\",\n            \"u1\",\n            \"u2\",\n            \"u3\",\n        ];\n        gates.forEach(this.standardGates.add, this.standardGates);\n    }\n    /**\n     * Parses the token stream and generates an abstract syntax tree.\n     * @return The abstract syntax tree.\n     */\n    parse() {\n        let ast = [];\n        while (this.index < this.tokens.length - 1) {\n            const [nodes, consumed] = this.parseNode(this.tokens.slice(this.index));\n            ast = ast.concat(nodes ? nodes : []);\n            this.index += consumed;\n        }\n        return ast;\n        // let i = 0;\n        // while (i < this.tokens.length - 1) {\n        //   this.index = i;\n        //   const nodes = this.parseNode(this.tokens.slice(i))[0];\n        //   ast = ast.concat(nodes ? nodes : []);\n        //   while (!this.matchNext(this.tokens.slice(i), [Token.Semicolon])) {\n        //     if (this.matchNext(this.tokens.slice(i), [Token.LCParen])) {\n        //       while (!this.matchNext(this.tokens.slice(i), [Token.RCParen])) {\n        //         i++;\n        //       }\n        //       break;\n        //     } else if (this.matchNext(this.tokens.slice(i), [Token.RCParen])) {\n        //       break;\n        //     }\n        //     i++;\n        //   }\n        //   i++;\n        // }\n        // return ast;\n    }\n    /**\n    * Parses a single statement or declaration by delegating the parsing of the next set of tokens to the appropriate method.\n    * @param tokens - Remaining tokens to parse.\n    * @param allowVariables - Whether encountered identifiers should be consider\n        variable initializations or references.\n    * @return A set of AST nodes and the number of consumed tokens.\n    */\n    parseNode(tokens, allowVariables = true) {\n        const token = tokens[0];\n        switch (token[0]) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.DefcalGrammar: {\n                const [defcalGrammarNode, consumed] = this.defcalGrammarDeclaration(tokens);\n                return [[defcalGrammarNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Include: {\n                const [includeNode, consumed] = this.include(tokens);\n                if (includeNode.filename === '\"stdgates.inc\"') {\n                    this.stdGates();\n                }\n                return [[includeNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.OpenQASM: {\n                const [qasmNode, consumed] = this.versionHeader(tokens);\n                return [[qasmNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Const: {\n                const [constNode, consumed] = this.classicalDeclaration(tokens.slice(1), true);\n                return [[constNode], consumed + 1];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Input:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Output: {\n                const [ioType, consumed] = this.ioType(tokens);\n                return [[ioType], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Float:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Int:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.UInt:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bool:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Angle:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Stretch:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Complex:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Duration: {\n                const [classicalNode, consumed] = this.classicalDeclaration(tokens, false);\n                return [[classicalNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Qubit:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.QReg: {\n                const [qregNode, qregConsumed] = this.quantumDeclaration(tokens);\n                return [[qregNode], qregConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Break:\n                return [[new _ast__WEBPACK_IMPORTED_MODULE_3__.BreakStatement()], 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Reset: {\n                const [resetNode, resetConsumed] = this.resetStatement(tokens);\n                return [[resetNode], resetConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Continue:\n                return [[new _ast__WEBPACK_IMPORTED_MODULE_3__.ContinueStatement()], 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Let: {\n                const [letNode, letConsumed] = this.aliasStatement(tokens);\n                return [[letNode], letConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bit:\n                if (this.isMeasurement(tokens.slice(1))) {\n                    const [measureNode, measureConsumed] = this.measureStatement(tokens);\n                    return [[measureNode], measureConsumed];\n                }\n                else {\n                    const [classicalNode, consumed] = this.classicalDeclaration(tokens, false);\n                    return [[classicalNode], consumed];\n                }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.CReg: {\n                const [classicalNode, consumed] = this.classicalDeclaration(tokens, false);\n                return [[classicalNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure: {\n                const [measureNode, measureConsumed] = this.measureStatement(tokens);\n                return [[measureNode], measureConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Gate: {\n                const [gateNode, gateConsumed] = this.quantumGateDefinition(tokens);\n                this.customGates.add(gateNode.name.name);\n                return [[gateNode], gateConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Return: {\n                const [returnNode, returnConsumed] = this.returnStatement(tokens);\n                return [[returnNode], returnConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Def: {\n                const [subroutineNode, subroutineConsumed] = this.subroutineDefinition(tokens);\n                this.subroutines.add(subroutineNode.name.name);\n                return [[subroutineNode], subroutineConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Extern: {\n                const [externNode, consumed] = this.externSignature(tokens);\n                this.subroutines.add(externNode.name.name);\n                return [[externNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ctrl:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.NegCtrl:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Inv:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.PowM: {\n                const [gateCallNode, gateCallConsumed] = this.quantumGateCall(tokens);\n                return [[gateCallNode], gateCallConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ceiling:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Exp:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Floor:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Log:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Mod:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Popcount:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Pow:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sqrt:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotr:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotl: {\n                const [expr, exprConsumed] = this.binaryExpression(tokens.slice(1));\n                let consumed = exprConsumed + 1;\n                const [math, mathConsumed] = this.createMathOrTrigFunction(token[0], expr);\n                consumed += mathConsumed;\n                return [[math], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Opaque: {\n                let consumed = 1;\n                while (consumed < this.tokens.length &&\n                    !this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                    consumed++;\n                }\n                return [[], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.DurationOf: {\n                const [durationOfNOde, consumed] = this.durationOf(tokens);\n                return [[durationOfNOde], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.SizeOf: {\n                const [sizeOfNode, consumed] = this.sizeOf(tokens);\n                return [[sizeOfNode], consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Delay: {\n                const [delayNode, delayConsumed] = this.delay(tokens);\n                return [[delayNode], delayConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.If: {\n                const [ifNode, ifConsumed] = this.ifStatement(tokens);\n                return [[ifNode], ifConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.For: {\n                const [forNode, forConsumed] = this.forLoopStatement(tokens);\n                return [[forNode], forConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.While: {\n                const [whileNode, whileConsumed] = this.whileLoopStatement(tokens);\n                return [[whileNode], whileConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Switch: {\n                const [switchNode, switchConsumed] = this.switchStatement(tokens);\n                return [[switchNode], switchConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Array: {\n                const [arrayNode, arrayConsumed] = this.arrayDeclaration(tokens);\n                this.customArrays.add(arrayNode.identifier.name);\n                return [[arrayNode], arrayConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Box: {\n                const [boxNode, boxConsumed] = this.box(tokens);\n                return [[boxNode], boxConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Barrier: {\n                const [barrierNode, barrierConsumed] = this.barrier(tokens);\n                return [[barrierNode], barrierConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id:\n                if (this.isQuantumGateCall(tokens)) {\n                    const [gateCallNode, gateCallConsumed] = this.quantumGateCall(tokens);\n                    return [[gateCallNode], gateCallConsumed];\n                }\n                else if (this.isSubroutineCall(tokens)) {\n                    const [subroutineCallNode, subroutineCallConsumed] = this.subroutineCall(tokens);\n                    return [[subroutineCallNode], subroutineCallConsumed];\n                }\n                else if (this.isMeasurement(tokens)) {\n                    const [measureNode, measureConsumed] = this.measureStatement(tokens);\n                    return [[measureNode], measureConsumed];\n                }\n                else if (this.matchNext(tokens.slice(1), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt]) ||\n                    this.matchNext(tokens.slice(1), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp]) ||\n                    this.matchNext(tokens.slice(1), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp]) ||\n                    this.isAssignment(tokens)) {\n                    const [assignmentNode, consumed] = this.assignment(tokens);\n                    return [[assignmentNode], consumed];\n                }\n                else if (allowVariables) {\n                    const [expr, consumed] = this.binaryExpression(tokens);\n                    if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                        return [[expr], consumed + 1];\n                    }\n                    else {\n                        throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n                    }\n                }\n                break;\n            default:\n                return [[], 1];\n        }\n    }\n    /**\n     * Checks if the next tokens match those expected.\n     * @param tokens - Remaining tokens to parse.\n     * @param expectedTokens - Expected tokens.\n     * @return Whether these is a match.\n     */\n    matchNext(tokens, expectedTokens) {\n        let matches = true;\n        let i = 0;\n        if (tokens.length == 0) {\n            return false;\n        }\n        while (i < expectedTokens.length) {\n            if (tokens[i][0] != expectedTokens[i]) {\n                matches = false;\n                break;\n            }\n            i++;\n        }\n        return matches;\n    }\n    /**\n     * Parses a `defcalgrammar` declaration.\n     *\n     * calibrationGrammarStatement:\n     *   DEFCALGRAMMAR StringLiteral SEMICOLON\n     *\n     * @param tokens - Remaining tokens to parse.\n     * @return The parsed CalibrationGrammarDeclaration AstNode node and the number of consumed tokens.\n     */\n    defcalGrammarDeclaration(tokens) {\n        const consumed = 1;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            return [\n                new _ast__WEBPACK_IMPORTED_MODULE_3__.CalibrationGrammarDeclaration(tokens[0][1].toString()),\n                consumed + 2,\n            ];\n        }\n        throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadStringLiteralError, tokens[consumed], this.index + consumed, \"expected string literal following `defcalgrammar` keyword\");\n    }\n    /**\n     * Parses a classical type declaration.\n     * @param tokens - Remaining tokens to parse.\n     * @param isConst - Whether the declaration is for a constant, defaults to False.\n     * @return The parsed ClassicalDeclaration AstNode and the number of consumed tokens.\n     */\n    classicalDeclaration(tokens, isConst) {\n        const isConstParam = isConst ? isConst : false;\n        let id = null;\n        let initialValue;\n        let consumed = 0;\n        const [classicalType, classicalTypeConsumed] = this.parseClassicalType(tokens);\n        consumed += classicalTypeConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen]) &&\n            !this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n            const [identifier, idConsumed] = this.unaryExpression(tokens.slice(consumed));\n            id = identifier;\n            consumed += idConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt])) {\n                consumed++;\n                const [value, valueConsumed] = this.binaryExpression(tokens.slice(consumed));\n                initialValue = value;\n                consumed += valueConsumed;\n            }\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                consumed++;\n            }\n        }\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.ClassicalDeclaration(classicalType, id, initialValue, isConstParam),\n            consumed,\n        ];\n    }\n    /**\n     * Parses an IO declaration statement.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the parsed IODeclaration and the number of tokens consumed.\n     */\n    ioType(tokens) {\n        let consumed = 0;\n        let modifier;\n        switch (tokens[consumed][0]) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Input:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.IOModifier.INPUT;\n                break;\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Output:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.IOModifier.OUTPUT;\n                break;\n            default:\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"unsupported IO modifier\");\n        }\n        consumed++;\n        const [classicalDeclaration, typeConsumed] = this.classicalDeclaration(tokens.slice(consumed));\n        consumed += typeConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.IODeclaration(modifier, classicalDeclaration), consumed];\n    }\n    /**\n     * Parses a unary expression.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the parsed Expression and the number of tokens consumed.\n     */\n    unaryExpression(tokens) {\n        const token = tokens[0];\n        let consumed = 1;\n        switch (token[0]) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger: {\n                if (this.isImaginary(tokens[consumed])) {\n                    return [\n                        new _ast__WEBPACK_IMPORTED_MODULE_3__.ImaginaryLiteral(`${token[1].toString()}im`),\n                        consumed + 1,\n                    ];\n                }\n                else if (this.isDuration(tokens.slice(consumed))) {\n                    return [\n                        new _ast__WEBPACK_IMPORTED_MODULE_3__.DurationLiteral(Number(token[1]), tokens[consumed][1].toString()),\n                        consumed + 1,\n                    ];\n                }\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.IntegerLiteral(Number(token[1])), consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Integer: {\n                if (this.isImaginary(tokens[consumed])) {\n                    return [\n                        new _ast__WEBPACK_IMPORTED_MODULE_3__.ImaginaryLiteral(`${token[1].toString()}im`),\n                        consumed + 1,\n                    ];\n                }\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.IntegerLiteral(token[1].toString()), consumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryLiteral:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.OctalLiteral:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.HexLiteral:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.ScientificNotation:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.NumericLiteral(token[1].toString()), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Real:\n                if (this.isImaginary(tokens[consumed])) {\n                    return [\n                        new _ast__WEBPACK_IMPORTED_MODULE_3__.ImaginaryLiteral(`${token[1].toString()}im`),\n                        consumed + 1,\n                    ];\n                }\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.FloatLiteral(Number(token[1])), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.BoolLiteral:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.BooleanLiteral(token[1] === \"true\"), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arccos:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arcsin:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arctan:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Cos:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sin:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Tan:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ceiling:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Exp:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Floor:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Log:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Mod:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Popcount:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Pow:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sqrt:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotr:\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotl: {\n                const [funcExpr, funcConsumed] = this.unaryExpression(tokens.slice(1));\n                consumed += funcConsumed;\n                return [\n                    this.createMathOrTrigFunction(tokens[0][0], funcExpr),\n                    consumed,\n                ];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id:\n                // Handle array identifiers, identifiers, and subscripted identifiers\n                if (this.matchNext(tokens.slice(1), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n                    if (this.isArray(tokens)) {\n                        const [arrayAccess, arrayAccessConsumed] = this.parseArrayAccess(tokens);\n                        return [arrayAccess, arrayAccessConsumed];\n                    }\n                    else {\n                        const identifier = new _ast__WEBPACK_IMPORTED_MODULE_3__.Identifier(token[1].toString());\n                        const [subscript, subscriptConsumed] = this.parseSubscript(tokens.slice(1));\n                        consumed += subscriptConsumed;\n                        return [\n                            new _ast__WEBPACK_IMPORTED_MODULE_3__.SubscriptedIdentifier(identifier.name, subscript),\n                            consumed,\n                        ];\n                    }\n                }\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Identifier(token[1].toString()), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Pi:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Pi(), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Euler:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Euler(), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Tau:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Tau(), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.String:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.BitstringLiteral(token[1].toString()), consumed];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.DurationOf:\n                return this.durationOf(tokens);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.SizeOf:\n                return this.sizeOf(tokens);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp: {\n                const [expr, exprConsumed] = this.unaryExpression(tokens.slice(1));\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Unary(token[1], expr), consumed + exprConsumed];\n            }\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen: {\n                let i = 1;\n                let parenCount = 1;\n                while (parenCount > 0 && i < tokens.length) {\n                    if (tokens[i][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen) {\n                        parenCount++;\n                    }\n                    else if (tokens[i][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen) {\n                        parenCount--;\n                    }\n                    else if (parenCount === 1 && tokens[i][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma) {\n                        return this.parseParameters(tokens);\n                    }\n                    i++;\n                }\n                const [expr, exprConsumed] = this.binaryExpression(tokens.slice(1));\n                consumed += exprConsumed;\n                if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis\");\n                }\n                consumed++;\n                return [expr, consumed];\n            }\n            default:\n                if (isTypeToken(token[0])) {\n                    return this.parseTypeCast(tokens);\n                }\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, token, this.index, \"invalid expression\");\n        }\n    }\n    /**\n     * Parses a binary expression.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the parsed Expression and the number of tokens consumed.\n     */\n    binaryExpression(tokens) {\n        const unaryExpr = this.unaryExpression(tokens);\n        let leftExpr = unaryExpr[0];\n        const leftConsumed = unaryExpr[1];\n        let consumed = leftConsumed;\n        while (consumed < tokens.length) {\n            const token = tokens[consumed];\n            if (token[0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp ||\n                token[0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.ArithmeticOp ||\n                (token[0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp && token[1] === \"-\")) {\n                consumed++;\n                const [rightExpr, rightConsumed] = this.unaryExpression(tokens.slice(consumed));\n                if (token[0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.BinaryOp) {\n                    leftExpr = new _ast__WEBPACK_IMPORTED_MODULE_3__.Binary(token[1], leftExpr, rightExpr);\n                }\n                else if (token[0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.UnaryOp && token[1] === \"-\") {\n                    leftExpr = new _ast__WEBPACK_IMPORTED_MODULE_3__.Arithmetic(_ast__WEBPACK_IMPORTED_MODULE_3__.ArithmeticOp.MINUS, leftExpr, rightExpr);\n                }\n                else {\n                    leftExpr = new _ast__WEBPACK_IMPORTED_MODULE_3__.Arithmetic(token[1], leftExpr, rightExpr);\n                }\n                consumed += rightConsumed;\n            }\n            else {\n                break;\n            }\n        }\n        return [leftExpr, consumed];\n    }\n    /**\n     * Parses an assignment statement.\n     * @param tokens - Remaining tokens to parse.\n     * @return The parsed AssignmentStatement AstNode and the number of consumed tokens.\n     */\n    assignment(tokens) {\n        let consumed = 0;\n        const [lhs, lhsConsumed] = this.unaryExpression(tokens);\n        consumed += lhsConsumed;\n        // Handle compound assignments\n        const operatorToken = tokens[consumed][0];\n        if (operatorToken === _token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp ||\n            operatorToken === _token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp) {\n            consumed++;\n            const operator = tokens[lhsConsumed][1].toString();\n            const [rhs, rhsConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += rhsConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n            }\n            consumed++;\n            let op;\n            let expression;\n            switch (operatorToken) {\n                case _token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundArithmeticOp:\n                    op = operator.slice(0, -1);\n                    expression = new _ast__WEBPACK_IMPORTED_MODULE_3__.Arithmetic(op, lhs, rhs);\n                    break;\n                case _token__WEBPACK_IMPORTED_MODULE_0__.Token.CompoundBinaryOp:\n                    op = operator.slice(0, -1);\n                    expression = new _ast__WEBPACK_IMPORTED_MODULE_3__.Binary(op, lhs, rhs);\n                    break;\n                default:\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"invalid compound operator\");\n            }\n            return [\n                new _ast__WEBPACK_IMPORTED_MODULE_3__.AssignmentStatement(lhs, expression),\n                consumed,\n            ];\n        }\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt])) {\n            consumed++;\n        }\n        else {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected `=` in assignment statement\");\n        }\n        let rhs;\n        if (this.isSubroutineCall(tokens.slice(consumed))) {\n            const [subroutineCall, subroutineCallConsumed] = this.subroutineCall(tokens.slice(consumed));\n            rhs = subroutineCall;\n            consumed += subroutineCallConsumed;\n        }\n        else {\n            const [rhsExpression, rhsConsumed] = this.binaryExpression(tokens.slice(consumed));\n            rhs = rhsExpression;\n            consumed += rhsConsumed;\n        }\n        // if (!this.matchNext(tokens.slice(consumed), [Token.Semicolon])) {\n        //   throwParserError(\n        //     MissingSemicolonError,\n        //     tokens[consumed],\n        //     this.index + consumed,\n        //     \"expected semicolon\",\n        //   );\n        // }\n        // consumed++;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.AssignmentStatement(lhs, rhs),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a quantum declaration.\n     * @param tokens - Tokens to parse.\n     * @return A QuantumDeclaration node and the number of tokens consumed.\n     */\n    quantumDeclaration(tokens) {\n        let consumed = 1;\n        const isQubit = tokens[0][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Qubit;\n        let size = null;\n        // Qubit\n        if (isQubit) {\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n                consumed++;\n                const [sizeExpr, sizeConsumed] = this.binaryExpression(tokens.slice(consumed));\n                consumed += sizeConsumed;\n                size = sizeExpr;\n                if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] for qubit declaration size\");\n                }\n                consumed++;\n            }\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadQregError, tokens[consumed], this.index + consumed, \"expected identifier for quantum declaration\");\n        }\n        const [identifier, idConsumed] = this.unaryExpression(tokens.slice(consumed, consumed + 1));\n        consumed += idConsumed;\n        // Qreg\n        if (!isQubit && this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            consumed++;\n            const [sizeExpr, sizeConsumed] = this.binaryExpression(tokens.slice(consumed));\n            size = sizeExpr;\n            consumed += sizeConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] for quantum register size\");\n            }\n            consumed++;\n        }\n        if (!(this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon]) ||\n            this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma]) ||\n            this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen]))) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadQregError, tokens[consumed], this.index + consumed, \"expected semicolon, comma, or closing parenthesis after quantum register declaration\");\n        }\n        // Only consume semicolon, if paren or comma that token will be handled in calling function\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            consumed++;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumDeclaration(identifier, size), consumed];\n    }\n    /**\n     * Parses a measure statement.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the QuantumMeasurementAssignment or QuantumMeasurement and the number of tokens consumed.\n     */\n    measureStatement(tokens) {\n        let consumed = 0;\n        // Legacy syntax: measure qubit|qubit[] -> bit|bit[];\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure])) {\n            consumed++;\n            const qubitIdentifiers = [];\n            while (!(this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow]) ||\n                this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon]))) {\n                const [identifier, idConsumed] = this.unaryExpression(tokens.slice(consumed));\n                qubitIdentifiers.push(identifier);\n                consumed += idConsumed;\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                    consumed++;\n                }\n                else if (!(this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow]) ||\n                    this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon]))) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadMeasurementError, tokens[consumed], this.index + consumed, \"expected comma or arrow in measurement statement\");\n                }\n            }\n            const measurement = new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumMeasurement(qubitIdentifiers);\n            // If there's an arrow, build a QuantumMeasurementAssignment\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow])) {\n                consumed++;\n                const [identifier, idConsumed] = this.unaryExpression(tokens.slice(consumed));\n                const classicalBit = identifier;\n                consumed += idConsumed;\n                if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed);\n                }\n                consumed++;\n                return [\n                    new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumMeasurementAssignment(classicalBit, measurement),\n                    consumed,\n                ];\n            }\n            else {\n                if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed);\n                }\n                consumed++;\n                return [measurement, consumed];\n            }\n        }\n        // New syntax: bit|bit[] = measure qubit|qreg;\n        else {\n            const [leftIdentifier, leftIdConsumed] = this.unaryExpression(tokens.slice(consumed));\n            const classicalBit = leftIdentifier;\n            consumed += leftIdConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadMeasurementError, tokens[consumed], this.index + consumed, \"expected `=` in measurement assignment\");\n            }\n            consumed++;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadMeasurementError, tokens[consumed], this.index + consumed, \"expected `measure` keyword in measurement assignment\");\n            }\n            consumed++;\n            const [rightIdentifier, rightIdConsumed] = this.unaryExpression(tokens.slice(consumed));\n            const qubitIdentifier = rightIdentifier;\n            consumed += rightIdConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed);\n            }\n            consumed++;\n            const measurement = new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumMeasurement([\n                qubitIdentifier,\n            ]);\n            return [\n                new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumMeasurementAssignment(classicalBit, measurement),\n                consumed,\n            ];\n        }\n    }\n    /**\n     * Parses a subroutine return statement.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the SubroutineDefinition and the number of tokens consumed.\n     */\n    returnStatement(tokens) {\n        let consumed = 1;\n        let expression = null;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            const [expr, exprConsumed] = this.parseNode(tokens.slice(consumed));\n            expression = expr;\n            consumed += exprConsumed;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ReturnStatement(expression), consumed];\n    }\n    /**\n     * Parses an extern signature.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the ExternSignature and the number of tokens consumed.\n     */\n    externSignature(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadSubroutineError, tokens[consumed], this.index + consumed, \"expected identifier following extern keyword\");\n        }\n        const [identifier, identifierConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += identifierConsumed;\n        let externParams = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            const [params, paramsConsumed] = this.parseParameters(tokens.slice(consumed));\n            externParams = params;\n            consumed += paramsConsumed;\n        }\n        let returnType = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow])) {\n            consumed++;\n            const [type, typeConsumed] = this.parseClassicalType(tokens.slice(consumed));\n            returnType = type;\n            consumed += typeConsumed;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n        }\n        consumed++;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.ExternSignature(identifier, externParams, returnType),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a subroutine definition.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the SubroutineDefinition and the number of tokens consumed.\n     */\n    subroutineDefinition(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadSubroutineError, tokens[consumed], this.index + consumed, \"expected subroutine name\");\n        }\n        const [name, nameConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += nameConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis for subroutine definition\");\n        }\n        const [params, paramsConsumed] = this.parseParameters(tokens.slice(consumed));\n        consumed += paramsConsumed;\n        let returnType = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Arrow])) {\n            consumed++;\n            const [type, typeConsumed] = this.parseClassicalType(tokens.slice(consumed));\n            returnType = type;\n            consumed += typeConsumed;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening brace for subroutine body\");\n        }\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.SubroutineDefinition(name, body, params, returnType),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a subroutine call.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the SubroutineCall and the number of tokens consumed.\n     */\n    subroutineCall(tokens) {\n        let consumed = 0;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadSubroutineError, tokens[consumed], this.index + consumed, \"expected subroutine name\");\n        }\n        const [subroutineName, subroutineNameConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += subroutineNameConsumed;\n        let callParams = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            const [params, paramsConsumed] = this.parseParameters(tokens.slice(consumed));\n            callParams = params;\n            consumed += paramsConsumed;\n        }\n        // if (!this.matchNext(tokens.slice(consumed), [Token.Semicolon])) {\n        //   throwParserError(\n        //     MissingSemicolonError,\n        //     tokens[consumed],\n        //     this.index + consumed,\n        //     \"expected semicolon after subroutine call\",\n        //   );\n        // }\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            consumed++;\n        }\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.SubroutineCall(subroutineName, callParams),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a quantum gate definition.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the QuantumGateDefinition and the number of tokens consumed.\n     */\n    quantumGateDefinition(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected gate name\");\n        }\n        const [name, nameConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += nameConsumed;\n        // Parse optional parameters\n        const [params, paramsConsumed] = this.parseParameters(tokens.slice(consumed));\n        consumed += paramsConsumed;\n        // Parse qubits\n        const qubits = [];\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected qubit argument\");\n            }\n            const [qubit, qubitConsumed] = this.unaryExpression(tokens.slice(consumed));\n            qubits.push(qubit);\n            consumed += qubitConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                consumed++;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected comma or opening brace for gate body\");\n            }\n        }\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateDefinition(name, params, qubits, body),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a quantum gate call.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the QuantumGateCall and the number of tokens consumed.\n     */\n    quantumGateCall(tokens) {\n        let consumed = 0;\n        const modifiers = [];\n        // Parse modifier(s)\n        while (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Ctrl]) ||\n            this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NegCtrl]) ||\n            this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Inv]) ||\n            this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.PowM])) {\n            const [modifier, modifierConsumed] = this.parseQuantumGateModifier(tokens.slice(consumed));\n            modifiers.push(modifier);\n            consumed += modifierConsumed;\n        }\n        // Parse gate name\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected gate name\");\n        }\n        const [gateName, gateNameConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += gateNameConsumed;\n        let callParams = null;\n        // Parse optional parameters\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            const [params, paramsConsumed] = this.parseParameters(tokens.slice(consumed));\n            callParams = params;\n            consumed += paramsConsumed;\n        }\n        // Parse qubit arguments\n        const [qubits, qubitsConsumed] = this.parseQubitList(tokens.slice(consumed));\n        consumed += qubitsConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n        }\n        consumed++;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateCall(gateName, qubits, callParams, modifiers),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a list of qubits.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the list of qubits and the number of tokens consumed.\n     */\n    parseQubitList(tokens) {\n        let consumed = 0;\n        const qubits = [];\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Dollar, _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger])) {\n                const [hardwareQubit, hardwareQubitConsumed] = this.parseHardwareQubit(tokens.slice(consumed));\n                qubits.push(hardwareQubit);\n                consumed += hardwareQubitConsumed;\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                    consumed++;\n                }\n                continue;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected qubit argument\");\n            }\n            const [qubit, qubitConsumed] = this.unaryExpression(tokens.slice(consumed));\n            qubits.push(qubit);\n            consumed += qubitConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                consumed++;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                break;\n            }\n        }\n        return [qubits, consumed];\n    }\n    /**\n     * Parses a hardware qubit.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the HardwareQubit and the number of tokens consumed.\n     */\n    parseHardwareQubit(tokens) {\n        let consumed = 0;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Dollar])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected dollar sign for hardware qubit\");\n        }\n        consumed++;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected non-negative integer for hardware qubit\");\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.HardwareQubit(Number(tokens[consumed][1])), consumed + 1];\n    }\n    /**\n     * Parses a gate modifier.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the gate modifier and the number of tokens consumed.\n     */\n    parseQuantumGateModifier(tokens) {\n        let consumed = 1;\n        const modifierToken = tokens[0][0];\n        let modifier;\n        let argument = null;\n        switch (modifierToken) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ctrl:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateModifierName.CTRL;\n                break;\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.NegCtrl:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateModifierName.NRGCTRL;\n                break;\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Inv:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateModifierName.INV;\n                break;\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.PowM:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateModifierName.POW;\n                break;\n            default:\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[0], this.index, \"invalid gate modifier\");\n        }\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            consumed++;\n            const [arg, argConsumed] = this.binaryExpression(tokens.slice(consumed));\n            argument = arg;\n            consumed += argConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected closing parenthesis after gate modifier argument\");\n            }\n            consumed++;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.At])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadGateError, tokens[consumed], this.index + consumed, \"expected `@` symbol after gate modifier\");\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumGateModifier(modifier, argument), consumed];\n    }\n    /**\n     * Parses a set of parameters.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the Parameters and the number of tokens consumed.\n     */\n    parseParameters(tokens) {\n        let consumed = 0;\n        const args = [];\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            consumed++;\n            while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Qubit])) {\n                    const [qubitParam, qubitConsumed] = this.parseNode(tokens.slice(consumed));\n                    args.push(qubitParam);\n                    consumed += qubitConsumed;\n                }\n                else if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Bit]) ||\n                    this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.CReg])) {\n                    const [bitParam, bitConsumed] = this.parseNode(tokens.slice(consumed));\n                    args.push(bitParam);\n                    consumed += bitConsumed;\n                }\n                else if (isTypeToken(tokens[consumed][0])) {\n                    const [param, paramConsumed] = this.classicalDeclaration(tokens.slice(consumed));\n                    args.push(param);\n                    consumed += paramConsumed;\n                }\n                else if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.ReadOnly]) ||\n                    this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Mutable])) {\n                    const [arrayRef, arrayRefConsumed] = this.parseArrayReference(tokens.slice(consumed));\n                    args.push(arrayRef);\n                    consumed += arrayRefConsumed;\n                }\n                else {\n                    const [param, paramConsumed] = this.binaryExpression(tokens.slice(consumed));\n                    args.push(param);\n                    consumed += paramConsumed;\n                }\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                    consumed++;\n                }\n                else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadParameterError, tokens[consumed], this.index + consumed, \"expected comma or closing parenthesis in parameter list\");\n                }\n            }\n            consumed++;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Parameters(args), consumed];\n    }\n    /**\n     * Parses an array reference.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the ArrayReference and the number of tokens consumed.\n     */\n    parseArrayReference(tokens) {\n        let consumed = 0;\n        let modifier;\n        switch (tokens[consumed][0]) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Mutable:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayReferenceModifier.MUTABLE;\n                break;\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.ReadOnly:\n                modifier = _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayReferenceModifier.READONLY;\n                break;\n            default:\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"unsupported array reference modifier\");\n        }\n        consumed++;\n        const [arrayNode, arrayConsumed] = this.arrayDeclaration(tokens.slice(consumed));\n        consumed += arrayConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayReference(arrayNode, modifier), consumed];\n    }\n    /**\n     * Parses an alias statement.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the AliasStatement and the number of tokens consumed.\n     */\n    aliasStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected identifier for alias statement\");\n        }\n        const [identifier, identifierConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += identifierConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected `=` symbol following identifier for alias statement\");\n        }\n        consumed++;\n        const [aliasExpression, aliasExpressionConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += aliasExpressionConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n        }\n        consumed++;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.AliasStatement(identifier, aliasExpression),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a quantum reset.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the QuantumReset and the number of tokens consumed.\n     */\n    resetStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadQuantumInstructionError, tokens[consumed], this.index + consumed, \"expected identifier after reset keyword\");\n        }\n        const [idNode, idConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += idConsumed;\n        let id = null;\n        if (idNode instanceof _ast__WEBPACK_IMPORTED_MODULE_3__.SubscriptedIdentifier) {\n            id = idNode;\n        }\n        else {\n            id = idNode;\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumReset(id), consumed];\n    }\n    /**\n     * Parses a subscript expression as a Range.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the parsed Expression or Range and the number of tokens consumed.\n     */\n    parseSubscript(tokens) {\n        let consumed = 1;\n        let start = null;\n        let step = new _ast__WEBPACK_IMPORTED_MODULE_3__.IntegerLiteral(1);\n        let stop = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            const [indexSet, indexSetConsumed] = this.parseIndexSet(tokens.slice(consumed));\n            consumed += indexSetConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing curly bracket } for index set\");\n            }\n            consumed++;\n            return [indexSet, consumed];\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon])) {\n            // Parse start\n            const [startExpr, startConsumed] = this.binaryExpression(tokens.slice(consumed));\n            start = startExpr;\n            consumed += startConsumed;\n        }\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n            return [start, consumed + 1];\n        }\n        // Check for colon after start\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected colon in range expression\");\n        }\n        consumed++;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n            const [expr, exprConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += exprConsumed;\n            // Check if its a step or stop\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon])) {\n                step = expr;\n                consumed++;\n                // Parse stop\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected stop value in range expression\");\n                }\n                const [stopExpr, stopConsumed] = this.binaryExpression(tokens.slice(consumed));\n                stop = stopExpr;\n                consumed += stopConsumed;\n            }\n            else {\n                stop = expr;\n            }\n        }\n        // Check for closing square bracket\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] for range expression\");\n        }\n        consumed++;\n        // Validate that both start and stop are provided\n        if (start === null || stop === null) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[0], this.index, \"both start and stop must be provided in range expression\");\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Range(start, stop, step), consumed];\n    }\n    /**\n     * Parses a type cast expression.\n     * @param tokens - Remaining tokens to parse.\n     * @return A tuple containing the parsed Cast Expression and the number of tokens consumed.\n     */\n    parseTypeCast(tokens) {\n        let consumed = 1;\n        let widthExpr = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            consumed++;\n            const [width, widthConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += widthConsumed;\n            widthExpr = width;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"missing closing bracket ] for type designator\");\n            }\n            consumed++;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[0], this.index, \"expected opening parenthesis ( for type cast\");\n        }\n        consumed++;\n        const [castExpr, castConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += castConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[0], this.index, \"expected closing parenthesis ) for type cast\");\n        }\n        consumed++;\n        const castType = this.createClassicalType(tokens[0][0], widthExpr);\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Cast(castType, castExpr), consumed];\n    }\n    /**\n     * Parses a branching condition (if) statement.\n     * @param tokens - Tokens to parse.\n     * @return A BranchingStatement node representing the if statement and the number of tokens consumed.\n     */\n    ifStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis after if\");\n        }\n        consumed++;\n        const [condition, conditionConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += conditionConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis after if statement condition\");\n        }\n        consumed++;\n        const [trueBody, trueBodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += trueBodyConsumed;\n        let falseBody = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Else])) {\n            consumed++;\n            const [elseBody, elseBodyConsumed] = this.programBlock(tokens.slice(consumed));\n            falseBody = elseBody;\n            consumed += elseBodyConsumed;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.BranchingStatement(condition, trueBody, falseBody), consumed];\n    }\n    /**\n     * Parses a for loop.\n     * @param tokens - Tokens to parse.\n     * @return A ForLoopStatement node and the number of tokens consumed.\n     */\n    forLoopStatement(tokens) {\n        let consumed = 1;\n        // Parse the type of the loop variable\n        const [loopVarType, loopVarTypeConsumed] = this.parseClassicalType(tokens.slice(consumed));\n        consumed += loopVarTypeConsumed;\n        // Expect an identifier (loop variable)\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadLoopError, tokens[consumed], this.index + consumed, \"expected identifier for loop variable\");\n        }\n        const [loopVar, loopVarConsumed] = this.unaryExpression(tokens.slice(consumed));\n        if (!(loopVar instanceof _ast__WEBPACK_IMPORTED_MODULE_3__.Identifier)) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadLoopError, tokens[consumed], this.index + consumed, \"expected identifier for loop variable\");\n        }\n        consumed += loopVarConsumed;\n        // Expect `in` keyword\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.In])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadLoopError, tokens[consumed], this.index + consumed, \"expected `in` keyword in for loop\");\n        }\n        consumed++;\n        const [indexSet, indexSetConsumed] = this.parseSetDeclaration(tokens.slice(consumed));\n        consumed += indexSetConsumed;\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.ForLoopStatement(indexSet, loopVarType, loopVar, body),\n            consumed,\n        ];\n    }\n    /**\n     * Parses a while loop.\n     * @param tokens - Tokens to parse.\n     * @return A ForLoopStatement node and the number of tokens consumed.\n     */\n    whileLoopStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis after while keyword\");\n        }\n        consumed++;\n        const [condition, conditionConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += conditionConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis after while loop condition\");\n        }\n        consumed++;\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.WhileLoopStatement(condition, body), consumed];\n    }\n    /**\n     * Parses a barrier statement.\n     * @param tokens - Tokens to parse.\n     * @return An QuantumBarrier node and the number of tokens consumed.\n     */\n    barrier(tokens) {\n        let consumed = 1;\n        const [qubits, qubitsConsumed] = this.parseQubitList(tokens.slice(consumed));\n        consumed += qubitsConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumBarrier(qubits), consumed];\n    }\n    /**\n     * Parses a box statement.\n     * @param tokens - Tokens to parse.\n     * @return An BoxDefinition node and the number of tokens consumed.\n     */\n    box(tokens) {\n        let consumed = 1;\n        let designator = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            consumed++;\n            const [desginatorNode, designatorConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += designatorConsumed;\n            designator = desginatorNode;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing ] bracket following box designator\");\n            }\n            consumed++;\n        }\n        const [scope, scopeConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += scopeConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.BoxDefinition(scope, designator), consumed];\n    }\n    /**\n     * Parses an array statement.\n     * @param tokens - Tokens to parse.\n     * @return An ArrayDeclaration node and the number of tokens consumed.\n     */\n    arrayDeclaration(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected [ after array keyword\");\n        }\n        consumed++;\n        const [baseType, baseTypeConsumed] = this.parseClassicalType(tokens.slice(consumed));\n        consumed += baseTypeConsumed;\n        let dimensions = [];\n        while (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n            consumed++;\n            if (this.matchNext(tokens.slice(consumed), [\n                _token__WEBPACK_IMPORTED_MODULE_0__.Token.Dim,\n                _token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt,\n                _token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger,\n            ])) {\n                consumed += 2;\n                dimensions = Number(tokens[consumed][1]);\n                consumed++;\n                break;\n            }\n            const [dimension, dimensionConsumed] = this.binaryExpression(tokens.slice(consumed));\n            dimensions.push(dimension);\n            consumed += dimensionConsumed;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected ] after array type declaration\");\n        }\n        consumed++;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected identifier for array declaration\");\n        }\n        const [identifier, identifierConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += identifierConsumed;\n        let initializer = null;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt])) {\n            consumed++;\n            const [parsedInitializer, initializerConsumed] = this.parseArrayInitializer(tokens.slice(consumed));\n            initializer = parsedInitializer;\n            consumed += initializerConsumed;\n        }\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            consumed++;\n        }\n        return [\n            new _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayDeclaration(baseType, dimensions, identifier, initializer),\n            consumed,\n        ];\n    }\n    /**\n     * Parses an array initializer.\n     * @param tokens - Tokens to parse.\n     * @return An ArrayInitializer node and the number of tokens consumed.\n     */\n    parseArrayInitializer(tokens) {\n        let consumed = 0;\n        if (!this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            const [expr, exprConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += exprConsumed;\n            return [expr, consumed];\n        }\n        consumed++;\n        const values = [];\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n                const [subInitializer, subConsumed] = this.parseArrayInitializer(tokens.slice(consumed));\n                values.push(subInitializer);\n                consumed += subConsumed;\n            }\n            else {\n                const [expr, exprConsumed] = this.binaryExpression(tokens.slice(consumed));\n                values.push(expr);\n                consumed += exprConsumed;\n            }\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                consumed++;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected comma or } in array initializer\");\n            }\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayInitializer(values), consumed];\n    }\n    /**\n     * Parses an array access.\n     * @param tokens - Tokens to parse.\n     * @return An ArrayAccess  node and the number of tokens consumed.\n     */\n    parseArrayAccess(tokens) {\n        let consumed = 0;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected identifier for array access\");\n        }\n        const identifier = new _ast__WEBPACK_IMPORTED_MODULE_3__.Identifier(tokens[0][1].toString());\n        consumed++;\n        let indices = [];\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            consumed++;\n            while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                const [index1, index1Consumed] = this.binaryExpression(tokens.slice(consumed));\n                indices.push(index1);\n                consumed += index1Consumed;\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                    consumed++;\n                }\n                else if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon])) {\n                    consumed++;\n                    let step = new _ast__WEBPACK_IMPORTED_MODULE_3__.IntegerLiteral(1);\n                    let stop;\n                    const [index2, index2Consumed] = this.binaryExpression(tokens.slice(consumed));\n                    consumed += index2Consumed;\n                    if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Colon])) {\n                        consumed++;\n                        const [index3, index3Consumed] = this.binaryExpression(tokens.slice(consumed));\n                        consumed += index3Consumed;\n                        stop = index3;\n                        step = index2;\n                    }\n                    else {\n                        stop = index2;\n                    }\n                    indices = new _ast__WEBPACK_IMPORTED_MODULE_3__.Range(index1, stop, step);\n                    break;\n                }\n                else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected comma or closing bracket for array access\");\n                }\n            }\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] for array access\");\n            }\n            consumed++;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ArrayAccess(identifier, indices), consumed];\n    }\n    /**\n     * Parses a switch statement.\n     * @param tokens - Tokens to parse.\n     * @return A SwitchStatement node and the number of tokens consumed.\n     */\n    switchStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis after switch keywork\");\n        }\n        consumed++;\n        const [controlExpr, controlExprConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += controlExprConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis after switch control expression\");\n        }\n        consumed++;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening curly brace for switch body\");\n        }\n        consumed++;\n        const cases = [];\n        let defaultCase = null;\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Case])) {\n                const [caseStmt, caseConsumed] = this.parseCaseStatement(tokens.slice(consumed));\n                cases.push(caseStmt);\n                consumed += caseConsumed;\n            }\n            else if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Default])) {\n                if (defaultCase !== null) {\n                    throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"multiple default statements not allowed in a swtich statement\");\n                }\n                const [defaultStmt, defaultConsumed] = this.parseDefaultStatement(tokens.slice(consumed));\n                defaultCase = defaultStmt;\n                consumed += defaultConsumed;\n            }\n            else {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected case or default statement in switch body\");\n            }\n        }\n        if (cases.length === 0) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"swtich statement must contain at least one case statement\");\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.SwitchStatement(controlExpr, cases, defaultCase), consumed];\n    }\n    /**\n     * Parses a case statement.\n     * @param tokens - Tokens to parse.\n     * @return A CaseStatement node and the number of tokens consumed.\n     */\n    parseCaseStatement(tokens) {\n        let consumed = 1;\n        const labels = [];\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            const [label, labelConsumed] = this.binaryExpression(tokens.slice(consumed));\n            labels.push(label);\n            consumed += labelConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                consumed++;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected comma or opening brace in case statement\");\n            }\n        }\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.CaseStatement(labels, body), consumed];\n    }\n    /**\n     * Parses a default statement.\n     * @param tokens - Tokens to parse.\n     * @return A DefaultStatement node and the number of tokens consumed.\n     */\n    parseDefaultStatement(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expecting opening brace for default statement\");\n        }\n        const [body, bodyConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += bodyConsumed;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.DefaultStatement(body), consumed];\n    }\n    /**\n     * Parses a delay statement.\n     * @param tokens - Tokens to parse.\n     * @return A QuantumDelay node and the number of tokens consumed.\n     */\n    delay(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening bracket [ after delay keyword\");\n        }\n        consumed++;\n        const [duration, durationConsumed] = this.binaryExpression(tokens.slice(consumed));\n        consumed += durationConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] after delay designator\");\n        }\n        consumed++;\n        const [qubits, qubitsConsumed] = this.parseQubitList(tokens.slice(consumed));\n        consumed += qubitsConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingSemicolonError, tokens[consumed], this.index + consumed, \"expected semicolon\");\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.QuantumDelay(duration, qubits), consumed];\n    }\n    /**\n     * Parses a durationof function call.\n     * @param tokens - Tokens to parse.\n     * @return A DurationOf node and the number of tokens consumed.\n     */\n    durationOf(tokens) {\n        let consumed = 1;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis after durationof\");\n        }\n        consumed++;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening brace for durationof scope\");\n        }\n        const [scope, scopeConsumed] = this.programBlock(tokens.slice(consumed));\n        consumed += scopeConsumed;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis after durationof scope\");\n        }\n        consumed++;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            consumed++;\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.DurationOf(scope), consumed];\n    }\n    /**\n     * Parses a sizeof function call.\n     * @param tokens - Tokens to parse.\n     * @return A SizeOf node and the number of tokens consumed.\n     */\n    sizeOf(tokens) {\n        let consumed = 1;\n        let dimensions = null;\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected opening parenthesis for sizeof function call\");\n        }\n        consumed++;\n        const [arrayId, arrayIdConsumed] = this.unaryExpression(tokens.slice(consumed));\n        consumed += arrayIdConsumed;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n            consumed++;\n            const [dim, dimConsumed] = this.binaryExpression(tokens.slice(consumed));\n            consumed += dimConsumed;\n            dimensions = dim;\n        }\n        if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RParen])) {\n            throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing parenthesis for sizeof function call\");\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.SizeOf(arrayId, dimensions), consumed];\n    }\n    /**\n     * Parses a program block.\n     * @param tokens - Tokens to parse.\n     * @return A ProgramBlock node and the number of tokens consumed.\n     */\n    programBlock(tokens) {\n        const statements = [];\n        let consumed = 0;\n        let braceCount = 0;\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            consumed++;\n            braceCount++;\n            while (braceCount > 0 && consumed < tokens.length) {\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n                    braceCount++;\n                }\n                else if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                    braceCount--;\n                }\n                if (braceCount === 0) {\n                    break;\n                }\n                const [node, nodeConsumed] = this.parseNode(tokens.slice(consumed));\n                if (node && node.length > 0) {\n                    statements.push(node[0]);\n                }\n                consumed += nodeConsumed;\n                if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                    consumed++;\n                }\n            }\n            if (braceCount !== 0) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"mismatched curly braces in program block\");\n            }\n            consumed++;\n        }\n        else {\n            const [node, nodeConsumed] = this.parseNode(tokens.slice(consumed));\n            if (node && node.length > 0) {\n                statements.push(node[0]);\n            }\n            consumed += nodeConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n                consumed++;\n            }\n        }\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ProgramBlock(statements), consumed];\n    }\n    /**\n     * Parses an include statement.\n     * @param tokens - Tokens to parse.\n     * @return An Include node representing the include statement and the number of consumed tokens.\n     */\n    include(tokens) {\n        let filename;\n        const consumed = 1;\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.String, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            filename = tokens[consumed][1].toString();\n            return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Include(filename), consumed + 2];\n        }\n        throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadStringLiteralError, tokens[consumed], this.index + consumed, \"expected string literal following `include` keyword\");\n    }\n    /**\n     * Parses the version header and sets the parser version.\n     * @param tokens - Tokens to parse.\n     * @return A Version node representing the version statement and the number of consumed tokens.\n     */\n    versionHeader(tokens) {\n        let version;\n        let consumed = 1;\n        const slicedTokens = tokens.slice(consumed);\n        if (this.matchNext(slicedTokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.NNInteger, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            version = new _version__WEBPACK_IMPORTED_MODULE_1__.OpenQASMVersion(Number(tokens[0][1]));\n            if (!version.isVersion3()) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError, tokens[consumed], this.index + consumed, \"expected QASM version 3\");\n            }\n            consumed += 2;\n            return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Version(version), consumed];\n        }\n        else if (this.matchNext(slicedTokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Real, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon])) {\n            const versionSplits = tokens[consumed][1].toString().split(\".\");\n            version = new _version__WEBPACK_IMPORTED_MODULE_1__.OpenQASMVersion(Number(versionSplits[0]), Number(versionSplits[1]));\n            if (!version.isVersion3()) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError, tokens[consumed], this.index + consumed, \"expected QASM version 3\");\n            }\n            consumed += 2;\n            return [new _ast__WEBPACK_IMPORTED_MODULE_3__.Version(version), consumed];\n        }\n        throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.UnsupportedOpenQASMVersionError, tokens[consumed], this.index + consumed, \"expected QASM version 3\");\n    }\n    /**\n     * Parses a classical type.\n     * @param token - The token that represents the type.\n     * @return The ClassicalType and the number of consumed tokens.\n     */\n    parseClassicalType(tokens) {\n        let typeToken = tokens[0][0];\n        let consumed = 1;\n        let width;\n        let isComplex = false;\n        if (typeToken === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Complex) {\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen, _token__WEBPACK_IMPORTED_MODULE_0__.Token.Float])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadClassicalTypeError, tokens[consumed], this.index + consumed, \"expected float type for complex number\");\n            }\n            isComplex = true;\n            consumed += 2;\n            typeToken = tokens[2][0];\n        }\n        // Check if there's a width or size specification\n        if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            consumed++;\n            const [widthExpr, widthConsumed] = this.binaryExpression(tokens.slice(consumed));\n            width = widthExpr;\n            consumed += widthConsumed;\n            if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RSParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.MissingBraceError, tokens[consumed], this.index + consumed, \"expected closing bracket ] for type width\");\n            }\n            if (isComplex) {\n                consumed++;\n            }\n            consumed++;\n        }\n        const classicalType = this.createClassicalType(typeToken, width);\n        if (isComplex) {\n            return [new _ast__WEBPACK_IMPORTED_MODULE_3__.ComplexType(classicalType), consumed];\n        }\n        else {\n            return [classicalType, consumed];\n        }\n    }\n    /**\n     * Parses a set declaration.\n     * @param token - The token that represents the type.\n     * @return The resulting Identifier, IndexSet, or Range node and the number of consumed tokens.\n     */\n    parseSetDeclaration(tokens) {\n        if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Id])) {\n            const [identifier, identifierConsumed] = this.unaryExpression(tokens);\n            return [identifier, identifierConsumed];\n        }\n        else if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen])) {\n            return this.parseIndexSet(tokens);\n        }\n        else if (this.matchNext(tokens, [_token__WEBPACK_IMPORTED_MODULE_0__.Token.LSParen])) {\n            return this.parseSubscript(tokens);\n        }\n        else {\n            return this.binaryExpression(tokens);\n        }\n    }\n    /**\n     * Parses an index set.\n     * @param token - The token that represents the type.\n     * @return The resulting Identifier, IndexSet, or Range node and the number of consumed tokens.\n     */\n    parseIndexSet(tokens) {\n        let consumed = 1;\n        const values = [];\n        while (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n            const [expr, exprConsumed] = this.binaryExpression(tokens.slice(consumed));\n            values.push(expr);\n            consumed += exprConsumed;\n            if (this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.Comma])) {\n                consumed++;\n            }\n            else if (!this.matchNext(tokens.slice(consumed), [_token__WEBPACK_IMPORTED_MODULE_0__.Token.RCParen])) {\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, tokens[consumed], this.index + consumed, \"expected comma or closing curly brace in index set\");\n            }\n        }\n        consumed++;\n        return [new _ast__WEBPACK_IMPORTED_MODULE_3__.IndexSet(values), consumed];\n    }\n    /**\n     * Creates a classical type.\n     * @param token - The token that represents the type.\n     * @param width - The type's width or size, if applicable.\n     * @return The created ClassicalType.\n     */\n    createClassicalType(token, width) {\n        switch (token) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Int:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.IntType(width || this.machineIntSize);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.UInt:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.UIntType(width || this.machineIntSize);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Float:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.FloatType(width || this.machineFloatWidth);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bool:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.BoolType();\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bit:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.BitType(width);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.CReg:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.BitType(width);\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Stretch:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.StretchType();\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Duration:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.DurationType();\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Angle:\n                return new _ast__WEBPACK_IMPORTED_MODULE_3__.AngleType(width);\n            default:\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadClassicalTypeError, token, this.index, \"unsupported classical type\");\n        }\n    }\n    /**\n     * Creates a math or trigonometric function node.\n     * @param token - The token representing the function.\n     * @param expr - The expression to which the function is applied.\n     * @return The created MathFunction or TrigFunction node and the number of consumed tokens.\n     */\n    createMathOrTrigFunction(token, expr) {\n        switch (token) {\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arccos:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.ARCCOS, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arcsin:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.ARCSIN, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Arctan:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.ARCTAN, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Cos:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.COS, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sin:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.SIN, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Tan:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.TrigFunctionTypes.TAN, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Ceiling:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.CEILING, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Exp:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.EXP, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Floor:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.FLOOR, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Log:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.LOG, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Mod:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.MOD, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Popcount:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.POPCOUNT, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Pow:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.POW, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotl:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.ROTL, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Rotr:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.ROTR, expr), 1];\n            case _token__WEBPACK_IMPORTED_MODULE_0__.Token.Sqrt:\n                return [new _ast__WEBPACK_IMPORTED_MODULE_3__.MathFunction(_ast__WEBPACK_IMPORTED_MODULE_3__.MathFunctionTypes.SQRT, expr), 1];\n            default:\n                throwParserError(_errors__WEBPACK_IMPORTED_MODULE_2__.BadExpressionError, token, this.index, \"unsupported math or trig function\");\n        }\n    }\n    /** Checks whether a Bit token precedes a measurement statement. */\n    isMeasurement(tokens) {\n        let i = 0;\n        while (i < tokens.length - 1 &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt) {\n            i++;\n        }\n        return (tokens[i][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt && tokens[i + 1][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Measure);\n    }\n    /** Checks whether the statement is part of an assignment. */\n    isAssignment(tokens) {\n        let i = 0;\n        while (i < tokens.length - 1 &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.LCParen &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.Semicolon &&\n            tokens[i][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt) {\n            i++;\n        }\n        return tokens[i][0] === _token__WEBPACK_IMPORTED_MODULE_0__.Token.EqualsAssmt;\n    }\n    /** Checks whether an identifier is a quantum gate call. */\n    isQuantumGateCall(tokens) {\n        const gateName = tokens[0][1];\n        return (this.gates.has(gateName) ||\n            this.standardGates.has(gateName) ||\n            this.customGates.has(gateName));\n    }\n    /** Checks whether an identifier is a subroutine call. */\n    isSubroutineCall(tokens) {\n        const subroutineName = tokens[0][1];\n        return this.subroutines.has(subroutineName);\n    }\n    /** Checks whether a number is imaginary. */\n    isImaginary(token) {\n        if (token.length !== 2) {\n            return false;\n        }\n        return token[1].toString() === \"im\";\n    }\n    /** Checks whether an identifier is an array. */\n    isArray(tokens) {\n        if (tokens[0][0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id) {\n            return false;\n        }\n        const identifierName = tokens[0][1].toString();\n        return this.customArrays.has(identifierName);\n    }\n    /** Checks whether an identifier represents a duration literal unit. */\n    isDuration(tokens) {\n        const checkToken = tokens[0];\n        if (checkToken.length !== 2 || checkToken[0] !== _token__WEBPACK_IMPORTED_MODULE_0__.Token.Id) {\n            return false;\n        }\n        if (Object.values(_ast__WEBPACK_IMPORTED_MODULE_3__.DurationUnit).includes(checkToken[1].toString())) {\n            return true;\n        }\n        return false;\n    }\n    /** TODO : update this\n     * Validates whether a register or gate identifier.\n     * @param identifier - The identifier to validate.\n     * @return Boolean indicating successful validation or not.\n     */\n    validateIdentifier(identifier) {\n        const firstChar = identifier[0];\n        return /^[a-z]$/.test(firstChar);\n    }\n}\n/**\n * Checks if a token represents a type.\n */\nfunction isTypeToken(token) {\n    return (token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Float ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Int ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.UInt ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bool ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Duration ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Angle ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Stretch ||\n        token === _token__WEBPACK_IMPORTED_MODULE_0__.Token.Bit);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Parser);\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm3/parser.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/qasm3/token.js":
/*!**************************************************!*\
  !*** ./node_modules/qasm-ts/dist/qasm3/token.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   inverseLookup: () => (/* binding */ inverseLookup),\n/* harmony export */   lookup: () => (/* binding */ lookup),\n/* harmony export */   notParam: () => (/* binding */ notParam)\n/* harmony export */ });\n/**\n * OpenQASM 3.0 Token Definitions and Utilities\n *\n * This module defines all the token types used in OpenQASM 3.0 syntax, which\n * significantly extends OpenQASM 2.0 with modern programming language features.\n *\n * Major additions in OpenQASM 3.0:\n * - **Classical types**: int, uint, float, bool, bit, complex\n * - **Control flow**: if/else, for/while loops, switch/case\n * - **Functions**: def, return, extern declarations\n * - **Advanced features**: arrays, timing (delay, durationof), calibration\n * - **Quantum extensions**: qubit declarations, gate modifiers, hardware qubits\n *\n * @module\n *\n * @example OpenQASM 3.0 advanced tokens\n * ```typescript\n * import { lookup, Token } from './qasm3/token';\n *\n * console.log(lookup('qubit'));    // Token.Qubit\n * console.log(lookup('if'));       // Token.If\n * console.log(lookup('def'));      // Token.Def\n * console.log(lookup('complex'));  // Token.Complex\n * ```\n */\n/**\n * Enumeration of all OpenQASM 3.0 token types.\n *\n * Each token represents a specific syntactic element in OpenQASM 3.0 code.\n * The enum values correspond to different categories:\n * - Literals: NNInteger, Real, String, BoolLiteral\n * - Identifiers: Id\n * - Keywords: Qubit, Gate, Measure, If, For, While, etc.\n * - Operators: ArithmeticOp, BinaryOp, UnaryOp\n * - Punctuation: Semicolon, Comma, LParen, RParen, etc.\n * - Special: OpenQASM, Include, EndOfFile, Illegal\n */\nvar Token;\n(function (Token) {\n    // 0; invalid or unrecognized token\n    Token[Token[\"Illegal\"] = 0] = \"Illegal\";\n    // 1; end of file character\n    Token[Token[\"EndOfFile\"] = 1] = \"EndOfFile\";\n    // 2; real number (floating point)\n    Token[Token[\"Real\"] = 2] = \"Real\";\n    // 3; non-negative integer\n    Token[Token[\"NNInteger\"] = 3] = \"NNInteger\";\n    // 4; integer that supports underscores and negatives\n    Token[Token[\"Integer\"] = 4] = \"Integer\";\n    // 5; identifier (variables names, function names, etc.)\n    Token[Token[\"Id\"] = 5] = \"Id\";\n    // 6; OPENQASM version declaration\n    Token[Token[\"OpenQASM\"] = 6] = \"OpenQASM\";\n    // 7; include statement\n    Token[Token[\"Include\"] = 7] = \"Include\";\n    // 8; semicolon to terminate statements\n    Token[Token[\"Semicolon\"] = 8] = \"Semicolon\";\n    // 9; colon\n    Token[Token[\"Colon\"] = 9] = \"Colon\";\n    // 10; comma\n    Token[Token[\"Comma\"] = 10] = \"Comma\";\n    // 11; left paren (\n    Token[Token[\"LParen\"] = 11] = \"LParen\";\n    // 12; left square bracket [\n    Token[Token[\"LSParen\"] = 12] = \"LSParen\";\n    // 13; left curly brakcet {\n    Token[Token[\"LCParen\"] = 13] = \"LCParen\";\n    // 14; right paren )\n    Token[Token[\"RParen\"] = 14] = \"RParen\";\n    // 15; right square paren ]\n    Token[Token[\"RSParen\"] = 15] = \"RSParen\";\n    // 16; right curly bracket }\n    Token[Token[\"RCParen\"] = 16] = \"RCParen\";\n    // 17; assignment operator (=)\n    Token[Token[\"EqualsAssmt\"] = 17] = \"EqualsAssmt\";\n    // 18; arrow (->) used in measurement operations\n    Token[Token[\"Arrow\"] = 18] = \"Arrow\";\n    // 19; quantum register declaration\n    Token[Token[\"QReg\"] = 19] = \"QReg\";\n    // 20; quantum register declaration (functionally equivalent to QReg but for OpenQASM version 3)\n    Token[Token[\"Qubit\"] = 20] = \"Qubit\";\n    // 21; classical register declaration\n    Token[Token[\"CReg\"] = 21] = \"CReg\";\n    // 22; classical register declaration (functionally equivalent to Creg but for OpenQASM version 3)\n    Token[Token[\"Bit\"] = 22] = \"Bit\";\n    // 23; barrier operation\n    Token[Token[\"Barrier\"] = 23] = \"Barrier\";\n    // 24; gate declaration or application\n    Token[Token[\"Gate\"] = 24] = \"Gate\";\n    // 25; measurement operation\n    Token[Token[\"Measure\"] = 25] = \"Measure\";\n    // 26; qubit reset operation\n    Token[Token[\"Reset\"] = 26] = \"Reset\";\n    // 27; string literal\n    Token[Token[\"String\"] = 27] = \"String\";\n    // 28; opaque keyword\n    Token[Token[\"Opaque\"] = 28] = \"Opaque\";\n    // 29; defcalgrammar keyword\n    Token[Token[\"DefcalGrammar\"] = 29] = \"DefcalGrammar\";\n    // 30; float type keyword\n    Token[Token[\"Float\"] = 30] = \"Float\";\n    // 31; bool type keyword,\n    Token[Token[\"Bool\"] = 31] = \"Bool\";\n    // 32; int type keyword\n    Token[Token[\"Int\"] = 32] = \"Int\";\n    // 33; uint type keyword\n    Token[Token[\"UInt\"] = 33] = \"UInt\";\n    // 34; mathematical constant pi\n    Token[Token[\"Pi\"] = 34] = \"Pi\";\n    // 35; euler constant\n    Token[Token[\"Euler\"] = 35] = \"Euler\";\n    // 36; tau constant\n    Token[Token[\"Tau\"] = 36] = \"Tau\";\n    // 37; binary literal\n    Token[Token[\"BinaryLiteral\"] = 37] = \"BinaryLiteral\";\n    // 38; octal literal\n    Token[Token[\"OctalLiteral\"] = 38] = \"OctalLiteral\";\n    // 39; hex literal\n    Token[Token[\"HexLiteral\"] = 39] = \"HexLiteral\";\n    // 40; arithmetic operators\n    Token[Token[\"ArithmeticOp\"] = 40] = \"ArithmeticOp\";\n    // 41; compound arithmetic operators\n    Token[Token[\"CompoundArithmeticOp\"] = 41] = \"CompoundArithmeticOp\";\n    // 42; boolean literal value\n    Token[Token[\"BoolLiteral\"] = 42] = \"BoolLiteral\";\n    // 43; duration keyword\n    Token[Token[\"Duration\"] = 43] = \"Duration\";\n    // 44; unary operator\n    Token[Token[\"UnaryOp\"] = 44] = \"UnaryOp\";\n    // 45; binary operator\n    Token[Token[\"BinaryOp\"] = 45] = \"BinaryOp\";\n    // 46; let keyword for aliasing\n    Token[Token[\"Let\"] = 46] = \"Let\";\n    // 47; quantum gate modifier\n    Token[Token[\"QuantumModifier\"] = 47] = \"QuantumModifier\";\n    // 48; delay keyword\n    Token[Token[\"Delay\"] = 48] = \"Delay\";\n    // 49; return keyword\n    Token[Token[\"Return\"] = 49] = \"Return\";\n    // 50; def keyword for subroutines\n    Token[Token[\"Def\"] = 50] = \"Def\";\n    // 51; for loop keyword\n    Token[Token[\"For\"] = 51] = \"For\";\n    // 52; in keyword\n    Token[Token[\"In\"] = 52] = \"In\";\n    // 53; while loop keyword\n    Token[Token[\"While\"] = 53] = \"While\";\n    // 54; break keyword\n    Token[Token[\"Break\"] = 54] = \"Break\";\n    // 55; continue keyword\n    Token[Token[\"Continue\"] = 55] = \"Continue\";\n    // 56; input keyword\n    Token[Token[\"Input\"] = 56] = \"Input\";\n    // 57; output keyword\n    Token[Token[\"Output\"] = 57] = \"Output\";\n    // 58; switch statement keyword\n    Token[Token[\"Switch\"] = 58] = \"Switch\";\n    // 59; switch case keyword\n    Token[Token[\"Case\"] = 59] = \"Case\";\n    // 60; switch default keyword\n    Token[Token[\"Default\"] = 60] = \"Default\";\n    // 61; defcal keyword\n    Token[Token[\"Defcal\"] = 61] = \"Defcal\";\n    // 62; constant keywork\n    Token[Token[\"Const\"] = 62] = \"Const\";\n    // 63; if statement conditional\n    Token[Token[\"If\"] = 63] = \"If\";\n    // 64; else keyword\n    Token[Token[\"Else\"] = 64] = \"Else\";\n    // 65; end keyword\n    Token[Token[\"End\"] = 65] = \"End\";\n    // 66; inverse cosine\n    Token[Token[\"Arccos\"] = 66] = \"Arccos\";\n    // 67; inverse sine\n    Token[Token[\"Arcsin\"] = 67] = \"Arcsin\";\n    // 68; inverse tangent\n    Token[Token[\"Arctan\"] = 68] = \"Arctan\";\n    // 69; ceiling function\n    Token[Token[\"Ceiling\"] = 69] = \"Ceiling\";\n    // 70; cosine function\n    Token[Token[\"Cos\"] = 70] = \"Cos\";\n    // 71; exp keyword\n    Token[Token[\"Exp\"] = 71] = \"Exp\";\n    // 72; floor function\n    Token[Token[\"Floor\"] = 72] = \"Floor\";\n    // 73; logarithm base e\n    Token[Token[\"Log\"] = 73] = \"Log\";\n    // 74; modulus\n    Token[Token[\"Mod\"] = 74] = \"Mod\";\n    // 75; popcount function\n    Token[Token[\"Popcount\"] = 75] = \"Popcount\";\n    // 76; power function\n    Token[Token[\"Pow\"] = 76] = \"Pow\";\n    // 77; rotate bits left function\n    Token[Token[\"Rotl\"] = 77] = \"Rotl\";\n    // 78; rotate bits right function\n    Token[Token[\"Rotr\"] = 78] = \"Rotr\";\n    // 79; sine\n    Token[Token[\"Sin\"] = 79] = \"Sin\";\n    // 80; sqaure root\n    Token[Token[\"Sqrt\"] = 80] = \"Sqrt\";\n    // 81; tangent\n    Token[Token[\"Tan\"] = 81] = \"Tan\";\n    // 82; angle type\n    Token[Token[\"Angle\"] = 82] = \"Angle\";\n    // 83; ctrl gate modifier\n    Token[Token[\"Ctrl\"] = 83] = \"Ctrl\";\n    // 84; negctrl gate modifier\n    Token[Token[\"NegCtrl\"] = 84] = \"NegCtrl\";\n    // 85; inv gate modifier\n    Token[Token[\"Inv\"] = 85] = \"Inv\";\n    // 86; pow gate modifier\n    Token[Token[\"PowM\"] = 86] = \"PowM\";\n    // 87; @ symbol\n    Token[Token[\"At\"] = 87] = \"At\";\n    // 88; complex number keyword\n    Token[Token[\"Complex\"] = 88] = \"Complex\";\n    // 89; $ symbol\n    Token[Token[\"Dollar\"] = 89] = \"Dollar\";\n    // 90; array keyword\n    Token[Token[\"Array\"] = 90] = \"Array\";\n    // 91; durationof function keyword\n    Token[Token[\"DurationOf\"] = 91] = \"DurationOf\";\n    // 92; stretch type keyword\n    Token[Token[\"Stretch\"] = 92] = \"Stretch\";\n    // 93; box keyword\n    Token[Token[\"Box\"] = 93] = \"Box\";\n    // 94; readonly keyword\n    Token[Token[\"ReadOnly\"] = 94] = \"ReadOnly\";\n    // 95; mutable keyword\n    Token[Token[\"Mutable\"] = 95] = \"Mutable\";\n    // 96; #dim array dimensions\n    Token[Token[\"Dim\"] = 96] = \"Dim\";\n    // 97; scientific notation literal\n    Token[Token[\"ScientificNotation\"] = 97] = \"ScientificNotation\";\n    // 98; sizeof function\n    Token[Token[\"SizeOf\"] = 98] = \"SizeOf\";\n    // 99; extern keyword\n    Token[Token[\"Extern\"] = 99] = \"Extern\";\n    // 100; compound binary operators\n    Token[Token[\"CompoundBinaryOp\"] = 100] = \"CompoundBinaryOp\";\n})(Token || (Token = {}));\n/**\n * Mapping of string keywords to their corresponding token types.\n *\n * This lookup table enables the lexer to quickly determine if a string\n * represents a reserved keyword or should be treated as an identifier.\n *\n * @internal\n */\nconst lookupMap = {\n    pi: Token.Pi,\n    π: Token.Pi,\n    qreg: Token.QReg,\n    qubit: Token.Qubit,\n    creg: Token.CReg,\n    bit: Token.Bit,\n    barrier: Token.Barrier,\n    gate: Token.Gate,\n    measure: Token.Measure,\n    reset: Token.Reset,\n    include: Token.Include,\n    if: Token.If,\n    opaque: Token.Opaque,\n    defcalgrammar: Token.DefcalGrammar,\n    float: Token.Float,\n    bool: Token.Bool,\n    true: Token.BoolLiteral,\n    false: Token.BoolLiteral,\n    int: Token.Int,\n    uint: Token.UInt,\n    euler: Token.Euler,\n    ℇ: Token.Euler,\n    tau: Token.Tau,\n    τ: Token.Tau,\n    duration: Token.Duration,\n    let: Token.Let,\n    delay: Token.Delay,\n    return: Token.Return,\n    def: Token.Def,\n    for: Token.For,\n    in: Token.In,\n    while: Token.While,\n    break: Token.Break,\n    continue: Token.Continue,\n    input: Token.Input,\n    output: Token.Output,\n    switch: Token.Switch,\n    case: Token.Case,\n    default: Token.Default,\n    defcal: Token.Defcal,\n    const: Token.Const,\n    else: Token.Else,\n    end: Token.End,\n    \"!\": Token.UnaryOp,\n    \"~\": Token.UnaryOp,\n    \"**\": Token.ArithmeticOp,\n    \"*\": Token.ArithmeticOp,\n    \"/\": Token.ArithmeticOp,\n    \"%\": Token.ArithmeticOp,\n    \"+\": Token.ArithmeticOp,\n    \"++\": Token.ArithmeticOp,\n    \"&\": Token.BinaryOp,\n    \"|\": Token.BinaryOp,\n    \"^\": Token.BinaryOp,\n    \"&&\": Token.BinaryOp,\n    \"||\": Token.BinaryOp,\n    \"<\": Token.BinaryOp,\n    \"<=\": Token.BinaryOp,\n    \">\": Token.BinaryOp,\n    \">=\": Token.BinaryOp,\n    \"==\": Token.BinaryOp,\n    \"!=\": Token.BinaryOp,\n    \"<<\": Token.BinaryOp,\n    \">>\": Token.BinaryOp,\n    \"**=\": Token.CompoundArithmeticOp,\n    \"/=\": Token.CompoundArithmeticOp,\n    \"%=\": Token.CompoundArithmeticOp,\n    \"+=\": Token.CompoundArithmeticOp,\n    \"-=\": Token.CompoundArithmeticOp,\n    \"*=\": Token.CompoundArithmeticOp,\n    \"^=\": Token.CompoundArithmeticOp,\n    arccos: Token.Arccos,\n    arcsin: Token.Arcsin,\n    arctan: Token.Arctan,\n    ceiling: Token.Ceiling,\n    cos: Token.Cos,\n    exp: Token.Exp,\n    floor: Token.Floor,\n    log: Token.Log,\n    mod: Token.Mod,\n    popcount: Token.Popcount,\n    pow: Token.Pow,\n    rotl: Token.Rotl,\n    rotr: Token.Rotr,\n    sin: Token.Sin,\n    sqrt: Token.Sqrt,\n    tan: Token.Tan,\n    angle: Token.Angle,\n    \"@\": Token.At,\n    complex: Token.Complex,\n    $: Token.Dollar,\n    array: Token.Array,\n    durationof: Token.DurationOf,\n    stretch: Token.Stretch,\n    box: Token.Box,\n    readonly: Token.ReadOnly,\n    mutable: Token.Mutable,\n    sizeof: Token.SizeOf,\n    extern: Token.Extern,\n};\n/**\n * Returns the token type that corresponds to a given string.\n *\n * This function is used by the lexer to classify identifiers and keywords.\n * If the string is a reserved keyword, it returns the appropriate token type.\n * Otherwise, it returns Token.Id to indicate a user-defined identifier.\n *\n * @param ident - The string to look up\n * @returns The corresponding token type\n *\n * @example Keyword lookup\n * ```typescript\n * lookup('qubit');     // Returns Token.Qubit\n * lookup('measure');   // Returns Token.Measure\n * lookup('myVar');     // Returns Token.Id\n * lookup('π');         // Returns Token.Pi\n * ```\n */\nfunction lookup(ident) {\n    return ident in lookupMap ? lookupMap[ident] : Token.Id;\n}\n/**\n * Returns the string representation of a token type.\n *\n * This is useful for debugging and error reporting, allowing you to\n * convert token enum values back to their string representations.\n *\n * @param token - The token type to convert\n * @returns The string representation of the token, or undefined if not found\n *\n * @example Token to string conversion\n * ```typescript\n * inverseLookup(Token.Qubit);   // Returns 'qubit'\n * inverseLookup(Token.If);      // Returns 'if'\n * inverseLookup(Token.Pi);      // Returns 'pi'\n * ```\n */\nfunction inverseLookup(token) {\n    return Object.keys(lookupMap).find((ident) => lookupMap[ident] == token);\n}\n/**\n * Determines whether a token can be used as a parameter in expressions.\n *\n * This function helps the parser validate parameter lists by checking if\n * a token type is allowed in parameter contexts. Parameters can include\n * identifiers, numbers, and other value-bearing tokens, but not structural\n * tokens like semicolons or braces.\n *\n * @param token - The token type to check\n * @returns true if the token CANNOT be used as a parameter, false otherwise\n *\n * @example Parameter validation\n * ```typescript\n * notParam(Token.Id);         // false - identifiers can be parameters\n * notParam(Token.NNInteger);  // false - numbers can be parameters\n * notParam(Token.Semicolon);  // true - semicolons cannot be parameters\n * notParam(Token.LParen);     // true - parentheses cannot be parameters\n * ```\n */\nfunction notParam(token) {\n    if (token == Token.NNInteger ||\n        token == Token.Real ||\n        token == Token.Id ||\n        inverseLookup(token)) {\n        return false;\n    }\n    return true;\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/qasm3/token.js?\n}");

/***/ }),

/***/ "./node_modules/qasm-ts/dist/version.js":
/*!**********************************************!*\
  !*** ./node_modules/qasm-ts/dist/version.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenQASMMajorVersion: () => (/* binding */ OpenQASMMajorVersion),\n/* harmony export */   OpenQASMVersion: () => (/* binding */ OpenQASMVersion)\n/* harmony export */ });\n/**\n * OpenQASM version detection and management utilities\n *\n * Handles version detection from QASM source code and provides utilities\n * for working with different OpenQASM versions. Supports automatic version\n * detection from OPENQASM statements and manual version specification.\n *\n * @module Version Management\n *\n * @example Version detection\n * ```typescript\n * const version = new OpenQASMVersion(3, 0);\n * console.log(version.toString()); // \"3.0\"\n * console.log(version.isVersion3()); // true\n * ```\n */\n/** Enum representing the major OpenQASM versions. */\nvar OpenQASMMajorVersion;\n(function (OpenQASMMajorVersion) {\n    OpenQASMMajorVersion[OpenQASMMajorVersion[\"Version2\"] = 2] = \"Version2\";\n    OpenQASMMajorVersion[OpenQASMMajorVersion[\"Version3\"] = 3] = \"Version3\";\n})(OpenQASMMajorVersion || (OpenQASMMajorVersion = {}));\n/** Class representing the OpenQASM version. */\nclass OpenQASMVersion {\n    /**\n     * Creates an OpenQASMVersion instance.\n     * @param major - The OpenQASM major version. (optional)\n     * @param minor - The OpenQASM minor version (optional)\n     */\n    constructor(major, minor) {\n        this.major = major ? major : OpenQASMMajorVersion.Version3;\n        this.minor = minor ? minor : 0;\n    }\n    /** Returns the version as a formatted string. */\n    toString() {\n        return `${this.major}.${this.minor}`;\n    }\n    /** Returns whether the version is 3.x */\n    isVersion3() {\n        if (this.major === OpenQASMMajorVersion.Version3) {\n            return true;\n        }\n        return false;\n    }\n    /** Returns whether the version is 2.x */\n    isVersion2() {\n        if (this.major === OpenQASMMajorVersion.Version2) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qasm-ts/dist/version.js?\n}");

/***/ }),

/***/ "./node_modules/qulacs-wasm/lib/bundle/index.js":
/*!******************************************************!*\
  !*** ./node_modules/qulacs-wasm/lib/bundle/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./main/init */ \"./node_modules/qulacs-wasm/lib/bundle/main/init.js\"), exports);\n__exportStar(__webpack_require__(/*! ./main/type/common */ \"./node_modules/qulacs-wasm/lib/bundle/main/type/common.js\"), exports);\n__exportStar(__webpack_require__(/*! ./main/instance */ \"./node_modules/qulacs-wasm/lib/bundle/main/instance.js\"), exports);\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qulacs-wasm/lib/bundle/index.js?\n}");

/***/ }),

/***/ "./node_modules/qulacs-wasm/lib/bundle/main/init.js":
/*!**********************************************************!*\
  !*** ./node_modules/qulacs-wasm/lib/bundle/main/init.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.initQulacs = void 0;\nvar module_1 = __importDefault(__webpack_require__(/*! ../wasm/module */ \"./node_modules/qulacs-wasm/lib/bundle/wasm/module.js\"));\nvar instance_1 = __webpack_require__(/*! ./instance */ \"./node_modules/qulacs-wasm/lib/bundle/main/instance.js\");\nfunction initQulacs(option) {\n    if (option === void 0) { option = {}; }\n    return __awaiter(this, void 0, void 0, function () {\n        var qulacsModule;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!option.module) return [3 /*break*/, 2];\n                    return [4 /*yield*/, _initQulacsFromModule(option.module)];\n                case 1:\n                    qulacsModule = _a.sent();\n                    return [3 /*break*/, 4];\n                case 2: return [4 /*yield*/, _initQulacs()];\n                case 3:\n                    qulacsModule = _a.sent();\n                    _a.label = 4;\n                case 4:\n                    (0, instance_1.applyModule)(qulacsModule);\n                    return [2 /*return*/, qulacsModule];\n            }\n        });\n    });\n}\nexports.initQulacs = initQulacs;\nfunction _initQulacs() {\n    return Promise.resolve((0, module_1.default)());\n}\nfunction _initQulacsFromModule(compiledModule) {\n    return new Promise(function (resolve, reject) {\n        function onInstantiateWasm(importObject, successCallback) {\n            WebAssembly.instantiate(compiledModule, importObject)\n                .then(function (instance) {\n                successCallback(instance);\n            })\n                .catch(function (e) { return reject(e); });\n            return undefined; // NOTE: @types/emscriptenでは不要なnon-null assertionかもしれない\n        }\n        (0, module_1.default)({ instantiateWasm: onInstantiateWasm })\n            .then(function (emscriptenModule) {\n            resolve(emscriptenModule);\n        })\n            .catch(function (e) { return reject(e); });\n    });\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qulacs-wasm/lib/bundle/main/init.js?\n}");

/***/ }),

/***/ "./node_modules/qulacs-wasm/lib/bundle/main/instance.js":
/*!**************************************************************!*\
  !*** ./node_modules/qulacs-wasm/lib/bundle/main/instance.js ***!
  \**************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PauliRotation = exports.Pauli = exports.FREDKIN = exports.TOFFOLI = exports.SWAP = exports.CZ = exports.CNOT = exports.RotZ = exports.RotY = exports.RotX = exports.RotInvZ = exports.RotInvY = exports.RotInvX = exports.RZ = exports.RY = exports.RX = exports.U3 = exports.U2 = exports.U1 = exports.P1 = exports.P0 = exports.sqrtYdag = exports.sqrtY = exports.sqrtXdag = exports.sqrtX = exports.Tdag = exports.T = exports.Sdag = exports.S = exports.H = exports.Z = exports.Y = exports.X = exports.Identity = exports.CausalConeSimulator = exports.NoiseSimulator = exports.QuantumCircuitSimulator = exports.GradCalculator = exports.QuantumCircuitOptimizer = exports.PauliOperator = exports.Observable = exports.HermitianQuantumOperator = exports.GeneralQuantumOperator = exports.DensityMatrix = exports.ParametricQuantumCircuit = exports.QuantumCircuit = exports.QuantumState = exports.removeFunction = exports.addFunction = exports.getExceptionMessage = void 0;\nexports.applyModule = exports.create_quantum_operator_from_openfermion_text = exports.from_json = exports.ParametricRZ = exports.ParametricRY = exports.ParametricRX = exports.Adaptive = exports.Instrument = exports.CP = exports.CPTP = exports.Probabilistic = exports.add = exports.merge = exports.permutate_qubit = exports.make_mixture = exports.make_superposition = exports.drop_qubit = exports.tensor_product = exports.inner_product = exports.to_matrix_gate = exports.partial_trace = exports.NoisyEvolution_fast = exports.Measurement = exports.AmplitudeDampingNoise = exports.TwoQubitDepolarizingNoise = exports.DepolarizingNoise = exports.IndependentXZNoise = exports.DephasingNoise = exports.BitFlipNoise = exports.StateReflection = exports.ReversibleBoolean = exports.RandomUnitary = exports.DiagonalMatrix = exports.SparseMatrix = exports.DenseMatrix = void 0;\nfunction applyModule(qulacsModule) {\n    Object.keys(module.exports).forEach(function (key) {\n        var wasmExportedImpl = qulacsModule[key];\n        if (wasmExportedImpl)\n            module.exports[key] = wasmExportedImpl;\n    });\n    applayAlias();\n    applyQuantumStateOverload(qulacsModule);\n    applyDensityMatrixOverload();\n    applyQuantumCircuitSimulatorOverload();\n    applyFunctionOverload(qulacsModule);\n}\nexports.applyModule = applyModule;\nfunction applayAlias() {\n    exports.Observable = exports.HermitianQuantumOperator;\n}\nfunction applyQuantumStateOverload(qulacsModule) {\n    exports.QuantumState.prototype.load = function (arg) {\n        if (Array.isArray(arg))\n            return exports.QuantumState.prototype.load_Vector.call(this, arg);\n        return exports.QuantumState.prototype.load_QuantumStateBase.call(this, arg);\n    };\n    exports.QuantumState.prototype.multiply_elementwise_function = function (func) {\n        // NOTE: EM_JSで使うdyncallは入出力にvijfd型のみ利用できるため、funcが返すComplexをdyncall元に返すことができない\n        // そのため、funcの返り値をcomplexRegeneratorでdoubleに分解し、dyncallが渡すポインタに先に書き込み、\n        // complexRegenerator自体はvoidを返す\n        // dyncall側にはポインタから返り値を読みだすことを期待する\n        var complexRegenerator = function (intNum, complexArrPointer) {\n            // eslint-disable-next-line no-undef\n            var setValueFunc = qulacsModule[\"setValue\"];\n            var c = func(intNum);\n            setValueFunc(complexArrPointer, c.real, \"double\");\n            setValueFunc(complexArrPointer + 8, c.imag, \"double\");\n        };\n        var fnPointer = (0, exports.addFunction)(complexRegenerator, \"vii\");\n        return exports.QuantumState.prototype.multiply_elementwise_function_wrapper.call(this, fnPointer);\n    };\n}\nfunction applyDensityMatrixOverload() {\n    exports.DensityMatrix.prototype.load = function (arg) {\n        if (Array.isArray(arg)) {\n            if (Array.isArray(arg[0])) {\n                return exports.DensityMatrix.prototype.load_Matrix.call(this, arg);\n            }\n            else {\n                return exports.DensityMatrix.prototype.load_Vector.call(this, arg);\n            }\n        }\n        return exports.DensityMatrix.prototype.load_QuantumStateBase.call(this, arg);\n    };\n}\nfunction applyQuantumCircuitSimulatorOverload() {\n    exports.QuantumCircuitSimulator.prototype.initialize_state = function (computationl_basis) {\n        return exports.QuantumCircuitSimulator.prototype.initialize_state_itype_wrapper.call(this, computationl_basis);\n    };\n}\nfunction applyFunctionOverload(qulacsModule) {\n    exports.partial_trace = function (state, target_traceout) {\n        // NOTE: 暫定。より確実な判定方法を検討する\n        var names = getPtrNames(state);\n        if ((names === null || names === void 0 ? void 0 : names.ptrTypeName) === \"QuantumState*\") {\n            return qulacsModule[\"partial_trace_QuantumState\"](state, target_traceout);\n        }\n        else {\n            return qulacsModule[\"partial_trace_DensityMatrix\"](state, target_traceout);\n        }\n    };\n    exports.tensor_product = function (state_left, state_right) {\n        // NOTE: 暫定。より確実な判定方法を検討する\n        var names_left = getPtrNames(state_left);\n        var names_right = getPtrNames(state_right);\n        if ((names_left === null || names_left === void 0 ? void 0 : names_left.ptrTypeName) === \"QuantumState*\" && (names_right === null || names_right === void 0 ? void 0 : names_right.ptrTypeName) === \"QuantumState*\") {\n            return qulacsModule[\"tensor_product_QuantumState\"](state_left, state_right);\n        }\n        else {\n            return qulacsModule[\"tensor_product_DensityMatrix\"](state_left, state_right);\n        }\n    };\n    exports.permutate_qubit = function (state, qubit_order) {\n        // NOTE: 暫定。より確実な判定方法を検討する\n        var names = getPtrNames(state);\n        if ((names === null || names === void 0 ? void 0 : names.ptrTypeName) === \"QuantumState*\") {\n            return qulacsModule[\"permutate_qubit_QuantumState\"](state, qubit_order);\n        }\n        else {\n            return qulacsModule[\"permutate_qubit_DensityMatrix\"](state, qubit_order);\n        }\n    };\n    exports.ReversibleBoolean = function (target_qubit_index_list, function_ptr) {\n        var fnPointer = (0, exports.addFunction)(function_ptr, \"iii\");\n        var gate = qulacsModule[\"ReversibleBoolean\"](target_qubit_index_list, fnPointer);\n        //removeFunction(fnPointer); // NOTE: return後もC++側クロージャが参照する可能性が残るので、いつ消せるか検討。ReversibleBooleanのdeleteまで？\n        return gate;\n    };\n    exports.DenseMatrix = function (target_qubit_index_list, matrix) {\n        if (Array.isArray(target_qubit_index_list)) {\n            return qulacsModule[\"DenseMatrix_vector_UINT\"](target_qubit_index_list, matrix);\n        }\n        else {\n            return qulacsModule[\"DenseMatrix_UINT\"](target_qubit_index_list, matrix);\n        }\n    };\n    exports.merge = function (gate1OrGateList, gate2) {\n        if (Array.isArray(gate1OrGateList)) {\n            var pointerList = gate1OrGateList.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n            return qulacsModule[\"merge_QuantumGateBase_pointer\"](pointerList);\n        }\n        else {\n            return qulacsModule[\"merge\"](gate1OrGateList, gate2);\n        }\n    };\n    exports.add = function (gate1OrGateList, gate2) {\n        if (Array.isArray(gate1OrGateList)) {\n            var pointerList = gate1OrGateList.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n            return qulacsModule[\"add_QuantumGateBase_pointer\"](pointerList);\n        }\n        else {\n            return qulacsModule[\"add\"](gate1OrGateList, gate2);\n        }\n    };\n    exports.Probabilistic = function (distribution, gate_list) {\n        var pointerList = gate_list.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n        return qulacsModule[\"Probabilistic_QuantumGateBase_pointer\"](distribution, pointerList);\n    };\n    exports.NoisyEvolution_fast = function (hamiltonian, c_ops, time) {\n        var pointerList = c_ops.map(function (op) { return qulacsModule[\"_getAbstractGeneralQuantumOperatorPointer\"](op); });\n        return qulacsModule[\"NoisyEvolution_fast_pointer\"](hamiltonian, pointerList, time);\n    };\n    exports.CPTP = function (gate_list) {\n        var pointerList = gate_list.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n        return qulacsModule[\"CPTP_QuantumGate_pointer\"](pointerList);\n    };\n    exports.CP = function (gate_list, state_normalize, probability_normalize, assign_zero_if_not_matched) {\n        var pointerList = gate_list.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n        return qulacsModule[\"CPTP_QuantumGate_pointer\"](pointerList, state_normalize, probability_normalize, assign_zero_if_not_matched);\n    };\n    exports.Instrument = function (gate_list, classical_register_address) {\n        var pointerList = gate_list.map(function (gate) { return qulacsModule[\"_getAbstractQuantumGateBasePointer\"](gate); });\n        return qulacsModule[\"Instrument_QuantumGate_pointer\"](pointerList, classical_register_address);\n    };\n    exports.Adaptive = function (gate, func) {\n        // NOTE: dyncallは入出力にvijfd型のみ利用できるため、dyncall元からfuncにvector/arrayを渡すことができない\n        // そのため、listRegeneratorでポインタから配列要素を復元してからfuncに渡す\n        // funcの返り値はboolをそのまま返す\n        // dyncall側にはJSで扱いたい配列のポインタを渡すことを期待する\n        var listRegenerator = function (listPointer, size) {\n            var list = [];\n            var nByte = 4;\n            // eslint-disable-next-line no-undef\n            var getValueFunc = qulacsModule[\"getValue\"];\n            for (var i = 0; i < size; i++) {\n                var n = getValueFunc(listPointer + i * nByte, \"i32\"); // NOTE: intのバイト数は環境依存の改善が必要かもしれない。sizeofする？\n                list.push(n);\n            }\n            return func(list);\n        };\n        var fnPointer = (0, exports.addFunction)(listRegenerator, \"iii\");\n        return qulacsModule[\"Adaptive\"](gate, fnPointer);\n    };\n    exports.from_json = function (json) {\n        var data = JSON.parse(json);\n        switch (data.name) {\n            case \"GeneralQuantumOperator\":\n                return qulacsModule[\"from_json_GeneralQuantumOperator\"](json);\n            case \"HermitianQuantumOperator\":\n                return qulacsModule[\"from_json_HermitianQuantumOperator\"](json);\n            case \"QuantumState\":\n                return qulacsModule[\"from_json_QuantumState\"](json);\n            case \"DensityMatrix\":\n                return qulacsModule[\"from_json_DensityMatrix\"](json);\n            case \"QuantumStateBase\":\n                return qulacsModule[\"from_json_QuantumStateBase\"](json);\n            case \"QuantumGateBase\":\n                return qulacsModule[\"from_json_QuantumGateBase\"](json);\n            case \"QuantumCircuit\":\n                return qulacsModule[\"from_json_QuantumCircuit\"](json);\n            default:\n                // TODO: DenseMatrixGateやXGate、CNOTGate、ParametricQuantumCircuitなどの暗黙の命名規則に依存している。型名をすべて列挙するなどの修正が必要\n                if (data.name.includes(\"Gate\"))\n                    return qulacsModule[\"from_json_QuantumGateBase\"](json);\n                if (data.name.includes(\"QuantumCircuit\"))\n                    return qulacsModule[\"from_json_QuantumCircuit\"](json);\n                throw new Error(\"unknown json data, type name: \".concat(data.name, \" is cannot use from_json.\"));\n        }\n    };\n}\nfunction getPtrNames(instance) {\n    if (!instance || !instance.$$.ptrType)\n        return null;\n    var ptrTypeName = instance.$$.ptrType.name;\n    var registeredClassNames = [instance.$$.ptrType.registeredClass.name];\n    var targetClass = instance.$$.ptrType.registeredClass;\n    while (targetClass.baseClass) {\n        registeredClassNames.push(targetClass.baseClass.name);\n        targetClass = targetClass.baseClass;\n    }\n    return {\n        ptrTypeName: ptrTypeName,\n        registeredClassNames: registeredClassNames\n    };\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qulacs-wasm/lib/bundle/main/instance.js?\n}");

/***/ }),

/***/ "./node_modules/qulacs-wasm/lib/bundle/main/type/common.js":
/*!*****************************************************************!*\
  !*** ./node_modules/qulacs-wasm/lib/bundle/main/type/common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CMath = void 0;\n/**\n * 複素数の四則演算ラッパー\n */\nexports.CMath = {\n    add: function (a, b) {\n        a = translateNumberOrComplexToCPPCTYPE(a);\n        b = translateNumberOrComplexToCPPCTYPE(b);\n        return { real: a.real + b.real, imag: a.imag + b.imag };\n    },\n    mul: function (a, b) {\n        a = translateNumberOrComplexToCPPCTYPE(a);\n        b = translateNumberOrComplexToCPPCTYPE(b);\n        return {\n            real: a.real * b.real - a.imag * b.imag,\n            imag: a.real * b.imag + a.imag * b.real\n        };\n    },\n    div: function (a, b) {\n        a = translateNumberOrComplexToCPPCTYPE(a);\n        b = translateNumberOrComplexToCPPCTYPE(b);\n        var r2 = b.real * b.real + b.imag * b.imag;\n        return {\n            real: (a.real * b.real + a.imag * b.imag) / r2,\n            imag: (-a.real * b.imag + a.imag * b.real) / r2\n        };\n    }\n};\nfunction translateNumberOrComplexToCPPCTYPE(n) {\n    if (typeof n === \"number\") {\n        return { real: n, imag: 0 };\n    }\n    else {\n        return n;\n    }\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qulacs-wasm/lib/bundle/main/type/common.js?\n}");

/***/ }),

/***/ "./node_modules/qulacs-wasm/lib/bundle/wasm/module.js":
/*!************************************************************!*\
  !*** ./node_modules/qulacs-wasm/lib/bundle/wasm/module.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("{var __filename = \"/index.js\";\nvar __dirname = \"/\";\n\nvar ModuleQulacsWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (true) _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ModuleQulacsWasm) {\n  ModuleQulacsWasm = ModuleQulacsWasm || {};\n\n\n\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof ModuleQulacsWasm != 'undefined' ? ModuleQulacsWasm : {};\n\n// See https://caniuse.com/mdn-javascript_builtins_object_assign\n\n// See https://caniuse.com/mdn-javascript_builtins_bigint64array\n\n// Set up the promise that indicates the Module is initialized\nvar readyPromiseResolve, readyPromiseReject;\nModule['ready'] = new Promise(function(resolve, reject) {\n  readyPromiseResolve = resolve;\n  readyPromiseReject = reject;\n});\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// {{PRE_JSES}}\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\nvar thisProgram = './this.program';\nvar quit_ = (status, toThrow) => {\n  throw toThrow;\n};\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\n// Attempt to auto-detect the environment\nvar ENVIRONMENT_IS_WEB = typeof window == 'object';\nvar ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n// N.b. Electron.js environment is simultaneously a NODE-environment, but\n// also a web environment.\nvar ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  }\n  return scriptDirectory + path;\n}\n\n// Hooks that are implemented differently in different runtime environments.\nvar read_,\n    readAsync,\n    readBinary,\n    setWindowTitle;\n\n// Normally we don't log exceptions but instead let them bubble out the top\n// level where the embedding environment (e.g. the browser) can handle\n// them.\n// However under v8 and node we sometimes exit the process direcly in which case\n// its up to use us to log the exception before exiting.\n// If we fix https://github.com/emscripten-core/emscripten/issues/15080\n// this may no longer be needed under node.\nfunction logExceptionOnExit(e) {\n  if (e instanceof ExitStatus) return;\n  let toLog = e;\n  err('exiting due to exception: ' + toLog);\n}\n\nif (ENVIRONMENT_IS_NODE) {\n  if (ENVIRONMENT_IS_WORKER) {\n    scriptDirectory = (__webpack_require__(/*! path */ \"./node_modules/path/path.js\").dirname)(scriptDirectory) + '/';\n  } else {\n    scriptDirectory = __dirname + '/';\n  }\n\n// include: node_shell_read.js\n\n\nvar fs;\nvar nodePath;\n\nvar requireNodeFS = () => {\n  // Use nodePath as the indicator for these not being initialized,\n  // since in some environments a global fs may have already been\n  // created.\n  if (!nodePath) {\n    fs = __webpack_require__(/*! fs */ \"?2e5e\");\n    nodePath = __webpack_require__(/*! path */ \"./node_modules/path/path.js\");\n  }\n};\n\nread_ = (filename, binary) => {\n  var ret = tryParseAsDataURI(filename);\n  if (ret) {\n    return binary ? ret : ret.toString();\n  }\n  requireNodeFS();\n  filename = nodePath['normalize'](filename);\n  return fs.readFileSync(filename, binary ? undefined : 'utf8');\n};\n\nreadBinary = (filename) => {\n  var ret = read_(filename, true);\n  if (!ret.buffer) {\n    ret = new Uint8Array(ret);\n  }\n  return ret;\n};\n\nreadAsync = (filename, onload, onerror) => {\n  var ret = tryParseAsDataURI(filename);\n  if (ret) {\n    onload(ret);\n  }\n  requireNodeFS();\n  filename = nodePath['normalize'](filename);\n  fs.readFile(filename, function(err, data) {\n    if (err) onerror(err);\n    else onload(data.buffer);\n  });\n};\n\n// end include: node_shell_read.js\n  if (process['argv'].length > 1) {\n    thisProgram = process['argv'][1].replace(/\\\\/g, '/');\n  }\n\n  arguments_ = process['argv'].slice(2);\n\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\n\n  process['on']('uncaughtException', function(ex) {\n    // suppress ExitStatus exceptions from showing an error\n    if (!(ex instanceof ExitStatus)) {\n      throw ex;\n    }\n  });\n\n  // Without this older versions of node (< v15) will log unhandled rejections\n  // but return 0, which is not normally the desired behaviour.  This is\n  // not be needed with node v15 and about because it is now the default\n  // behaviour:\n  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode\n  process['on']('unhandledRejection', function(reason) { throw reason; });\n\n  quit_ = (status, toThrow) => {\n    if (keepRuntimeAlive()) {\n      process['exitCode'] = status;\n      throw toThrow;\n    }\n    logExceptionOnExit(toThrow);\n    process['exit'](status);\n  };\n\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\n\n} else\n\n// Note that this includes Node.js workers when relevant (pthreads is enabled).\n// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and\n// ENVIRONMENT_IS_NODE.\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (typeof document != 'undefined' && document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE, this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),\n  // they are removed because they could contain a slash.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n  // Differentiate the Web Worker from the Node Worker case, as reading must\n  // be done differently.\n  {\n// include: web_or_worker_shell_read.js\n\n\n  read_ = (url) => {\n    try {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n    } catch (err) {\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        return intArrayToString(data);\n      }\n      throw err;\n    }\n  }\n\n  if (ENVIRONMENT_IS_WORKER) {\n    readBinary = (url) => {\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));\n      } catch (err) {\n        var data = tryParseAsDataURI(url);\n        if (data) {\n          return data;\n        }\n        throw err;\n      }\n    };\n  }\n\n  readAsync = (url, onload, onerror) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = () => {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      var data = tryParseAsDataURI(url);\n      if (data) {\n        onload(data.buffer);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  }\n\n// end include: web_or_worker_shell_read.js\n  }\n\n  setWindowTitle = (title) => document.title = title;\n} else\n{\n}\n\nvar out = Module['print'] || console.log.bind(console);\nvar err = Module['printErr'] || console.warn.bind(console);\n\n// Merge back in the overrides\nObject.assign(Module, moduleOverrides);\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = null;\n\n// Emit code to handle expected values on the Module object. This applies Module.x\n// to the proper local x. This has two benefits: first, we only emit it if it is\n// expected to arrive, and second, by using a local everywhere else that can be\n// minified.\n\nif (Module['arguments']) arguments_ = Module['arguments'];\n\nif (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\nif (Module['quit']) quit_ = Module['quit'];\n\n// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message\n\n\n\n\nvar STACK_ALIGN = 16;\nvar POINTER_SIZE = 4;\n\nfunction getNativeTypeSize(type) {\n  switch (type) {\n    case 'i1': case 'i8': case 'u8': return 1;\n    case 'i16': case 'u16': return 2;\n    case 'i32': case 'u32': return 4;\n    case 'i64': case 'u64': return 8;\n    case 'float': return 4;\n    case 'double': return 8;\n    default: {\n      if (type[type.length - 1] === '*') {\n        return POINTER_SIZE;\n      }\n      if (type[0] === 'i') {\n        const bits = Number(type.substr(1));\n        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);\n        return bits / 8;\n      }\n      return 0;\n    }\n  }\n}\n\n// include: runtime_debug.js\n\n\n// end include: runtime_debug.js\n\n\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\nvar wasmBinary;\nif (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];\nvar noExitRuntime = Module['noExitRuntime'] || true;\n\nif (typeof WebAssembly != 'object') {\n  abort('no native wasm support detected');\n}\n\n// Wasm globals\n\nvar wasmMemory;\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    // This build was created without ASSERTIONS defined.  `assert()` should not\n    // ever be called in this configuration but in case there are callers in\n    // the wild leave this simple abort() implemenation here for now.\n    abort(text);\n  }\n}\n\n// include: runtime_strings.js\n\n\n// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.\n\nvar UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\n// a copy of that string as a Javascript String object.\n/**\n * heapOrArray is either a regular array, or a JavaScript typed array view.\n * @param {number} idx\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n  var endIdx = idx + maxBytesToRead;\n  var endPtr = idx;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)\n  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n  }\n  var str = '';\n  // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that\n  while (idx < endPtr) {\n    // For UTF8 byte structure, see:\n    // http://en.wikipedia.org/wiki/UTF-8#Description\n    // https://www.ietf.org/rfc/rfc2279.txt\n    // https://tools.ietf.org/html/rfc3629\n    var u0 = heapOrArray[idx++];\n    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n    var u1 = heapOrArray[idx++] & 63;\n    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n    var u2 = heapOrArray[idx++] & 63;\n    if ((u0 & 0xF0) == 0xE0) {\n      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);\n    }\n\n    if (u0 < 0x10000) {\n      str += String.fromCharCode(u0);\n    } else {\n      var ch = u0 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return str;\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a\n// copy of that string as a Javascript String object.\n// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit\n//                 this parameter to scan the string until the first \\0 byte. If maxBytesToRead is\n//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the\n//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will\n//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)\n//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may\n//                 throw JS JIT optimizations off, so it is worth to consider consistently using one\n//                 style or the other.\n/**\n * @param {number} ptr\n * @param {number=} maxBytesToRead\n * @return {string}\n */\nfunction UTF8ToString(ptr, maxBytesToRead) {\n  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n}\n\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.\n//   outIdx: The starting offset in the array to begin the copying.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\n//                    This count should include the null terminator,\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) {\n      var u1 = str.charCodeAt(++i);\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      heap[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      heap[outIdx++] = 0xC0 | (u >> 6);\n      heap[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      heap[outIdx++] = 0xE0 | (u >> 12);\n      heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n      heap[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 3 >= endIdx) break;\n      heap[outIdx++] = 0xF0 | (u >> 18);\n      heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n      heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n      heap[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  heap[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var c = str.charCodeAt(i); // possibly a lead surrogate\n    if (c <= 0x7F) {\n      len++;\n    } else if (c <= 0x7FF) {\n      len += 2;\n    } else if (c >= 0xD800 && c <= 0xDFFF) {\n      len += 4; ++i;\n    } else {\n      len += 3;\n    }\n  }\n  return len;\n}\n\n// end include: runtime_strings.js\n// Memory management\n\nvar HEAP,\n/** @type {!ArrayBuffer} */\n  buffer,\n/** @type {!Int8Array} */\n  HEAP8,\n/** @type {!Uint8Array} */\n  HEAPU8,\n/** @type {!Int16Array} */\n  HEAP16,\n/** @type {!Uint16Array} */\n  HEAPU16,\n/** @type {!Int32Array} */\n  HEAP32,\n/** @type {!Uint32Array} */\n  HEAPU32,\n/** @type {!Float32Array} */\n  HEAPF32,\n/** @type {!Float64Array} */\n  HEAPF64;\n\nfunction updateGlobalBufferAndViews(buf) {\n  buffer = buf;\n  Module['HEAP8'] = HEAP8 = new Int8Array(buf);\n  Module['HEAP16'] = HEAP16 = new Int16Array(buf);\n  Module['HEAP32'] = HEAP32 = new Int32Array(buf);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);\n}\n\nvar TOTAL_STACK = 5242880;\n\nvar INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;\n\n// include: runtime_init_table.js\n// In regular non-RELOCATABLE mode the table is exported\n// from the wasm module and this will be assigned once\n// the exports are available.\nvar wasmTable;\n\n// end include: runtime_init_table.js\n// include: runtime_stack_check.js\n\n\n// end include: runtime_stack_check.js\n// include: runtime_assertions.js\n\n\n// end include: runtime_assertions.js\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\n\nfunction keepRuntimeAlive() {\n  return noExitRuntime;\n}\n\nfunction preRun() {\n\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n  runtimeInitialized = true;\n\n  \nif (!Module[\"noFSInit\"] && !FS.init.initialized)\n  FS.init();\nFS.ignorePermissions = false;\n\nTTY.init();\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction postRun() {\n\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\n// include: runtime_math.js\n\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n\n// end include: runtime_math.js\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\n\nfunction getUniqueRunDependency(id) {\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\n/** @param {string|number=} what */\nfunction abort(what) {\n  {\n    if (Module['onAbort']) {\n      Module['onAbort'](what);\n    }\n  }\n\n  what = 'Aborted(' + what + ')';\n  // TODO(sbc): Should we remove printing and leave it up to whoever\n  // catches the exception?\n  err(what);\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  what += '. Build with -sASSERTIONS for more info.';\n\n  // Use a wasm runtime error, because a JS error might be seen as a foreign\n  // exception, which means we'd run destructors on it. We need the error to\n  // simply make the program stop.\n  // FIXME This approach does not work in Wasm EH because it currently does not assume\n  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from\n  // a trap or not based on a hidden field within the object. So at the moment\n  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that\n  // allows this in the wasm spec.\n\n  // Suppress closure compiler warning here. Closure compiler's builtin extern\n  // defintion for WebAssembly.RuntimeError claims it takes no arguments even\n  // though it can.\n  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.\n  /** @suppress {checkTypes} */\n  var e = new WebAssembly.RuntimeError(what);\n\n  readyPromiseReject(e);\n  // Throw the error whether or not MODULARIZE is set because abort is used\n  // in code paths apart from instantiation where an exception is expected\n  // to be thrown when abort is called.\n  throw e;\n}\n\n// {{MEM_INITIALIZER}}\n\n// include: memoryprofiler.js\n\n\n// end include: memoryprofiler.js\n// include: URIUtils.js\n\n\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  // Prefix of data URIs emitted by SINGLE_FILE and related options.\n  return filename.startsWith(dataURIPrefix);\n}\n\n// Indicates whether filename is delivered via file protocol (as opposed to http/https)\nfunction isFileURI(filename) {\n  return filename.startsWith('file://');\n}\n\n// end include: URIUtils.js\nvar wasmBinaryFile;\n  wasmBinaryFile = 'data:application/octet-stream;base64,';\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n\nfunction getBinary(file) {\n  try {\n    if (file == wasmBinaryFile && wasmBinary) {\n      return new Uint8Array(wasmBinary);\n    }\n    var binary = tryParseAsDataURI(file);\n    if (binary) {\n      return binary;\n    }\n    if (readBinary) {\n      return readBinary(file);\n    }\n    throw \"both async and sync fetching of the wasm failed\";\n  }\n  catch (err) {\n    abort(err);\n  }\n}\n\nfunction getBinaryPromise() {\n  // If we don't have the binary yet, try to to load it asynchronously.\n  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.\n  // See https://github.com/github/fetch/pull/92#issuecomment-140665932\n  // Cordova or Electron apps are typically loaded from a file:// url.\n  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.\n  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n    if (typeof fetch == 'function'\n      && !isFileURI(wasmBinaryFile)\n    ) {\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\n        if (!response['ok']) {\n          throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n        }\n        return response['arrayBuffer']();\n      }).catch(function () {\n          return getBinary(wasmBinaryFile);\n      });\n    }\n    else {\n      if (readAsync) {\n        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)\n        return new Promise(function(resolve, reject) {\n          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)\n        });\n      }\n    }\n  }\n\n  // Otherwise, getBinary should be able to get it synchronously\n  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });\n}\n\n// Create the wasm instance.\n// Receives the wasm imports, returns the exports.\nfunction createWasm() {\n  // prepare imports\n  var info = {\n    'env': asmLibraryArg,\n    'wasi_snapshot_preview1': asmLibraryArg,\n  };\n  // Load the wasm module and create an instance of using native support in the JS engine.\n  // handle a generated wasm instance, receiving its exports and\n  // performing other necessary setup\n  /** @param {WebAssembly.Module=} module*/\n  function receiveInstance(instance, module) {\n    var exports = instance.exports;\n\n    Module['asm'] = exports;\n\n    wasmMemory = Module['asm']['memory'];\n    updateGlobalBufferAndViews(wasmMemory.buffer);\n\n    wasmTable = Module['asm']['__indirect_function_table'];\n\n    addOnInit(Module['asm']['__wasm_call_ctors']);\n\n    removeRunDependency('wasm-instantiate');\n\n  }\n  // we can't run yet (except in a pthread, where we have a custom sync instantiator)\n  addRunDependency('wasm-instantiate');\n\n  // Prefer streaming instantiation if available.\n  function receiveInstantiationResult(result) {\n    // 'result' is a ResultObject object which has both the module and instance.\n    // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.\n    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.\n    receiveInstance(result['instance']);\n  }\n\n  function instantiateArrayBuffer(receiver) {\n    return getBinaryPromise().then(function(binary) {\n      return WebAssembly.instantiate(binary, info);\n    }).then(function (instance) {\n      return instance;\n    }).then(receiver, function(reason) {\n      err('failed to asynchronously prepare wasm: ' + reason);\n\n      abort(reason);\n    });\n  }\n\n  function instantiateAsync() {\n    if (!wasmBinary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(wasmBinaryFile) &&\n        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.\n        !isFileURI(wasmBinaryFile) &&\n        // Avoid instantiateStreaming() on Node.js environment for now, as while\n        // Node.js v18.1.0 implements it, it does not have a full fetch()\n        // implementation yet.\n        //\n        // Reference:\n        //   https://github.com/emscripten-core/emscripten/pull/16917\n        !ENVIRONMENT_IS_NODE &&\n        typeof fetch == 'function') {\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\n        // Suppress closure warning here since the upstream definition for\n        // instantiateStreaming only allows Promise<Repsponse> rather than\n        // an actual Response.\n        // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.\n        /** @suppress {checkTypes} */\n        var result = WebAssembly.instantiateStreaming(response, info);\n\n        return result.then(\n          receiveInstantiationResult,\n          function(reason) {\n            // We expect the most common failure cause to be a bad MIME type for the binary,\n            // in which case falling back to ArrayBuffer instantiation should work.\n            err('wasm streaming compile failed: ' + reason);\n            err('falling back to ArrayBuffer instantiation');\n            return instantiateArrayBuffer(receiveInstantiationResult);\n          });\n      });\n    } else {\n      return instantiateArrayBuffer(receiveInstantiationResult);\n    }\n  }\n\n  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\n  // to any other async startup actions they are performing.\n  // Also pthreads and wasm workers initialize the wasm instance through this path.\n  if (Module['instantiateWasm']) {\n    try {\n      var exports = Module['instantiateWasm'](info, receiveInstance);\n      return exports;\n    } catch(e) {\n      err('Module.instantiateWasm callback failed with error: ' + e);\n        // If instantiation fails, reject the module ready promise.\n        readyPromiseReject(e);\n    }\n  }\n\n  // If instantiation fails, reject the module ready promise.\n  instantiateAsync().catch(readyPromiseReject);\n  return {}; // no exports yet; we'll fill them in later\n}\n\n// Globals used by JS i64 conversions (see makeSetValue)\nvar tempDouble;\nvar tempI64;\n\n// === Body ===\n\nvar ASM_CONSTS = {\n  \n};\nfunction convertDoubleArrayToJSComplexArray(arr,vecSize) { var result = []; const bit = 8; for (let i = 0; i < vecSize; i++) { var real = getValue(arr + i*2 *bit, \"double\"); var imag = getValue(arr + i*2 *bit + bit, \"double\"); result.push({ real, imag }); } return Emval.toHandle(result); }\nfunction convertCPPCTYPEToJSComplex(real,imag) { var result = { real: real, imag: imag }; return Emval.toHandle(result); }\nfunction convertMatrix(arr,vecSize) { var size = Math.sqrt(vecSize); var result = []; const bit = 8; for (let y = 0; y < size; y++) { result[y] = []; for (let x = 0; x < size; x++) { var p = y*size+x; result[y].push({ real: getValue(arr + p*2 *bit, \"double\"), imag: getValue(arr + p*2 *bit + bit, \"double\") }); } } return Emval.toHandle(result); }\nfunction convertIntArrayToJSArray(arr,vecSize) { var result = []; const byte = 4; for (let i = 0; i < vecSize; i++) { result.push(getValue(arr + i *byte, \"i32\")); } return Emval.toHandle(result); }\nfunction ReversibleBooleanWrapper(funcPtr,n0,n1) { var re = Module['dynCall']('iii', funcPtr, [n0, n1]); return re; }\nfunction AdaptiveWrapper(funcPtr,arr,size) { var re = Module['dynCall']('iii', funcPtr, [arr, size]); return re; }\nfunction QuantumStateMultiplyElementwiseFunctionWrapper(funcPtr,num,complexArrPtr) { Module['dynCall']('vii', funcPtr, [num, complexArrPtr]); }\n\n\n\n\n\n  /** @constructor */\n  function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = 'Program terminated with exit(' + status + ')';\n      this.status = status;\n    }\n\n  function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        // Pass the module as the first argument.\n        callbacks.shift()(Module);\n      }\n    }\n\n  function withStackSave(f) {\n      var stack = stackSave();\n      var ret = f();\n      stackRestore(stack);\n      return ret;\n    }\n  function demangle(func) {\n      return func;\n    }\n\n  function demangleAll(text) {\n      var regex =\n        /\\b_Z[\\w\\d_]+/g;\n      return text.replace(regex,\n        function(x) {\n          var y = demangle(x);\n          return x === y ? x : (y + ' [' + x + ']');\n        });\n    }\n\n  \n    /**\n     * @param {number} ptr\n     * @param {string} type\n     */\n  function getValue(ptr, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1': return HEAP8[((ptr)>>0)];\n        case 'i8': return HEAP8[((ptr)>>0)];\n        case 'i16': return HEAP16[((ptr)>>1)];\n        case 'i32': return HEAP32[((ptr)>>2)];\n        case 'i64': return HEAP32[((ptr)>>2)];\n        case 'float': return HEAPF32[((ptr)>>2)];\n        case 'double': return HEAPF64[((ptr)>>3)];\n        case '*': return HEAPU32[((ptr)>>2)];\n        default: abort('invalid type for getValue: ' + type);\n      }\n      return null;\n    }\n\n  function handleException(e) {\n      // Certain exception types we do not treat as errors since they are used for\n      // internal control flow.\n      // 1. ExitStatus, which is thrown by exit()\n      // 2. \"unwind\", which is thrown by emscripten_unwind_to_js_event_loop() and others\n      //    that wish to return to JS event loop.\n      if (e instanceof ExitStatus || e == 'unwind') {\n        return EXITSTATUS;\n      }\n      quit_(1, e);\n    }\n\n  function intArrayToString(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      var chr = array[i];\n      if (chr > 0xFF) {\n        if (ASSERTIONS) {\n          assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n        }\n        chr &= 0xFF;\n      }\n      ret.push(String.fromCharCode(chr));\n    }\n    return ret.join('');\n  }\n\n  function jsStackTrace() {\n      var error = new Error();\n      if (!error.stack) {\n        // IE10+ special cases: It does have callstack info, but it is only\n        // populated if an Error object is thrown, so try that as a special-case.\n        try {\n          throw new Error();\n        } catch(e) {\n          error = e;\n        }\n        if (!error.stack) {\n          return '(no stack trace available)';\n        }\n      }\n      return error.stack.toString();\n    }\n\n  \n    /**\n     * @param {number} ptr\n     * @param {number} value\n     * @param {string} type\n     */\n  function setValue(ptr, value, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1': HEAP8[((ptr)>>0)] = value; break;\n        case 'i8': HEAP8[((ptr)>>0)] = value; break;\n        case 'i16': HEAP16[((ptr)>>1)] = value; break;\n        case 'i32': HEAP32[((ptr)>>2)] = value; break;\n        case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;\n        case 'float': HEAPF32[((ptr)>>2)] = value; break;\n        case 'double': HEAPF64[((ptr)>>3)] = value; break;\n        case '*': HEAPU32[((ptr)>>2)] = value; break;\n        default: abort('invalid type for setValue: ' + type);\n      }\n    }\n\n  function stackTrace() {\n      var js = jsStackTrace();\n      if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n      return demangleAll(js);\n    }\n\n  function writeArrayToMemory(array, buffer) {\n      HEAP8.set(array, buffer);\n    }\n\n  function ___assert_fail(condition, filename, line, func) {\n      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);\n    }\n\n  function ___cxa_allocate_exception(size) {\n      // Thrown object is prepended by exception metadata block\n      return _malloc(size + 24) + 24;\n    }\n\n  var exceptionCaught =  [];\n  \n  function exception_addRef(info) {\n      info.add_ref();\n    }\n  \n  var uncaughtExceptionCount = 0;\n  function ___cxa_begin_catch(ptr) {\n      var info = new ExceptionInfo(ptr);\n      if (!info.get_caught()) {\n        info.set_caught(true);\n        uncaughtExceptionCount--;\n      }\n      info.set_rethrown(false);\n      exceptionCaught.push(info);\n      exception_addRef(info);\n      return info.get_exception_ptr();\n    }\n\n  var exceptionLast = 0;\n  \n  /** @constructor */\n  function ExceptionInfo(excPtr) {\n      this.excPtr = excPtr;\n      this.ptr = excPtr - 24;\n  \n      this.set_type = function(type) {\n        HEAPU32[(((this.ptr)+(4))>>2)] = type;\n      };\n  \n      this.get_type = function() {\n        return HEAPU32[(((this.ptr)+(4))>>2)];\n      };\n  \n      this.set_destructor = function(destructor) {\n        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;\n      };\n  \n      this.get_destructor = function() {\n        return HEAPU32[(((this.ptr)+(8))>>2)];\n      };\n  \n      this.set_refcount = function(refcount) {\n        HEAP32[((this.ptr)>>2)] = refcount;\n      };\n  \n      this.set_caught = function (caught) {\n        caught = caught ? 1 : 0;\n        HEAP8[(((this.ptr)+(12))>>0)] = caught;\n      };\n  \n      this.get_caught = function () {\n        return HEAP8[(((this.ptr)+(12))>>0)] != 0;\n      };\n  \n      this.set_rethrown = function (rethrown) {\n        rethrown = rethrown ? 1 : 0;\n        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;\n      };\n  \n      this.get_rethrown = function () {\n        return HEAP8[(((this.ptr)+(13))>>0)] != 0;\n      };\n  \n      // Initialize native structure fields. Should be called once after allocated.\n      this.init = function(type, destructor) {\n        this.set_adjusted_ptr(0);\n        this.set_type(type);\n        this.set_destructor(destructor);\n        this.set_refcount(0);\n        this.set_caught(false);\n        this.set_rethrown(false);\n      }\n  \n      this.add_ref = function() {\n        var value = HEAP32[((this.ptr)>>2)];\n        HEAP32[((this.ptr)>>2)] = value + 1;\n      };\n  \n      // Returns true if last reference released.\n      this.release_ref = function() {\n        var prev = HEAP32[((this.ptr)>>2)];\n        HEAP32[((this.ptr)>>2)] = prev - 1;\n        return prev === 1;\n      };\n  \n      this.set_adjusted_ptr = function(adjustedPtr) {\n        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;\n      };\n  \n      this.get_adjusted_ptr = function() {\n        return HEAPU32[(((this.ptr)+(16))>>2)];\n      };\n  \n      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted\n      // when the pointer is casted to some of the exception object base classes (e.g. when virtual\n      // inheritance is used). When a pointer is thrown this method should return the thrown pointer\n      // itself.\n      this.get_exception_ptr = function() {\n        // Work around a fastcomp bug, this code is still included for some reason in a build without\n        // exceptions support.\n        var isPointer = ___cxa_is_pointer_type(this.get_type());\n        if (isPointer) {\n          return HEAPU32[((this.excPtr)>>2)];\n        }\n        var adjusted = this.get_adjusted_ptr();\n        if (adjusted !== 0) return adjusted;\n        return this.excPtr;\n      };\n    }\n  function ___cxa_free_exception(ptr) {\n        return _free(new ExceptionInfo(ptr).ptr);\n    }\n  \n  var wasmTableMirror = [];\n  function getWasmTableEntry(funcPtr) {\n      var func = wasmTableMirror[funcPtr];\n      if (!func) {\n        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;\n        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);\n      }\n      return func;\n    }\n  function exception_decRef(info) {\n      // A rethrown exception can reach refcount 0; it must not be discarded\n      // Its next handler will clear the rethrown flag and addRef it, prior to\n      // final decRef and destruction here\n      if (info.release_ref() && !info.get_rethrown()) {\n        var destructor = info.get_destructor();\n        if (destructor) {\n          // In Wasm, destructors return 'this' as in ARM\n          getWasmTableEntry(destructor)(info.excPtr);\n        }\n        ___cxa_free_exception(info.excPtr);\n      }\n    }\n  function ___cxa_end_catch() {\n      // Clear state flag.\n      _setThrew(0);\n      // Call destructor if one is registered then clear it.\n      var info = exceptionCaught.pop();\n  \n      exception_decRef(info);\n      exceptionLast = 0; // XXX in decRef?\n    }\n\n  function ___resumeException(ptr) {\n      if (!exceptionLast) { exceptionLast = ptr; }\n      throw ptr;\n    }\n  function ___cxa_find_matching_catch_2() {\n      var thrown = exceptionLast;\n      if (!thrown) {\n        // just pass through the null ptr\n        setTempRet0(0);\n        return 0;\n      }\n      var info = new ExceptionInfo(thrown);\n      info.set_adjusted_ptr(thrown);\n      var thrownType = info.get_type();\n      if (!thrownType) {\n        // just pass through the thrown ptr\n        setTempRet0(0);\n        return thrown;\n      }\n  \n      // can_catch receives a **, add indirection\n      // The different catch blocks are denoted by different types.\n      // Due to inheritance, those types may not precisely match the\n      // type of the thrown object. Find one which matches, and\n      // return the type of the catch block which should be called.\n      for (var i = 0; i < arguments.length; i++) {\n        var caughtType = arguments[i];\n        if (caughtType === 0 || caughtType === thrownType) {\n          // Catch all clause matched or exactly the same type is caught\n          break;\n        }\n        var adjusted_ptr_addr = info.ptr + 16;\n        if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {\n          setTempRet0(caughtType);\n          return thrown;\n        }\n      }\n      setTempRet0(thrownType);\n      return thrown;\n    }\n\n  function ___cxa_find_matching_catch_3() {\n      var thrown = exceptionLast;\n      if (!thrown) {\n        // just pass through the null ptr\n        setTempRet0(0);\n        return 0;\n      }\n      var info = new ExceptionInfo(thrown);\n      info.set_adjusted_ptr(thrown);\n      var thrownType = info.get_type();\n      if (!thrownType) {\n        // just pass through the thrown ptr\n        setTempRet0(0);\n        return thrown;\n      }\n  \n      // can_catch receives a **, add indirection\n      // The different catch blocks are denoted by different types.\n      // Due to inheritance, those types may not precisely match the\n      // type of the thrown object. Find one which matches, and\n      // return the type of the catch block which should be called.\n      for (var i = 0; i < arguments.length; i++) {\n        var caughtType = arguments[i];\n        if (caughtType === 0 || caughtType === thrownType) {\n          // Catch all clause matched or exactly the same type is caught\n          break;\n        }\n        var adjusted_ptr_addr = info.ptr + 16;\n        if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {\n          setTempRet0(caughtType);\n          return thrown;\n        }\n      }\n      setTempRet0(thrownType);\n      return thrown;\n    }\n\n\n  function ___cxa_rethrow() {\n      var info = exceptionCaught.pop();\n      if (!info) {\n        abort('no exception to throw');\n      }\n      var ptr = info.excPtr;\n      if (!info.get_rethrown()) {\n        // Only pop if the corresponding push was through rethrow_primary_exception\n        exceptionCaught.push(info);\n        info.set_rethrown(true);\n        info.set_caught(false);\n        uncaughtExceptionCount++;\n      }\n      exceptionLast = ptr;\n      throw ptr;\n    }\n\n  function ___cxa_throw(ptr, type, destructor) {\n      var info = new ExceptionInfo(ptr);\n      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.\n      info.init(type, destructor);\n      exceptionLast = ptr;\n      uncaughtExceptionCount++;\n      throw ptr;\n    }\n\n  function ___cxa_uncaught_exceptions() {\n      return uncaughtExceptionCount;\n    }\n\n\n  var structRegistrations = {};\n  \n  function runDestructors(destructors) {\n      while (destructors.length) {\n        var ptr = destructors.pop();\n        var del = destructors.pop();\n        del(ptr);\n      }\n    }\n  \n  function simpleReadValueFromPointer(pointer) {\n      return this['fromWireType'](HEAP32[((pointer)>>2)]);\n    }\n  \n  var awaitingDependencies = {};\n  \n  var registeredTypes = {};\n  \n  var typeDependencies = {};\n  \n  var char_0 = 48;\n  \n  var char_9 = 57;\n  function makeLegalFunctionName(name) {\n      if (undefined === name) {\n        return '_unknown';\n      }\n      name = name.replace(/[^a-zA-Z0-9_]/g, '$');\n      var f = name.charCodeAt(0);\n      if (f >= char_0 && f <= char_9) {\n        return '_' + name;\n      }\n      return name;\n    }\n  function createNamedFunction(name, body) {\n      name = makeLegalFunctionName(name);\n      /*jshint evil:true*/\n      return new Function(\n          \"body\",\n          \"return function \" + name + \"() {\\n\" +\n          \"    \\\"use strict\\\";\" +\n          \"    return body.apply(this, arguments);\\n\" +\n          \"};\\n\"\n      )(body);\n    }\n  function extendError(baseErrorType, errorName) {\n      var errorClass = createNamedFunction(errorName, function(message) {\n        this.name = errorName;\n        this.message = message;\n  \n        var stack = (new Error(message)).stack;\n        if (stack !== undefined) {\n          this.stack = this.toString() + '\\n' +\n              stack.replace(/^Error(:[^\\n]*)?\\n/, '');\n        }\n      });\n      errorClass.prototype = Object.create(baseErrorType.prototype);\n      errorClass.prototype.constructor = errorClass;\n      errorClass.prototype.toString = function() {\n        if (this.message === undefined) {\n          return this.name;\n        } else {\n          return this.name + ': ' + this.message;\n        }\n      };\n  \n      return errorClass;\n    }\n  var InternalError = undefined;\n  function throwInternalError(message) {\n      throw new InternalError(message);\n    }\n  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {\n      myTypes.forEach(function(type) {\n          typeDependencies[type] = dependentTypes;\n      });\n  \n      function onComplete(typeConverters) {\n          var myTypeConverters = getTypeConverters(typeConverters);\n          if (myTypeConverters.length !== myTypes.length) {\n              throwInternalError('Mismatched type converter count');\n          }\n          for (var i = 0; i < myTypes.length; ++i) {\n              registerType(myTypes[i], myTypeConverters[i]);\n          }\n      }\n  \n      var typeConverters = new Array(dependentTypes.length);\n      var unregisteredTypes = [];\n      var registered = 0;\n      dependentTypes.forEach((dt, i) => {\n        if (registeredTypes.hasOwnProperty(dt)) {\n          typeConverters[i] = registeredTypes[dt];\n        } else {\n          unregisteredTypes.push(dt);\n          if (!awaitingDependencies.hasOwnProperty(dt)) {\n            awaitingDependencies[dt] = [];\n          }\n          awaitingDependencies[dt].push(() => {\n            typeConverters[i] = registeredTypes[dt];\n            ++registered;\n            if (registered === unregisteredTypes.length) {\n              onComplete(typeConverters);\n            }\n          });\n        }\n      });\n      if (0 === unregisteredTypes.length) {\n        onComplete(typeConverters);\n      }\n    }\n  function __embind_finalize_value_object(structType) {\n      var reg = structRegistrations[structType];\n      delete structRegistrations[structType];\n  \n      var rawConstructor = reg.rawConstructor;\n      var rawDestructor = reg.rawDestructor;\n      var fieldRecords = reg.fields;\n      var fieldTypes = fieldRecords.map((field) => field.getterReturnType).\n                concat(fieldRecords.map((field) => field.setterArgumentType));\n      whenDependentTypesAreResolved([structType], fieldTypes, (fieldTypes) => {\n        var fields = {};\n        fieldRecords.forEach((field, i) => {\n          var fieldName = field.fieldName;\n          var getterReturnType = fieldTypes[i];\n          var getter = field.getter;\n          var getterContext = field.getterContext;\n          var setterArgumentType = fieldTypes[i + fieldRecords.length];\n          var setter = field.setter;\n          var setterContext = field.setterContext;\n          fields[fieldName] = {\n            read: (ptr) => {\n              return getterReturnType['fromWireType'](\n                  getter(getterContext, ptr));\n            },\n            write: (ptr, o) => {\n              var destructors = [];\n              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));\n              runDestructors(destructors);\n            }\n          };\n        });\n  \n        return [{\n          name: reg.name,\n          'fromWireType': function(ptr) {\n            var rv = {};\n            for (var i in fields) {\n              rv[i] = fields[i].read(ptr);\n            }\n            rawDestructor(ptr);\n            return rv;\n          },\n          'toWireType': function(destructors, o) {\n            // todo: Here we have an opportunity for -O3 level \"unsafe\" optimizations:\n            // assume all fields are present without checking.\n            for (var fieldName in fields) {\n              if (!(fieldName in o)) {\n                throw new TypeError('Missing field:  \"' + fieldName + '\"');\n              }\n            }\n            var ptr = rawConstructor();\n            for (fieldName in fields) {\n              fields[fieldName].write(ptr, o[fieldName]);\n            }\n            if (destructors !== null) {\n              destructors.push(rawDestructor, ptr);\n            }\n            return ptr;\n          },\n          'argPackAdvance': 8,\n          'readValueFromPointer': simpleReadValueFromPointer,\n          destructorFunction: rawDestructor,\n        }];\n      });\n    }\n\n  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}\n\n  function getShiftFromSize(size) {\n      switch (size) {\n          case 1: return 0;\n          case 2: return 1;\n          case 4: return 2;\n          case 8: return 3;\n          default:\n              throw new TypeError('Unknown type size: ' + size);\n      }\n    }\n  \n  function embind_init_charCodes() {\n      var codes = new Array(256);\n      for (var i = 0; i < 256; ++i) {\n          codes[i] = String.fromCharCode(i);\n      }\n      embind_charCodes = codes;\n    }\n  var embind_charCodes = undefined;\n  function readLatin1String(ptr) {\n      var ret = \"\";\n      var c = ptr;\n      while (HEAPU8[c]) {\n          ret += embind_charCodes[HEAPU8[c++]];\n      }\n      return ret;\n    }\n  \n  var BindingError = undefined;\n  function throwBindingError(message) {\n      throw new BindingError(message);\n    }\n  /** @param {Object=} options */\n  function registerType(rawType, registeredInstance, options = {}) {\n      if (!('argPackAdvance' in registeredInstance)) {\n          throw new TypeError('registerType registeredInstance requires argPackAdvance');\n      }\n  \n      var name = registeredInstance.name;\n      if (!rawType) {\n          throwBindingError('type \"' + name + '\" must have a positive integer typeid pointer');\n      }\n      if (registeredTypes.hasOwnProperty(rawType)) {\n          if (options.ignoreDuplicateRegistrations) {\n              return;\n          } else {\n              throwBindingError(\"Cannot register type '\" + name + \"' twice\");\n          }\n      }\n  \n      registeredTypes[rawType] = registeredInstance;\n      delete typeDependencies[rawType];\n  \n      if (awaitingDependencies.hasOwnProperty(rawType)) {\n        var callbacks = awaitingDependencies[rawType];\n        delete awaitingDependencies[rawType];\n        callbacks.forEach((cb) => cb());\n      }\n    }\n  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {\n      var shift = getShiftFromSize(size);\n  \n      name = readLatin1String(name);\n      registerType(rawType, {\n          name: name,\n          'fromWireType': function(wt) {\n              // ambiguous emscripten ABI: sometimes return values are\n              // true or false, and sometimes integers (0 or 1)\n              return !!wt;\n          },\n          'toWireType': function(destructors, o) {\n              return o ? trueValue : falseValue;\n          },\n          'argPackAdvance': 8,\n          'readValueFromPointer': function(pointer) {\n              // TODO: if heap is fixed (like in asm.js) this could be executed outside\n              var heap;\n              if (size === 1) {\n                  heap = HEAP8;\n              } else if (size === 2) {\n                  heap = HEAP16;\n              } else if (size === 4) {\n                  heap = HEAP32;\n              } else {\n                  throw new TypeError(\"Unknown boolean type size: \" + name);\n              }\n              return this['fromWireType'](heap[pointer >> shift]);\n          },\n          destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  function ClassHandle_isAliasOf(other) {\n      if (!(this instanceof ClassHandle)) {\n        return false;\n      }\n      if (!(other instanceof ClassHandle)) {\n        return false;\n      }\n  \n      var leftClass = this.$$.ptrType.registeredClass;\n      var left = this.$$.ptr;\n      var rightClass = other.$$.ptrType.registeredClass;\n      var right = other.$$.ptr;\n  \n      while (leftClass.baseClass) {\n        left = leftClass.upcast(left);\n        leftClass = leftClass.baseClass;\n      }\n  \n      while (rightClass.baseClass) {\n        right = rightClass.upcast(right);\n        rightClass = rightClass.baseClass;\n      }\n  \n      return leftClass === rightClass && left === right;\n    }\n  \n  function shallowCopyInternalPointer(o) {\n      return {\n        count: o.count,\n        deleteScheduled: o.deleteScheduled,\n        preservePointerOnDelete: o.preservePointerOnDelete,\n        ptr: o.ptr,\n        ptrType: o.ptrType,\n        smartPtr: o.smartPtr,\n        smartPtrType: o.smartPtrType,\n      };\n    }\n  \n  function throwInstanceAlreadyDeleted(obj) {\n      function getInstanceTypeName(handle) {\n        return handle.$$.ptrType.registeredClass.name;\n      }\n      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');\n    }\n  \n  var finalizationRegistry = false;\n  \n  function detachFinalizer(handle) {}\n  \n  function runDestructor($$) {\n      if ($$.smartPtr) {\n        $$.smartPtrType.rawDestructor($$.smartPtr);\n      } else {\n        $$.ptrType.registeredClass.rawDestructor($$.ptr);\n      }\n    }\n  function releaseClassHandle($$) {\n      $$.count.value -= 1;\n      var toDelete = 0 === $$.count.value;\n      if (toDelete) {\n        runDestructor($$);\n      }\n    }\n  \n  function downcastPointer(ptr, ptrClass, desiredClass) {\n      if (ptrClass === desiredClass) {\n        return ptr;\n      }\n      if (undefined === desiredClass.baseClass) {\n        return null; // no conversion\n      }\n  \n      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);\n      if (rv === null) {\n        return null;\n      }\n      return desiredClass.downcast(rv);\n    }\n  \n  var registeredPointers = {};\n  \n  function getInheritedInstanceCount() {\n      return Object.keys(registeredInstances).length;\n    }\n  \n  function getLiveInheritedInstances() {\n      var rv = [];\n      for (var k in registeredInstances) {\n        if (registeredInstances.hasOwnProperty(k)) {\n          rv.push(registeredInstances[k]);\n        }\n      }\n      return rv;\n    }\n  \n  var deletionQueue = [];\n  function flushPendingDeletes() {\n      while (deletionQueue.length) {\n        var obj = deletionQueue.pop();\n        obj.$$.deleteScheduled = false;\n        obj['delete']();\n      }\n    }\n  \n  var delayFunction = undefined;\n  function setDelayFunction(fn) {\n      delayFunction = fn;\n      if (deletionQueue.length && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n    }\n  function init_embind() {\n      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;\n      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;\n      Module['flushPendingDeletes'] = flushPendingDeletes;\n      Module['setDelayFunction'] = setDelayFunction;\n    }\n  var registeredInstances = {};\n  \n  function getBasestPointer(class_, ptr) {\n      if (ptr === undefined) {\n          throwBindingError('ptr should not be undefined');\n      }\n      while (class_.baseClass) {\n          ptr = class_.upcast(ptr);\n          class_ = class_.baseClass;\n      }\n      return ptr;\n    }\n  function getInheritedInstance(class_, ptr) {\n      ptr = getBasestPointer(class_, ptr);\n      return registeredInstances[ptr];\n    }\n  \n  function makeClassHandle(prototype, record) {\n      if (!record.ptrType || !record.ptr) {\n        throwInternalError('makeClassHandle requires ptr and ptrType');\n      }\n      var hasSmartPtrType = !!record.smartPtrType;\n      var hasSmartPtr = !!record.smartPtr;\n      if (hasSmartPtrType !== hasSmartPtr) {\n        throwInternalError('Both smartPtrType and smartPtr must be specified');\n      }\n      record.count = { value: 1 };\n      return attachFinalizer(Object.create(prototype, {\n        $$: {\n            value: record,\n        },\n      }));\n    }\n  function RegisteredPointer_fromWireType(ptr) {\n      // ptr is a raw pointer (or a raw smartpointer)\n  \n      // rawPointer is a maybe-null raw pointer\n      var rawPointer = this.getPointee(ptr);\n      if (!rawPointer) {\n        this.destructor(ptr);\n        return null;\n      }\n  \n      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);\n      if (undefined !== registeredInstance) {\n        // JS object has been neutered, time to repopulate it\n        if (0 === registeredInstance.$$.count.value) {\n          registeredInstance.$$.ptr = rawPointer;\n          registeredInstance.$$.smartPtr = ptr;\n          return registeredInstance['clone']();\n        } else {\n          // else, just increment reference count on existing object\n          // it already has a reference to the smart pointer\n          var rv = registeredInstance['clone']();\n          this.destructor(ptr);\n          return rv;\n        }\n      }\n  \n      function makeDefaultHandle() {\n        if (this.isSmartPointer) {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this.pointeeType,\n            ptr: rawPointer,\n            smartPtrType: this,\n            smartPtr: ptr,\n          });\n        } else {\n          return makeClassHandle(this.registeredClass.instancePrototype, {\n            ptrType: this,\n            ptr: ptr,\n          });\n        }\n      }\n  \n      var actualType = this.registeredClass.getActualType(rawPointer);\n      var registeredPointerRecord = registeredPointers[actualType];\n      if (!registeredPointerRecord) {\n        return makeDefaultHandle.call(this);\n      }\n  \n      var toType;\n      if (this.isConst) {\n        toType = registeredPointerRecord.constPointerType;\n      } else {\n        toType = registeredPointerRecord.pointerType;\n      }\n      var dp = downcastPointer(\n          rawPointer,\n          this.registeredClass,\n          toType.registeredClass);\n      if (dp === null) {\n        return makeDefaultHandle.call(this);\n      }\n      if (this.isSmartPointer) {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n          smartPtrType: this,\n          smartPtr: ptr,\n        });\n      } else {\n        return makeClassHandle(toType.registeredClass.instancePrototype, {\n          ptrType: toType,\n          ptr: dp,\n        });\n      }\n    }\n  function attachFinalizer(handle) {\n      if ('undefined' === typeof FinalizationRegistry) {\n        attachFinalizer = (handle) => handle;\n        return handle;\n      }\n      // If the running environment has a FinalizationRegistry (see\n      // https://github.com/tc39/proposal-weakrefs), then attach finalizers\n      // for class handles.  We check for the presence of FinalizationRegistry\n      // at run-time, not build-time.\n      finalizationRegistry = new FinalizationRegistry((info) => {\n        releaseClassHandle(info.$$);\n      });\n      attachFinalizer = (handle) => {\n        var $$ = handle.$$;\n        var hasSmartPtr = !!$$.smartPtr;\n        if (hasSmartPtr) {\n          // We should not call the destructor on raw pointers in case other code expects the pointee to live\n          var info = { $$: $$ };\n          finalizationRegistry.register(handle, info, handle);\n        }\n        return handle;\n      };\n      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);\n      return attachFinalizer(handle);\n    }\n  function ClassHandle_clone() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n  \n      if (this.$$.preservePointerOnDelete) {\n        this.$$.count.value += 1;\n        return this;\n      } else {\n        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {\n          $$: {\n            value: shallowCopyInternalPointer(this.$$),\n          }\n        }));\n  \n        clone.$$.count.value += 1;\n        clone.$$.deleteScheduled = false;\n        return clone;\n      }\n    }\n  \n  function ClassHandle_delete() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n  \n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError('Object already scheduled for deletion');\n      }\n  \n      detachFinalizer(this);\n      releaseClassHandle(this.$$);\n  \n      if (!this.$$.preservePointerOnDelete) {\n        this.$$.smartPtr = undefined;\n        this.$$.ptr = undefined;\n      }\n    }\n  \n  function ClassHandle_isDeleted() {\n      return !this.$$.ptr;\n    }\n  \n  function ClassHandle_deleteLater() {\n      if (!this.$$.ptr) {\n        throwInstanceAlreadyDeleted(this);\n      }\n      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {\n        throwBindingError('Object already scheduled for deletion');\n      }\n      deletionQueue.push(this);\n      if (deletionQueue.length === 1 && delayFunction) {\n        delayFunction(flushPendingDeletes);\n      }\n      this.$$.deleteScheduled = true;\n      return this;\n    }\n  function init_ClassHandle() {\n      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;\n      ClassHandle.prototype['clone'] = ClassHandle_clone;\n      ClassHandle.prototype['delete'] = ClassHandle_delete;\n      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;\n      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;\n    }\n  function ClassHandle() {\n    }\n  \n  function ensureOverloadTable(proto, methodName, humanName) {\n      if (undefined === proto[methodName].overloadTable) {\n        var prevFunc = proto[methodName];\n        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.\n        proto[methodName] = function() {\n          // TODO This check can be removed in -O3 level \"unsafe\" optimizations.\n          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {\n              throwBindingError(\"Function '\" + humanName + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + proto[methodName].overloadTable + \")!\");\n          }\n          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);\n        };\n        // Move the previous function into the overload table.\n        proto[methodName].overloadTable = [];\n        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;\n      }\n    }\n  /** @param {number=} numArguments */\n  function exposePublicSymbol(name, value, numArguments) {\n      if (Module.hasOwnProperty(name)) {\n        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {\n          throwBindingError(\"Cannot register public name '\" + name + \"' twice\");\n        }\n  \n        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector\n        // that routes between the two.\n        ensureOverloadTable(Module, name, name);\n        if (Module.hasOwnProperty(numArguments)) {\n            throwBindingError(\"Cannot register multiple overloads of a function with the same number of arguments (\" + numArguments + \")!\");\n        }\n        // Add the new function into the overload table.\n        Module[name].overloadTable[numArguments] = value;\n      }\n      else {\n        Module[name] = value;\n        if (undefined !== numArguments) {\n          Module[name].numArguments = numArguments;\n        }\n      }\n    }\n  \n  /** @constructor */\n  function RegisteredClass(name,\n                               constructor,\n                               instancePrototype,\n                               rawDestructor,\n                               baseClass,\n                               getActualType,\n                               upcast,\n                               downcast) {\n      this.name = name;\n      this.constructor = constructor;\n      this.instancePrototype = instancePrototype;\n      this.rawDestructor = rawDestructor;\n      this.baseClass = baseClass;\n      this.getActualType = getActualType;\n      this.upcast = upcast;\n      this.downcast = downcast;\n      this.pureVirtualFunctions = [];\n    }\n  \n  function upcastPointer(ptr, ptrClass, desiredClass) {\n      while (ptrClass !== desiredClass) {\n        if (!ptrClass.upcast) {\n          throwBindingError(\"Expected null or instance of \" + desiredClass.name + \", got an instance of \" + ptrClass.name);\n        }\n        ptr = ptrClass.upcast(ptr);\n        ptrClass = ptrClass.baseClass;\n      }\n      return ptr;\n    }\n  function constNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n        return 0;\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n  \n  function genericPointerToWireType(destructors, handle) {\n      var ptr;\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n  \n        if (this.isSmartPointer) {\n          ptr = this.rawConstructor();\n          if (destructors !== null) {\n            destructors.push(this.rawDestructor, ptr);\n          }\n          return ptr;\n        } else {\n          return 0;\n        }\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      if (!this.isConst && handle.$$.ptrType.isConst) {\n        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n  \n      if (this.isSmartPointer) {\n        // TODO: this is not strictly true\n        // We could support BY_EMVAL conversions from raw pointers to smart pointers\n        // because the smart pointer can hold a reference to the handle\n        if (undefined === handle.$$.smartPtr) {\n          throwBindingError('Passing raw pointer to smart pointer is illegal');\n        }\n  \n        switch (this.sharingPolicy) {\n          case 0: // NONE\n            // no upcasting\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);\n            }\n            break;\n  \n          case 1: // INTRUSIVE\n            ptr = handle.$$.smartPtr;\n            break;\n  \n          case 2: // BY_EMVAL\n            if (handle.$$.smartPtrType === this) {\n              ptr = handle.$$.smartPtr;\n            } else {\n              var clonedHandle = handle['clone']();\n              ptr = this.rawShare(\n                ptr,\n                Emval.toHandle(function() {\n                  clonedHandle['delete']();\n                })\n              );\n              if (destructors !== null) {\n                destructors.push(this.rawDestructor, ptr);\n              }\n            }\n            break;\n  \n          default:\n            throwBindingError('Unsupporting sharing policy');\n        }\n      }\n      return ptr;\n    }\n  \n  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {\n      if (handle === null) {\n        if (this.isReference) {\n          throwBindingError('null is not a valid ' + this.name);\n        }\n        return 0;\n      }\n  \n      if (!handle.$$) {\n        throwBindingError('Cannot pass \"' + embindRepr(handle) + '\" as a ' + this.name);\n      }\n      if (!handle.$$.ptr) {\n        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);\n      }\n      if (handle.$$.ptrType.isConst) {\n          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);\n      }\n      var handleClass = handle.$$.ptrType.registeredClass;\n      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);\n      return ptr;\n    }\n  \n  function RegisteredPointer_getPointee(ptr) {\n      if (this.rawGetPointee) {\n        ptr = this.rawGetPointee(ptr);\n      }\n      return ptr;\n    }\n  \n  function RegisteredPointer_destructor(ptr) {\n      if (this.rawDestructor) {\n        this.rawDestructor(ptr);\n      }\n    }\n  \n  function RegisteredPointer_deleteObject(handle) {\n      if (handle !== null) {\n        handle['delete']();\n      }\n    }\n  function init_RegisteredPointer() {\n      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;\n      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;\n      RegisteredPointer.prototype['argPackAdvance'] = 8;\n      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;\n      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;\n      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;\n    }\n  /** @constructor\n      @param {*=} pointeeType,\n      @param {*=} sharingPolicy,\n      @param {*=} rawGetPointee,\n      @param {*=} rawConstructor,\n      @param {*=} rawShare,\n      @param {*=} rawDestructor,\n       */\n  function RegisteredPointer(\n      name,\n      registeredClass,\n      isReference,\n      isConst,\n  \n      // smart pointer properties\n      isSmartPointer,\n      pointeeType,\n      sharingPolicy,\n      rawGetPointee,\n      rawConstructor,\n      rawShare,\n      rawDestructor\n    ) {\n      this.name = name;\n      this.registeredClass = registeredClass;\n      this.isReference = isReference;\n      this.isConst = isConst;\n  \n      // smart pointer properties\n      this.isSmartPointer = isSmartPointer;\n      this.pointeeType = pointeeType;\n      this.sharingPolicy = sharingPolicy;\n      this.rawGetPointee = rawGetPointee;\n      this.rawConstructor = rawConstructor;\n      this.rawShare = rawShare;\n      this.rawDestructor = rawDestructor;\n  \n      if (!isSmartPointer && registeredClass.baseClass === undefined) {\n        if (isConst) {\n          this['toWireType'] = constNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        } else {\n          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;\n          this.destructorFunction = null;\n        }\n      } else {\n        this['toWireType'] = genericPointerToWireType;\n        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns\n        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.\n        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in\n        //       craftInvokerFunction altogether.\n      }\n    }\n  \n  /** @param {number=} numArguments */\n  function replacePublicSymbol(name, value, numArguments) {\n      if (!Module.hasOwnProperty(name)) {\n        throwInternalError('Replacing nonexistant public symbol');\n      }\n      // If there's an overload table for this symbol, replace the symbol in the overload table instead.\n      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {\n        Module[name].overloadTable[numArguments] = value;\n      }\n      else {\n        Module[name] = value;\n        Module[name].argCount = numArguments;\n      }\n    }\n  \n  function dynCallLegacy(sig, ptr, args) {\n      var f = Module['dynCall_' + sig];\n      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);\n    }\n  /** @param {Object=} args */\n  function dynCall(sig, ptr, args) {\n      // Without WASM_BIGINT support we cannot directly call function with i64 as\n      // part of thier signature, so we rely the dynCall functions generated by\n      // wasm-emscripten-finalize\n      if (sig.includes('j')) {\n        return dynCallLegacy(sig, ptr, args);\n      }\n      var rtn = getWasmTableEntry(ptr).apply(null, args);\n      return rtn;\n    }\n  function getDynCaller(sig, ptr) {\n      var argCache = [];\n      return function() {\n        argCache.length = 0;\n        Object.assign(argCache, arguments);\n        return dynCall(sig, ptr, argCache);\n      };\n    }\n  function embind__requireFunction(signature, rawFunction) {\n      signature = readLatin1String(signature);\n  \n      function makeDynCaller() {\n        if (signature.includes('j')) {\n          return getDynCaller(signature, rawFunction);\n        }\n        return getWasmTableEntry(rawFunction);\n      }\n  \n      var fp = makeDynCaller();\n      if (typeof fp != \"function\") {\n          throwBindingError(\"unknown function pointer with signature \" + signature + \": \" + rawFunction);\n      }\n      return fp;\n    }\n  \n  var UnboundTypeError = undefined;\n  \n  function getTypeName(type) {\n      var ptr = ___getTypeName(type);\n      var rv = readLatin1String(ptr);\n      _free(ptr);\n      return rv;\n    }\n  function throwUnboundTypeError(message, types) {\n      var unboundTypes = [];\n      var seen = {};\n      function visit(type) {\n        if (seen[type]) {\n          return;\n        }\n        if (registeredTypes[type]) {\n          return;\n        }\n        if (typeDependencies[type]) {\n          typeDependencies[type].forEach(visit);\n          return;\n        }\n        unboundTypes.push(type);\n        seen[type] = true;\n      }\n      types.forEach(visit);\n  \n      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));\n    }\n  function __embind_register_class(rawType,\n                                     rawPointerType,\n                                     rawConstPointerType,\n                                     baseClassRawType,\n                                     getActualTypeSignature,\n                                     getActualType,\n                                     upcastSignature,\n                                     upcast,\n                                     downcastSignature,\n                                     downcast,\n                                     name,\n                                     destructorSignature,\n                                     rawDestructor) {\n      name = readLatin1String(name);\n      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);\n      if (upcast) {\n        upcast = embind__requireFunction(upcastSignature, upcast);\n      }\n      if (downcast) {\n        downcast = embind__requireFunction(downcastSignature, downcast);\n      }\n      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);\n      var legalFunctionName = makeLegalFunctionName(name);\n  \n      exposePublicSymbol(legalFunctionName, function() {\n        // this code cannot run if baseClassRawType is zero\n        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);\n      });\n  \n      whenDependentTypesAreResolved(\n        [rawType, rawPointerType, rawConstPointerType],\n        baseClassRawType ? [baseClassRawType] : [],\n        function(base) {\n          base = base[0];\n  \n          var baseClass;\n          var basePrototype;\n          if (baseClassRawType) {\n            baseClass = base.registeredClass;\n            basePrototype = baseClass.instancePrototype;\n          } else {\n            basePrototype = ClassHandle.prototype;\n          }\n  \n          var constructor = createNamedFunction(legalFunctionName, function() {\n            if (Object.getPrototypeOf(this) !== instancePrototype) {\n              throw new BindingError(\"Use 'new' to construct \" + name);\n            }\n            if (undefined === registeredClass.constructor_body) {\n              throw new BindingError(name + \" has no accessible constructor\");\n            }\n            var body = registeredClass.constructor_body[arguments.length];\n            if (undefined === body) {\n              throw new BindingError(\"Tried to invoke ctor of \" + name + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(registeredClass.constructor_body).toString() + \") parameters instead!\");\n            }\n            return body.apply(this, arguments);\n          });\n  \n          var instancePrototype = Object.create(basePrototype, {\n            constructor: { value: constructor },\n          });\n  \n          constructor.prototype = instancePrototype;\n  \n          var registeredClass = new RegisteredClass(name,\n                                                    constructor,\n                                                    instancePrototype,\n                                                    rawDestructor,\n                                                    baseClass,\n                                                    getActualType,\n                                                    upcast,\n                                                    downcast);\n  \n          var referenceConverter = new RegisteredPointer(name,\n                                                         registeredClass,\n                                                         true,\n                                                         false,\n                                                         false);\n  \n          var pointerConverter = new RegisteredPointer(name + '*',\n                                                       registeredClass,\n                                                       false,\n                                                       false,\n                                                       false);\n  \n          var constPointerConverter = new RegisteredPointer(name + ' const*',\n                                                            registeredClass,\n                                                            false,\n                                                            true,\n                                                            false);\n  \n          registeredPointers[rawType] = {\n            pointerType: pointerConverter,\n            constPointerType: constPointerConverter\n          };\n  \n          replacePublicSymbol(legalFunctionName, constructor);\n  \n          return [referenceConverter, pointerConverter, constPointerConverter];\n        }\n      );\n    }\n\n  function heap32VectorToArray(count, firstElement) {\n      var array = [];\n      for (var i = 0; i < count; i++) {\n          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):\n          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.\n          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);\n      }\n      return array;\n    }\n  \n  function new_(constructor, argumentList) {\n      if (!(constructor instanceof Function)) {\n        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + \" which is not a function\");\n      }\n      /*\n       * Previously, the following line was just:\n       *   function dummy() {};\n       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even\n       * though at creation, the 'dummy' has the correct constructor name.  Thus,\n       * objects created with IMVU.new would show up in the debugger as 'dummy',\n       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the\n       * issue.  Doublely-unfortunately, there's no way to write a test for this\n       * behavior.  -NRD 2013.02.22\n       */\n      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});\n      dummy.prototype = constructor.prototype;\n      var obj = new dummy;\n  \n      var r = constructor.apply(obj, argumentList);\n      return (r instanceof Object) ? r : obj;\n    }\n  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {\n      // humanName: a human-readable string name for the function to be generated.\n      // argTypes: An array that contains the embind type objects for all types in the function signature.\n      //    argTypes[0] is the type object for the function return value.\n      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.\n      //    argTypes[2...] are the actual function parameters.\n      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.\n      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.\n      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.\n      var argCount = argTypes.length;\n  \n      if (argCount < 2) {\n        throwBindingError(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n      }\n  \n      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);\n  \n      // Free functions with signature \"void function()\" do not need an invoker that marshalls between wire types.\n  // TODO: This omits argument count check - enable only at -O3 or similar.\n  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == \"void\" && !isClassMethodFunc) {\n  //       return FUNCTION_TABLE[fn];\n  //    }\n  \n      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.\n      // TODO: Remove this completely once all function invokers are being dynamically generated.\n      var needsDestructorStack = false;\n  \n      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.\n        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack\n          needsDestructorStack = true;\n          break;\n        }\n      }\n  \n      var returns = (argTypes[0].name !== \"void\");\n  \n      var argsList = \"\";\n      var argsListWired = \"\";\n      for (var i = 0; i < argCount - 2; ++i) {\n        argsList += (i!==0?\", \":\"\")+\"arg\"+i;\n        argsListWired += (i!==0?\", \":\"\")+\"arg\"+i+\"Wired\";\n      }\n  \n      var invokerFnBody =\n          \"return function \"+makeLegalFunctionName(humanName)+\"(\"+argsList+\") {\\n\" +\n          \"if (arguments.length !== \"+(argCount - 2)+\") {\\n\" +\n              \"throwBindingError('function \"+humanName+\" called with ' + arguments.length + ' arguments, expected \"+(argCount - 2)+\" args!');\\n\" +\n          \"}\\n\";\n  \n      if (needsDestructorStack) {\n        invokerFnBody += \"var destructors = [];\\n\";\n      }\n  \n      var dtorStack = needsDestructorStack ? \"destructors\" : \"null\";\n      var args1 = [\"throwBindingError\", \"invoker\", \"fn\", \"runDestructors\", \"retType\", \"classParam\"];\n      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];\n  \n      if (isClassMethodFunc) {\n        invokerFnBody += \"var thisWired = classParam.toWireType(\"+dtorStack+\", this);\\n\";\n      }\n  \n      for (var i = 0; i < argCount - 2; ++i) {\n        invokerFnBody += \"var arg\"+i+\"Wired = argType\"+i+\".toWireType(\"+dtorStack+\", arg\"+i+\"); // \"+argTypes[i+2].name+\"\\n\";\n        args1.push(\"argType\"+i);\n        args2.push(argTypes[i+2]);\n      }\n  \n      if (isClassMethodFunc) {\n        argsListWired = \"thisWired\" + (argsListWired.length > 0 ? \", \" : \"\") + argsListWired;\n      }\n  \n      invokerFnBody +=\n          (returns?\"var rv = \":\"\") + \"invoker(fn\"+(argsListWired.length>0?\", \":\"\")+argsListWired+\");\\n\";\n  \n      if (needsDestructorStack) {\n        invokerFnBody += \"runDestructors(destructors);\\n\";\n      } else {\n        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.\n          var paramName = (i === 1 ? \"thisWired\" : (\"arg\"+(i - 2)+\"Wired\"));\n          if (argTypes[i].destructorFunction !== null) {\n            invokerFnBody += paramName+\"_dtor(\"+paramName+\"); // \"+argTypes[i].name+\"\\n\";\n            args1.push(paramName+\"_dtor\");\n            args2.push(argTypes[i].destructorFunction);\n          }\n        }\n      }\n  \n      if (returns) {\n        invokerFnBody += \"var ret = retType.fromWireType(rv);\\n\" +\n                         \"return ret;\\n\";\n      } else {\n      }\n  \n      invokerFnBody += \"}\\n\";\n  \n      args1.push(invokerFnBody);\n  \n      var invokerFunction = new_(Function, args1).apply(null, args2);\n      return invokerFunction;\n    }\n  function __embind_register_class_constructor(\n      rawClassType,\n      argCount,\n      rawArgTypesAddr,\n      invokerSignature,\n      invoker,\n      rawConstructor\n    ) {\n      assert(argCount > 0);\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      invoker = embind__requireFunction(invokerSignature, invoker);\n      var args = [rawConstructor];\n      var destructors = [];\n  \n      whenDependentTypesAreResolved([], [rawClassType], function(classType) {\n        classType = classType[0];\n        var humanName = 'constructor ' + classType.name;\n  \n        if (undefined === classType.registeredClass.constructor_body) {\n          classType.registeredClass.constructor_body = [];\n        }\n        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {\n          throw new BindingError(\"Cannot register multiple constructors with identical number of parameters (\" + (argCount-1) + \") for class '\" + classType.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n        }\n        classType.registeredClass.constructor_body[argCount - 1] = () => {\n          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);\n        };\n  \n        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n          // Insert empty slot for context type (argTypes[1]).\n          argTypes.splice(1, 0, null);\n          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);\n          return [];\n        });\n        return [];\n      });\n    }\n\n  function __embind_register_class_function(rawClassType,\n                                              methodName,\n                                              argCount,\n                                              rawArgTypesAddr, // [ReturnType, ThisType, Args...]\n                                              invokerSignature,\n                                              rawInvoker,\n                                              context,\n                                              isPureVirtual) {\n      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      methodName = readLatin1String(methodName);\n      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);\n  \n      whenDependentTypesAreResolved([], [rawClassType], function(classType) {\n        classType = classType[0];\n        var humanName = classType.name + '.' + methodName;\n  \n        if (methodName.startsWith(\"@@\")) {\n          methodName = Symbol[methodName.substring(2)];\n        }\n  \n        if (isPureVirtual) {\n          classType.registeredClass.pureVirtualFunctions.push(methodName);\n        }\n  \n        function unboundTypesHandler() {\n          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);\n        }\n  \n        var proto = classType.registeredClass.instancePrototype;\n        var method = proto[methodName];\n        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {\n          // This is the first overload to be registered, OR we are replacing a\n          // function in the base class with a function in the derived class.\n          unboundTypesHandler.argCount = argCount - 2;\n          unboundTypesHandler.className = classType.name;\n          proto[methodName] = unboundTypesHandler;\n        } else {\n          // There was an existing function with the same name registered. Set up\n          // a function overload routing table.\n          ensureOverloadTable(proto, methodName, humanName);\n          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;\n        }\n  \n        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {\n          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);\n  \n          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types\n          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.\n          if (undefined === proto[methodName].overloadTable) {\n            // Set argCount in case an overload is registered later\n            memberFunction.argCount = argCount - 2;\n            proto[methodName] = memberFunction;\n          } else {\n            proto[methodName].overloadTable[argCount - 2] = memberFunction;\n          }\n  \n          return [];\n        });\n        return [];\n      });\n    }\n\n  function validateThis(this_, classType, humanName) {\n      if (!(this_ instanceof Object)) {\n        throwBindingError(humanName + ' with invalid \"this\": ' + this_);\n      }\n      if (!(this_ instanceof classType.registeredClass.constructor)) {\n        throwBindingError(humanName + ' incompatible with \"this\" of type ' + this_.constructor.name);\n      }\n      if (!this_.$$.ptr) {\n        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');\n      }\n  \n      // todo: kill this\n      return upcastPointer(this_.$$.ptr,\n                           this_.$$.ptrType.registeredClass,\n                           classType.registeredClass);\n    }\n  function __embind_register_class_property(classType,\n                                              fieldName,\n                                              getterReturnType,\n                                              getterSignature,\n                                              getter,\n                                              getterContext,\n                                              setterArgumentType,\n                                              setterSignature,\n                                              setter,\n                                              setterContext) {\n      fieldName = readLatin1String(fieldName);\n      getter = embind__requireFunction(getterSignature, getter);\n  \n      whenDependentTypesAreResolved([], [classType], function(classType) {\n        classType = classType[0];\n        var humanName = classType.name + '.' + fieldName;\n        var desc = {\n          get: function() {\n            throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);\n          },\n          enumerable: true,\n          configurable: true\n        };\n        if (setter) {\n          desc.set = () => {\n            throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);\n          };\n        } else {\n          desc.set = (v) => {\n            throwBindingError(humanName + ' is a read-only property');\n          };\n        }\n  \n        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n  \n        whenDependentTypesAreResolved(\n          [],\n          (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),\n      function(types) {\n          var getterReturnType = types[0];\n          var desc = {\n            get: function() {\n              var ptr = validateThis(this, classType, humanName + ' getter');\n              return getterReturnType['fromWireType'](getter(getterContext, ptr));\n            },\n            enumerable: true\n          };\n  \n          if (setter) {\n            setter = embind__requireFunction(setterSignature, setter);\n            var setterArgumentType = types[1];\n            desc.set = function(v) {\n              var ptr = validateThis(this, classType, humanName + ' setter');\n              var destructors = [];\n              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));\n              runDestructors(destructors);\n            };\n          }\n  \n          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);\n          return [];\n        });\n  \n        return [];\n      });\n    }\n\n  var emval_free_list = [];\n  \n  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];\n  function __emval_decref(handle) {\n      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {\n        emval_handle_array[handle] = undefined;\n        emval_free_list.push(handle);\n      }\n    }\n  \n  function count_emval_handles() {\n      var count = 0;\n      for (var i = 5; i < emval_handle_array.length; ++i) {\n        if (emval_handle_array[i] !== undefined) {\n          ++count;\n        }\n      }\n      return count;\n    }\n  \n  function get_first_emval() {\n      for (var i = 5; i < emval_handle_array.length; ++i) {\n        if (emval_handle_array[i] !== undefined) {\n          return emval_handle_array[i];\n        }\n      }\n      return null;\n    }\n  function init_emval() {\n      Module['count_emval_handles'] = count_emval_handles;\n      Module['get_first_emval'] = get_first_emval;\n    }\n  var Emval = {toValue:(handle) => {\n        if (!handle) {\n            throwBindingError('Cannot use deleted val. handle = ' + handle);\n        }\n        return emval_handle_array[handle].value;\n      },toHandle:(value) => {\n        switch (value) {\n          case undefined: return 1;\n          case null: return 2;\n          case true: return 3;\n          case false: return 4;\n          default:{\n            var handle = emval_free_list.length ?\n                emval_free_list.pop() :\n                emval_handle_array.length;\n  \n            emval_handle_array[handle] = {refcount: 1, value: value};\n            return handle;\n          }\n        }\n      }};\n  function __embind_register_emval(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(handle) {\n          var rv = Emval.toValue(handle);\n          __emval_decref(handle);\n          return rv;\n        },\n        'toWireType': function(destructors, value) {\n          return Emval.toHandle(value);\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: null, // This type does not need a destructor\n  \n        // TODO: do we need a deleteObject here?  write a test where\n        // emval is passed into JS via an interface\n      });\n    }\n\n  function embindRepr(v) {\n      if (v === null) {\n          return 'null';\n      }\n      var t = typeof v;\n      if (t === 'object' || t === 'array' || t === 'function') {\n          return v.toString();\n      } else {\n          return '' + v;\n      }\n    }\n  \n  function floatReadValueFromPointer(name, shift) {\n      switch (shift) {\n          case 2: return function(pointer) {\n              return this['fromWireType'](HEAPF32[pointer >> 2]);\n          };\n          case 3: return function(pointer) {\n              return this['fromWireType'](HEAPF64[pointer >> 3]);\n          };\n          default:\n              throw new TypeError(\"Unknown float type: \" + name);\n      }\n    }\n  function __embind_register_float(rawType, name, size) {\n      var shift = getShiftFromSize(size);\n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n           return value;\n        },\n        'toWireType': function(destructors, value) {\n          // The VM will perform JS to Wasm value conversion, according to the spec:\n          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue\n          return value;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': floatReadValueFromPointer(name, shift),\n        destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {\n      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);\n      name = readLatin1String(name);\n  \n      rawInvoker = embind__requireFunction(signature, rawInvoker);\n  \n      exposePublicSymbol(name, function() {\n        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);\n      }, argCount - 1);\n  \n      whenDependentTypesAreResolved([], argTypes, function(argTypes) {\n        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);\n        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);\n        return [];\n      });\n    }\n\n  function integerReadValueFromPointer(name, shift, signed) {\n      // integers are quite common, so generate very specialized functions\n      switch (shift) {\n          case 0: return signed ?\n              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :\n              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };\n          case 1: return signed ?\n              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :\n              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };\n          case 2: return signed ?\n              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :\n              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };\n          default:\n              throw new TypeError(\"Unknown integer type: \" + name);\n      }\n    }\n  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {\n      name = readLatin1String(name);\n      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come\n      // out as 'i32 -1'. Always treat those as max u32.\n      if (maxRange === -1) {\n          maxRange = 4294967295;\n      }\n  \n      var shift = getShiftFromSize(size);\n  \n      var fromWireType = (value) => value;\n  \n      if (minRange === 0) {\n          var bitshift = 32 - 8*size;\n          fromWireType = (value) => (value << bitshift) >>> bitshift;\n      }\n  \n      var isUnsignedType = (name.includes('unsigned'));\n      var checkAssertions = (value, toTypeName) => {\n      }\n      var toWireType;\n      if (isUnsignedType) {\n        toWireType = function(destructors, value) {\n          checkAssertions(value, this.name);\n          return value >>> 0;\n        }\n      } else {\n        toWireType = function(destructors, value) {\n          checkAssertions(value, this.name);\n          // The VM will perform JS to Wasm value conversion, according to the spec:\n          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue\n          return value;\n        }\n      }\n      registerType(primitiveType, {\n        name: name,\n        'fromWireType': fromWireType,\n        'toWireType': toWireType,\n        'argPackAdvance': 8,\n        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),\n        destructorFunction: null, // This type does not need a destructor\n      });\n    }\n\n  function __embind_register_memory_view(rawType, dataTypeIndex, name) {\n      var typeMapping = [\n        Int8Array,\n        Uint8Array,\n        Int16Array,\n        Uint16Array,\n        Int32Array,\n        Uint32Array,\n        Float32Array,\n        Float64Array,\n      ];\n  \n      var TA = typeMapping[dataTypeIndex];\n  \n      function decodeMemoryView(handle) {\n        handle = handle >> 2;\n        var heap = HEAPU32;\n        var size = heap[handle]; // in elements\n        var data = heap[handle + 1]; // byte offset into emscripten heap\n        return new TA(buffer, data, size);\n      }\n  \n      name = readLatin1String(name);\n      registerType(rawType, {\n        name: name,\n        'fromWireType': decodeMemoryView,\n        'argPackAdvance': 8,\n        'readValueFromPointer': decodeMemoryView,\n      }, {\n        ignoreDuplicateRegistrations: true,\n      });\n    }\n\n  function __embind_register_std_string(rawType, name) {\n      name = readLatin1String(name);\n      var stdStringIsUTF8\n      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>\n      = (name === \"std::string\");\n  \n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n          var length = HEAPU32[((value)>>2)];\n          var payload = value + 4;\n  \n          var str;\n          if (stdStringIsUTF8) {\n            var decodeStartPtr = payload;\n            // Looping here to support possible embedded '0' bytes\n            for (var i = 0; i <= length; ++i) {\n              var currentBytePtr = payload + i;\n              if (i == length || HEAPU8[currentBytePtr] == 0) {\n                var maxRead = currentBytePtr - decodeStartPtr;\n                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);\n                if (str === undefined) {\n                  str = stringSegment;\n                } else {\n                  str += String.fromCharCode(0);\n                  str += stringSegment;\n                }\n                decodeStartPtr = currentBytePtr + 1;\n              }\n            }\n          } else {\n            var a = new Array(length);\n            for (var i = 0; i < length; ++i) {\n              a[i] = String.fromCharCode(HEAPU8[payload + i]);\n            }\n            str = a.join('');\n          }\n  \n          _free(value);\n  \n          return str;\n        },\n        'toWireType': function(destructors, value) {\n          if (value instanceof ArrayBuffer) {\n            value = new Uint8Array(value);\n          }\n  \n          var length;\n          var valueIsOfTypeString = (typeof value == 'string');\n  \n          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {\n            throwBindingError('Cannot pass non-string to std::string');\n          }\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            length = lengthBytesUTF8(value);\n          } else {\n            length = value.length;\n          }\n  \n          // assumes 4-byte alignment\n          var base = _malloc(4 + length + 1);\n          var ptr = base + 4;\n          HEAPU32[((base)>>2)] = length;\n          if (stdStringIsUTF8 && valueIsOfTypeString) {\n            stringToUTF8(value, ptr, length + 1);\n          } else {\n            if (valueIsOfTypeString) {\n              for (var i = 0; i < length; ++i) {\n                var charCode = value.charCodeAt(i);\n                if (charCode > 255) {\n                  _free(ptr);\n                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');\n                }\n                HEAPU8[ptr + i] = charCode;\n              }\n            } else {\n              for (var i = 0; i < length; ++i) {\n                HEAPU8[ptr + i] = value[i];\n              }\n            }\n          }\n  \n          if (destructors !== null) {\n            destructors.push(_free, base);\n          }\n          return base;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: function(ptr) { _free(ptr); },\n      });\n    }\n\n  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;\n  function UTF16ToString(ptr, maxBytesToRead) {\n      var endPtr = ptr;\n      // TextDecoder needs to know the byte length in advance, it doesn't stop on\n      // null terminator by itself.\n      // Also, use the length info to avoid running tiny strings through\n      // TextDecoder, since .subarray() allocates garbage.\n      var idx = endPtr >> 1;\n      var maxIdx = idx + maxBytesToRead / 2;\n      // If maxBytesToRead is not passed explicitly, it will be undefined, and this\n      // will always evaluate to true. This saves on code size.\n      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;\n      endPtr = idx << 1;\n  \n      if (endPtr - ptr > 32 && UTF16Decoder)\n        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n  \n      // Fallback: decode without UTF16Decoder\n      var str = '';\n  \n      // If maxBytesToRead is not passed explicitly, it will be undefined, and the\n      // for-loop's condition will always evaluate to true. The loop is then\n      // terminated on the first null char.\n      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {\n        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n        if (codeUnit == 0) break;\n        // fromCharCode constructs a character from a UTF-16 code unit, so we can\n        // pass the UTF16 string right through.\n        str += String.fromCharCode(codeUnit);\n      }\n  \n      return str;\n    }\n  \n  function stringToUTF16(str, outPtr, maxBytesToWrite) {\n      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n      if (maxBytesToWrite < 2) return 0;\n      maxBytesToWrite -= 2; // Null terminator.\n      var startPtr = outPtr;\n      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\n      for (var i = 0; i < numCharsToWrite; ++i) {\n        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n        HEAP16[((outPtr)>>1)] = codeUnit;\n        outPtr += 2;\n      }\n      // Null-terminate the pointer to the HEAP.\n      HEAP16[((outPtr)>>1)] = 0;\n      return outPtr - startPtr;\n    }\n  \n  function lengthBytesUTF16(str) {\n      return str.length*2;\n    }\n  \n  function UTF32ToString(ptr, maxBytesToRead) {\n      var i = 0;\n  \n      var str = '';\n      // If maxBytesToRead is not passed explicitly, it will be undefined, and this\n      // will always evaluate to true. This saves on code size.\n      while (!(i >= maxBytesToRead / 4)) {\n        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n        if (utf32 == 0) break;\n        ++i;\n        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        if (utf32 >= 0x10000) {\n          var ch = utf32 - 0x10000;\n          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n        } else {\n          str += String.fromCharCode(utf32);\n        }\n      }\n      return str;\n    }\n  \n  function stringToUTF32(str, outPtr, maxBytesToWrite) {\n      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n      if (maxBytesToWrite < 4) return 0;\n      var startPtr = outPtr;\n      var endPtr = startPtr + maxBytesToWrite - 4;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n          var trailSurrogate = str.charCodeAt(++i);\n          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n        }\n        HEAP32[((outPtr)>>2)] = codeUnit;\n        outPtr += 4;\n        if (outPtr + 4 > endPtr) break;\n      }\n      // Null-terminate the pointer to the HEAP.\n      HEAP32[((outPtr)>>2)] = 0;\n      return outPtr - startPtr;\n    }\n  \n  function lengthBytesUTF32(str) {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n        len += 4;\n      }\n  \n      return len;\n    }\n  function __embind_register_std_wstring(rawType, charSize, name) {\n      name = readLatin1String(name);\n      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;\n      if (charSize === 2) {\n        decodeString = UTF16ToString;\n        encodeString = stringToUTF16;\n        lengthBytesUTF = lengthBytesUTF16;\n        getHeap = () => HEAPU16;\n        shift = 1;\n      } else if (charSize === 4) {\n        decodeString = UTF32ToString;\n        encodeString = stringToUTF32;\n        lengthBytesUTF = lengthBytesUTF32;\n        getHeap = () => HEAPU32;\n        shift = 2;\n      }\n      registerType(rawType, {\n        name: name,\n        'fromWireType': function(value) {\n          // Code mostly taken from _embind_register_std_string fromWireType\n          var length = HEAPU32[value >> 2];\n          var HEAP = getHeap();\n          var str;\n  \n          var decodeStartPtr = value + 4;\n          // Looping here to support possible embedded '0' bytes\n          for (var i = 0; i <= length; ++i) {\n            var currentBytePtr = value + 4 + i * charSize;\n            if (i == length || HEAP[currentBytePtr >> shift] == 0) {\n              var maxReadBytes = currentBytePtr - decodeStartPtr;\n              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);\n              if (str === undefined) {\n                str = stringSegment;\n              } else {\n                str += String.fromCharCode(0);\n                str += stringSegment;\n              }\n              decodeStartPtr = currentBytePtr + charSize;\n            }\n          }\n  \n          _free(value);\n  \n          return str;\n        },\n        'toWireType': function(destructors, value) {\n          if (!(typeof value == 'string')) {\n            throwBindingError('Cannot pass non-string to C++ string type ' + name);\n          }\n  \n          // assumes 4-byte alignment\n          var length = lengthBytesUTF(value);\n          var ptr = _malloc(4 + length + charSize);\n          HEAPU32[ptr >> 2] = length >> shift;\n  \n          encodeString(value, ptr + 4, length + charSize);\n  \n          if (destructors !== null) {\n            destructors.push(_free, ptr);\n          }\n          return ptr;\n        },\n        'argPackAdvance': 8,\n        'readValueFromPointer': simpleReadValueFromPointer,\n        destructorFunction: function(ptr) { _free(ptr); },\n      });\n    }\n\n  function __embind_register_value_object(\n      rawType,\n      name,\n      constructorSignature,\n      rawConstructor,\n      destructorSignature,\n      rawDestructor\n    ) {\n      structRegistrations[rawType] = {\n        name: readLatin1String(name),\n        rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),\n        rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),\n        fields: [],\n      };\n    }\n\n  function __embind_register_void(rawType, name) {\n      name = readLatin1String(name);\n      registerType(rawType, {\n          isVoid: true, // void return values can be optimized out sometimes\n          name: name,\n          'argPackAdvance': 0,\n          'fromWireType': function() {\n              return undefined;\n          },\n          'toWireType': function(destructors, o) {\n              // TODO: assert if anything else is given?\n              return undefined;\n          },\n      });\n    }\n\n  function requireRegisteredType(rawType, humanName) {\n      var impl = registeredTypes[rawType];\n      if (undefined === impl) {\n          throwBindingError(humanName + \" has unknown type \" + getTypeName(rawType));\n      }\n      return impl;\n    }\n  function __emval_as(handle, returnType, destructorsRef) {\n      handle = Emval.toValue(handle);\n      returnType = requireRegisteredType(returnType, 'emval::as');\n      var destructors = [];\n      var rd = Emval.toHandle(destructors);\n      HEAPU32[((destructorsRef)>>2)] = rd;\n      return returnType['toWireType'](destructors, handle);\n    }\n\n  function emval_allocateDestructors(destructorsRef) {\n      var destructors = [];\n      HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);\n      return destructors;\n    }\n  \n  var emval_symbols = {};\n  function getStringOrSymbol(address) {\n      var symbol = emval_symbols[address];\n      if (symbol === undefined) {\n        return readLatin1String(address);\n      }\n      return symbol;\n    }\n  \n  var emval_methodCallers = [];\n  function __emval_call_method(caller, handle, methodName, destructorsRef, args) {\n      caller = emval_methodCallers[caller];\n      handle = Emval.toValue(handle);\n      methodName = getStringOrSymbol(methodName);\n      return caller(handle, methodName, emval_allocateDestructors(destructorsRef), args);\n    }\n\n  function __emval_call_void_method(caller, handle, methodName, args) {\n      caller = emval_methodCallers[caller];\n      handle = Emval.toValue(handle);\n      methodName = getStringOrSymbol(methodName);\n      caller(handle, methodName, null, args);\n    }\n\n\n  function emval_get_global() {\n      if (typeof globalThis == 'object') {\n        return globalThis;\n      }\n      return (function(){\n        return Function;\n      })()('return this')();\n    }\n  function __emval_get_global(name) {\n      if (name===0) {\n        return Emval.toHandle(emval_get_global());\n      } else {\n        name = getStringOrSymbol(name);\n        return Emval.toHandle(emval_get_global()[name]);\n      }\n    }\n\n  function emval_addMethodCaller(caller) {\n      var id = emval_methodCallers.length;\n      emval_methodCallers.push(caller);\n      return id;\n    }\n  \n  function emval_lookupTypes(argCount, argTypes) {\n      var a = new Array(argCount);\n      for (var i = 0; i < argCount; ++i) {\n        a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * POINTER_SIZE))>>2)],\n                                     \"parameter \" + i);\n      }\n      return a;\n    }\n  \n  var emval_registeredMethods = [];\n  function __emval_get_method_caller(argCount, argTypes) {\n      var types = emval_lookupTypes(argCount, argTypes);\n      var retType = types[0];\n      var signatureName = retType.name + \"_$\" + types.slice(1).map(function (t) { return t.name; }).join(\"_\") + \"$\";\n      var returnId = emval_registeredMethods[signatureName];\n      if (returnId !== undefined) {\n        return returnId;\n      }\n  \n      var params = [\"retType\"];\n      var args = [retType];\n  \n      var argsList = \"\"; // 'arg0, arg1, arg2, ... , argN'\n      for (var i = 0; i < argCount - 1; ++i) {\n        argsList += (i !== 0 ? \", \" : \"\") + \"arg\" + i;\n        params.push(\"argType\" + i);\n        args.push(types[1 + i]);\n      }\n  \n      var functionName = makeLegalFunctionName(\"methodCaller_\" + signatureName);\n      var functionBody =\n          \"return function \" + functionName + \"(handle, name, destructors, args) {\\n\";\n  \n      var offset = 0;\n      for (var i = 0; i < argCount - 1; ++i) {\n          functionBody +=\n          \"    var arg\" + i + \" = argType\" + i + \".readValueFromPointer(args\" + (offset ? (\"+\"+offset) : \"\") + \");\\n\";\n          offset += types[i + 1]['argPackAdvance'];\n      }\n      functionBody +=\n          \"    var rv = handle[name](\" + argsList + \");\\n\";\n      for (var i = 0; i < argCount - 1; ++i) {\n          if (types[i + 1]['deleteObject']) {\n              functionBody +=\n              \"    argType\" + i + \".deleteObject(arg\" + i + \");\\n\";\n          }\n      }\n      if (!retType.isVoid) {\n          functionBody +=\n          \"    return retType.toWireType(destructors, rv);\\n\";\n      }\n      functionBody +=\n          \"};\\n\";\n  \n      params.push(functionBody);\n      var invokerFunction = new_(Function, params).apply(null, args);\n      returnId = emval_addMethodCaller(invokerFunction);\n      emval_registeredMethods[signatureName] = returnId;\n      return returnId;\n    }\n\n  function __emval_get_property(handle, key) {\n      handle = Emval.toValue(handle);\n      key = Emval.toValue(key);\n      return Emval.toHandle(handle[key]);\n    }\n\n  function __emval_incref(handle) {\n      if (handle > 4) {\n        emval_handle_array[handle].refcount += 1;\n      }\n    }\n\n  function __emval_new_array() {\n      return Emval.toHandle([]);\n    }\n\n  function __emval_new_cstring(v) {\n      return Emval.toHandle(getStringOrSymbol(v));\n    }\n\n  function __emval_run_destructors(handle) {\n      var destructors = Emval.toValue(handle);\n      runDestructors(destructors);\n      __emval_decref(handle);\n    }\n\n  function __emval_take_value(type, arg) {\n      type = requireRegisteredType(type, '_emval_take_value');\n      var v = type['readValueFromPointer'](arg);\n      return Emval.toHandle(v);\n    }\n\n  function _abort() {\n      abort('');\n    }\n\n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.copyWithin(dest, src, src + num);\n    }\n\n  function getHeapMax() {\n      // Stay one Wasm page short of 4GB: while e.g. Chrome is able to allocate\n      // full 4GB Wasm memories, the size will wrap back to 0 bytes in Wasm side\n      // for any code that deals with heap sizes, which would require special\n      // casing all heap size related code to treat 0 specially.\n      return 2147483648;\n    }\n  \n  function emscripten_realloc_buffer(size) {\n      try {\n        // round size grow request up to wasm page size (fixed 64KB per spec)\n        wasmMemory.grow((size - buffer.byteLength + 65535) >>> 16); // .grow() takes a delta compared to the previous size\n        updateGlobalBufferAndViews(wasmMemory.buffer);\n        return 1 /*success*/;\n      } catch(e) {\n      }\n      // implicit 0 return to save code size (caller will cast \"undefined\" into 0\n      // anyhow)\n    }\n  function _emscripten_resize_heap(requestedSize) {\n      var oldSize = HEAPU8.length;\n      requestedSize = requestedSize >>> 0;\n      // With multithreaded builds, races can happen (another thread might increase the size\n      // in between), so return a failure, and let the caller retry.\n  \n      // Memory resize rules:\n      // 1.  Always increase heap size to at least the requested size, rounded up\n      //     to next page multiple.\n      // 2a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap\n      //     geometrically: increase the heap size according to\n      //     MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%), At most\n      //     overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).\n      // 2b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap\n      //     linearly: increase the heap size by at least\n      //     MEMORY_GROWTH_LINEAR_STEP bytes.\n      // 3.  Max size for the heap is capped at 2048MB-WASM_PAGE_SIZE, or by\n      //     MAXIMUM_MEMORY, or by ASAN limit, depending on which is smallest\n      // 4.  If we were unable to allocate as much memory, it may be due to\n      //     over-eager decision to excessively reserve due to (3) above.\n      //     Hence if an allocation fails, cut down on the amount of excess\n      //     growth, in an attempt to succeed to perform a smaller allocation.\n  \n      // A limit is set for how much we can grow. We should not exceed that\n      // (the wasm binary specifies it, so if we tried, we'd fail anyhow).\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n  \n      let alignUp = (x, multiple) => x + (multiple - x % multiple) % multiple;\n  \n      // Loop through potential heap size increases. If we attempt a too eager\n      // reservation that fails, cut down on the attempted size and reserve a\n      // smaller bump instead. (max 3 times, chosen somewhat arbitrarily)\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth\n        // but limit overreserving (default to capping at +96MB overgrowth at most)\n        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );\n  \n        var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));\n  \n        var replacement = emscripten_realloc_buffer(newSize);\n        if (replacement) {\n  \n          return true;\n        }\n      }\n      return false;\n    }\n\n  var ENV = {};\n  \n  function getExecutableName() {\n      return thisProgram || './this.program';\n    }\n  function getEnvStrings() {\n      if (!getEnvStrings.strings) {\n        // Default values.\n        // Browser language detection #8751\n        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';\n        var env = {\n          'USER': 'web_user',\n          'LOGNAME': 'web_user',\n          'PATH': '/',\n          'PWD': '/',\n          'HOME': '/home/web_user',\n          'LANG': lang,\n          '_': getExecutableName()\n        };\n        // Apply the user-provided values, if any.\n        for (var x in ENV) {\n          // x is a key in ENV; if ENV[x] is undefined, that means it was\n          // explicitly set to be so. We allow user code to do that to\n          // force variables with default values to remain unset.\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(x + '=' + env[x]);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    }\n  \n  /** @param {boolean=} dontAddNull */\n  function writeAsciiToMemory(str, buffer, dontAddNull) {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[((buffer++)>>0)] = str.charCodeAt(i);\n      }\n      // Null-terminate the pointer to the HEAP.\n      if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;\n    }\n  \n  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },normalizeArray:(parts, allowAboveRoot) => {\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        // if the path is allowed to go above the root, restore leading ..s\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },normalize:(path) => {\n        var isAbsolute = PATH.isAbs(path),\n            trailingSlash = path.substr(-1) === '/';\n        // Normalize the path\n        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },dirname:(path) => {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n        if (!root && !dir) {\n          // No dirname whatsoever\n          return '.';\n        }\n        if (dir) {\n          // It has a dirname, strip trailing slash\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },basename:(path) => {\n        // EMSCRIPTEN return '/'' for '/', not an empty string\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, \"\");\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash+1);\n      },join:function() {\n        var paths = Array.prototype.slice.call(arguments);\n        return PATH.normalize(paths.join('/'));\n      },join2:(l, r) => {\n        return PATH.normalize(l + '/' + r);\n      }};\n  \n  function getRandomDevice() {\n      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {\n        // for modern web browsers\n        var randomBuffer = new Uint8Array(1);\n        return () => { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };\n      } else\n      if (ENVIRONMENT_IS_NODE) {\n        // for nodejs with or without crypto support included\n        try {\n          var crypto_module = __webpack_require__(/*! crypto */ \"?13b2\");\n          // nodejs has crypto support\n          return () => crypto_module['randomBytes'](1)[0];\n        } catch (e) {\n          // nodejs doesn't have crypto support\n        }\n      }\n      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096\n      return () => abort(\"randomDevice\");\n    }\n  \n  var PATH_FS = {resolve:function() {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = (i >= 0) ? arguments[i] : FS.cwd();\n          // Skip empty and invalid entries\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return ''; // an invalid portion invalidates the whole thing\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');\n        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n      },relative:(from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      }};\n  \n  /** @type {function(string, boolean=, number=)} */\n  function intArrayFromString(stringy, dontAddNull, length) {\n    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n    var u8array = new Array(len);\n    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n    if (dontAddNull) u8array.length = numBytesWritten;\n    return u8array;\n  }\n  var TTY = {ttys:[],init:function () {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY\n        //   // device, it always assumes it's a TTY device. because of this, we're forcing\n        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible\n        //   // with text files until FS.init can be refactored.\n        //   process['stdin']['setEncoding']('utf8');\n        // }\n      },shutdown:function() {\n        // https://github.com/emscripten-core/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?\n        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation\n        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?\n        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle\n        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call\n        //   process['stdin']['pause']();\n        // }\n      },register:function(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },stream_ops:{open:function(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },close:function(stream) {\n          // flush any pending line data\n          stream.tty.ops.fsync(stream.tty);\n        },fsync:function(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },read:function(stream, buffer, offset, length, pos /* ignored */) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset+i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },write:function(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        }},default_tty_ops:{get_char:function(tty) {\n          if (!tty.input.length) {\n            var result = null;\n            if (ENVIRONMENT_IS_NODE) {\n              // we will read data by chunks of BUFSIZE\n              var BUFSIZE = 256;\n              var buf = Buffer.alloc(BUFSIZE);\n              var bytesRead = 0;\n  \n              try {\n                bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);\n              } catch(e) {\n                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,\n                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.\n                if (e.toString().includes('EOF')) bytesRead = 0;\n                else throw e;\n              }\n  \n              if (bytesRead > 0) {\n                result = buf.slice(0, bytesRead).toString('utf-8');\n              } else {\n                result = null;\n              }\n            } else\n            if (typeof window != 'undefined' &&\n              typeof window.prompt == 'function') {\n              // Browser.\n              result = window.prompt('Input: ');  // returns null on cancel\n              if (result !== null) {\n                result += '\\n';\n              }\n            } else if (typeof readline == 'function') {\n              // Command line.\n              result = readline();\n              if (result !== null) {\n                result += '\\n';\n              }\n            }\n            if (!result) {\n              return null;\n            }\n            tty.input = intArrayFromString(result, true);\n          }\n          return tty.input.shift();\n        },put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }},default_tty1_ops:{put_char:function(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },fsync:function(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output, 0));\n            tty.output = [];\n          }\n        }}};\n  \n  function zeroMemory(address, size) {\n      HEAPU8.fill(0, address, address + size);\n      return address;\n    }\n  \n  function alignMemory(size, alignment) {\n      return Math.ceil(size / alignment) * alignment;\n    }\n  function mmapAlloc(size) {\n      abort();\n    }\n  var MEMFS = {ops_table:null,mount:function(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },createNode:function(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          // no supported\n          throw new FS.ErrnoError(63);\n        }\n        if (!MEMFS.ops_table) {\n          MEMFS.ops_table = {\n            dir: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                lookup: MEMFS.node_ops.lookup,\n                mknod: MEMFS.node_ops.mknod,\n                rename: MEMFS.node_ops.rename,\n                unlink: MEMFS.node_ops.unlink,\n                rmdir: MEMFS.node_ops.rmdir,\n                readdir: MEMFS.node_ops.readdir,\n                symlink: MEMFS.node_ops.symlink\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek\n              }\n            },\n            file: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n                read: MEMFS.stream_ops.read,\n                write: MEMFS.stream_ops.write,\n                allocate: MEMFS.stream_ops.allocate,\n                mmap: MEMFS.stream_ops.mmap,\n                msync: MEMFS.stream_ops.msync\n              }\n            },\n            link: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                readlink: MEMFS.node_ops.readlink\n              },\n              stream: {}\n            },\n            chrdev: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: FS.chrdev_stream_ops\n            }\n          };\n        }\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.\n          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred\n          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size\n          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.\n          node.contents = null; \n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        // add the new node to the parent\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },getFileDataAsTypedArray:function(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.\n        return new Uint8Array(node.contents);\n      },expandFileStorage:function(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.\n        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.\n        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to\n        // avoid overshooting the allocation cap by a very large margin.\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity); // Allocate new storage.\n        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.\n      },resizeFileStorage:function(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null; // Fully decommit when requesting a resize to zero.\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize); // Allocate new storage.\n          if (oldContents) {\n            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.\n          }\n          node.usedBytes = newSize;\n        }\n      },node_ops:{getattr:function(node) {\n          var attr = {};\n          // device numbers reuse inode numbers.\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),\n          //       but this is not required by the standard.\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },setattr:function(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },lookup:function(parent, name) {\n          throw FS.genericErrors[44];\n        },mknod:function(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },rename:function(old_node, new_dir, new_name) {\n          // if we're overwriting a directory at new_name, make sure it's empty.\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {\n            }\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n          // do the internal rewiring\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now()\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n          old_node.parent = new_dir;\n        },unlink:function(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },rmdir:function(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },readdir:function(node) {\n          var entries = ['.', '..'];\n          for (var key in node.contents) {\n            if (!node.contents.hasOwnProperty(key)) {\n              continue;\n            }\n            entries.push(key);\n          }\n          return entries;\n        },symlink:function(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },readlink:function(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        }},stream_ops:{read:function(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) { // non-trivial, and typed array\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },write:function(stream, buffer, offset, length, position, canOwn) {\n          // If the buffer is located in main memory (HEAP), and if\n          // memory can grow, we can't hold on to references of the\n          // memory buffer, as they may get invalidated. That means we\n          // need to do copy its contents.\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n  \n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n  \n          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?\n              node.contents.set(buffer.subarray(offset, offset + length), position);\n              return length;\n            }\n          }\n  \n          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.\n          MEMFS.expandFileStorage(node, position+length);\n          if (node.contents.subarray && buffer.subarray) {\n            // Use typed array write which is available.\n            node.contents.set(buffer.subarray(offset, offset + length), position);\n          } else {\n            for (var i = 0; i < length; i++) {\n             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },llseek:function(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },allocate:function(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);\n        },mmap:function(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          // Only make a new copy when MAP_PRIVATE is specified.\n          if (!(flags & 2) && contents.buffer === buffer) {\n            // We can't emulate MAP_SHARED when the file is not backed by the buffer\n            // we're mapping to (e.g. the HEAP buffer).\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            // Try to avoid unnecessary slices.\n            if (position > 0 || position + length < contents.length) {\n              if (contents.subarray) {\n                contents = contents.subarray(position, position + length);\n              } else {\n                contents = Array.prototype.slice.call(contents, position, position + length);\n              }\n            }\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            HEAP8.set(contents, ptr);\n          }\n          return { ptr: ptr, allocated: allocated };\n        },msync:function(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n          // should we check if bytesWritten and length are the same?\n          return 0;\n        }}};\n  \n  /** @param {boolean=} noRunDep */\n  function asyncLoad(url, onload, onerror, noRunDep) {\n      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n      readAsync(url, (arrayBuffer) => {\n        assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n        onload(new Uint8Array(arrayBuffer));\n        if (dep) removeRunDependency(dep);\n      }, (event) => {\n        if (onerror) {\n          onerror();\n        } else {\n          throw 'Loading data file \"' + url + '\" failed.';\n        }\n      });\n      if (dep) addRunDependency(dep);\n    }\n  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {\n        path = PATH_FS.resolve(FS.cwd(), path);\n  \n        if (!path) return { path: '', node: null };\n  \n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        opts = Object.assign(defaults, opts)\n  \n        if (opts.recurse_count > 8) {  // max recursive lookup of 8\n          throw new FS.ErrnoError(32);\n        }\n  \n        // split the path\n        var parts = PATH.normalizeArray(path.split('/').filter((p) => !!p), false);\n  \n        // start at the root\n        var current = FS.root;\n        var current_path = '/';\n  \n        for (var i = 0; i < parts.length; i++) {\n          var islast = (i === parts.length-1);\n          if (islast && opts.parent) {\n            // stop resolving\n            break;\n          }\n  \n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n  \n          // jump to the mount's root node if this is a mountpoint\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n  \n          // by default, lookupPath will not follow a symlink if it is the final path component.\n          // setting opts.follow = true will override this behavior.\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n  \n              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });\n              current = lookup.node;\n  \n              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n  \n        return { path: current_path, node: current };\n      },getPath:(node) => {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;\n          }\n          path = path ? node.name + '/' + path : node.name;\n          node = node.parent;\n        }\n      },hashName:(parentid, name) => {\n        var hash = 0;\n  \n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },hashAddNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },hashRemoveNode:(node) => {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },lookupNode:(parent, name) => {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode, parent);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        // if we failed to find it in the cache, call into the VFS\n        return FS.lookup(parent, name);\n      },createNode:(parent, name, mode, rdev) => {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n  \n        FS.hashAddNode(node);\n  \n        return node;\n      },destroyNode:(node) => {\n        FS.hashRemoveNode(node);\n      },isRoot:(node) => {\n        return node === node.parent;\n      },isMountpoint:(node) => {\n        return !!node.mounted;\n      },isFile:(mode) => {\n        return (mode & 61440) === 32768;\n      },isDir:(mode) => {\n        return (mode & 61440) === 16384;\n      },isLink:(mode) => {\n        return (mode & 61440) === 40960;\n      },isChrdev:(mode) => {\n        return (mode & 61440) === 8192;\n      },isBlkdev:(mode) => {\n        return (mode & 61440) === 24576;\n      },isFIFO:(mode) => {\n        return (mode & 61440) === 4096;\n      },isSocket:(mode) => {\n        return (mode & 49152) === 49152;\n      },flagModes:{\"r\":0,\"r+\":2,\"w\":577,\"w+\":578,\"a\":1089,\"a+\":1090},modeStringToFlags:(str) => {\n        var flags = FS.flagModes[str];\n        if (typeof flags == 'undefined') {\n          throw new Error('Unknown file open mode: ' + str);\n        }\n        return flags;\n      },flagsToPermissionString:(flag) => {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if ((flag & 512)) {\n          perms += 'w';\n        }\n        return perms;\n      },nodePermissions:(node, perms) => {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        // return 0 if any user, group or owner bits are set.\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },mayLookup:(dir) => {\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },mayCreate:(dir, name) => {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {\n        }\n        return FS.nodePermissions(dir, 'wx');\n      },mayDelete:(dir, name, isdir) => {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },mayOpen:(node, flags) => {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write\n              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {\n        for (var fd = fd_start; fd <= fd_end; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {\n        if (!FS.FSStream) {\n          FS.FSStream = /** @constructor */ function() {\n            this.shared = { };\n          };\n          FS.FSStream.prototype = {};\n          Object.defineProperties(FS.FSStream.prototype, {\n            object: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.node; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.node = val; }\n            },\n            isRead: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 1; }\n            },\n            isWrite: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 2097155) !== 0; }\n            },\n            isAppend: {\n              /** @this {FS.FSStream} */\n              get: function() { return (this.flags & 1024); }\n            },\n            flags: {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.flags; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.flags = val; },\n            },\n            position : {\n              /** @this {FS.FSStream} */\n              get: function() { return this.shared.position; },\n              /** @this {FS.FSStream} */\n              set: function(val) { this.shared.position = val; },\n            },\n          });\n        }\n        // clone it, so we can return an instance of FSStream\n        stream = Object.assign(new FS.FSStream(), stream);\n        var fd = FS.nextfd(fd_start, fd_end);\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },closeStream:(fd) => {\n        FS.streams[fd] = null;\n      },chrdev_stream_ops:{open:(stream) => {\n          var device = FS.getDevice(stream.node.rdev);\n          // override node's stream ops with the device's\n          stream.stream_ops = device.stream_ops;\n          // forward the open call\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n        },llseek:() => {\n          throw new FS.ErrnoError(70);\n        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {\n        FS.devices[dev] = { stream_ops: ops };\n      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {\n        var mounts = [];\n        var check = [mount];\n  \n        while (check.length) {\n          var m = check.pop();\n  \n          mounts.push(m);\n  \n          check.push.apply(check, m.mounts);\n        }\n  \n        return mounts;\n      },syncfs:(populate, callback) => {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n  \n        FS.syncFSRequests++;\n  \n        if (FS.syncFSRequests > 1) {\n          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');\n        }\n  \n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n  \n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n  \n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        };\n  \n        // sync all mounts\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },mount:(type, opts, mountpoint) => {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n  \n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n          mountpoint = lookup.path;  // use the absolute path\n          node = lookup.node;\n  \n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n  \n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n  \n        var mount = {\n          type: type,\n          opts: opts,\n          mountpoint: mountpoint,\n          mounts: []\n        };\n  \n        // create a root node for the fs\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n  \n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          // set as a mountpoint\n          node.mounted = mount;\n  \n          // add the new mount to the current mount's children\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n  \n        return mountRoot;\n      },unmount:(mountpoint) => {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n  \n        // destroy the nodes for this mount, and all its child mounts\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n  \n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n  \n          while (current) {\n            var next = current.name_next;\n  \n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n  \n            current = next;\n          }\n        });\n  \n        // no longer a mountpoint\n        node.mounted = null;\n  \n        // remove this mount from the child mounts\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },lookup:(parent, name) => {\n        return parent.node_ops.lookup(parent, name);\n      },mknod:(path, mode, dev) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },create:(path, mode) => {\n        mode = mode !== undefined ? mode : 438 /* 0666 */;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },mkdir:(path, mode) => {\n        mode = mode !== undefined ? mode : 511 /* 0777 */;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },mkdirTree:(path, mode) => {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch(e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },mkdev:(path, mode, dev) => {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438 /* 0666 */;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },symlink:(oldpath, newpath) => {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },rename:(old_path, new_path) => {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        // parents must exist\n        var lookup, old_dir, new_dir;\n  \n        // let the errors from non existant directories percolate up\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n  \n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n        // need to be part of the same mount\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n        // source must exist\n        var old_node = FS.lookupNode(old_dir, old_name);\n        // old path should not be an ancestor of the new path\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n        // new path should not be an ancestor of the old path\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n        // see if the new path already exists\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {\n          // not fatal\n        }\n        // early out if nothing needs to change\n        if (old_node === new_node) {\n          return;\n        }\n        // we'll need to delete the old entry\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        // need delete permissions if we'll be overwriting.\n        // need create permissions if new doesn't already exist.\n        errCode = new_node ?\n          FS.mayDelete(new_dir, new_name, isdir) :\n          FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n          throw new FS.ErrnoError(10);\n        }\n        // if we are going to change the parent, check write permissions\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // remove the node from the lookup hash\n        FS.hashRemoveNode(old_node);\n        // do the underlying fs rename\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n        } catch (e) {\n          throw e;\n        } finally {\n          // add the node back to the hash (in case node_ops.rename\n          // changed its name)\n          FS.hashAddNode(old_node);\n        }\n      },rmdir:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },readdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },unlink:(path) => {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          // According to POSIX, we should map EISDIR to EPERM, but\n          // we instead do what Linux does (and we must, as we use\n          // the musl linux libc).\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },readlink:(path) => {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));\n      },stat:(path, dontFollow) => {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },lstat:(path) => {\n        return FS.stat(path, true);\n      },chmod:(path, mode, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now()\n        });\n      },lchmod:(path, mode) => {\n        FS.chmod(path, mode, true);\n      },fchmod:(fd, mode) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chmod(stream.node, mode);\n      },chown:(path, uid, gid, dontFollow) => {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n          // we ignore the uid / gid for now\n        });\n      },lchown:(path, uid, gid) => {\n        FS.chown(path, uid, gid, true);\n      },fchown:(fd, uid, gid) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        FS.chown(stream.node, uid, gid);\n      },truncate:(path, len) => {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },ftruncate:(fd, len) => {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },utime:(path, atime, mtime) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },open:(path, flags, mode) => {\n        if (path === \"\") {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;\n        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;\n        if ((flags & 64)) {\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {\n            // ignore\n          }\n        }\n        // perhaps we need to create the node\n        var created = false;\n        if ((flags & 64)) {\n          if (node) {\n            // if O_CREAT and O_EXCL are set, error out if the node already exists\n            if ((flags & 128)) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            // node doesn't exist, try to create it\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        // can't truncate a device\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        // if asked only for a directory, then this must be one\n        if ((flags & 65536) && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        // check permissions, if this is not a file we just created now (it is ok to\n        // create and write to a file with read-only permissions; it is read-only\n        // for later use)\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n        // do truncation if necessary\n        if ((flags & 512) && !created) {\n          FS.truncate(node, 0);\n        }\n        // we've already handled these, don't pass down to the underlying vfs\n        flags &= ~(128 | 512 | 131072);\n  \n        // register the stream with the filesystem\n        var stream = FS.createStream({\n          node: node,\n          path: FS.getPath(node),  // we want the absolute path to the node\n          flags: flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          // used by the file family libc calls (fopen, fwrite, ferror, etc.)\n          ungotten: [],\n          error: false\n        });\n        // call the new stream's open function\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },close:(stream) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null; // free readdir state\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },isClosed:(stream) => {\n        return stream.fd === null;\n      },llseek:(stream, offset, whence) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },read:(stream, buffer, offset, length, position) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },write:(stream, buffer, offset, length, position, canOwn) => {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          // seek to the end before writing in append mode\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },allocate:(stream, offset, length) => {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },mmap:(stream, length, position, prot, flags) => {\n        // User requests writing to file (prot & PROT_WRITE != 0).\n        // Checking if we have permissions to write to the file unless\n        // MAP_PRIVATE flag is set. According to POSIX spec it is possible\n        // to write to file opened in read-only mode with MAP_PRIVATE flag,\n        // as all modifications will be visible only in the memory of\n        // the current process.\n        if ((prot & 2) !== 0\n            && (flags & 2) === 0\n            && (stream.flags & 2097155) !== 2) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },msync:(stream, buffer, offset, length, mmapFlags) => {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);\n      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },readFile:(path, opts = {}) => {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf, 0);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },writeFile:(path, data, opts = {}) => {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data)+1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },cwd:() => FS.currentPath,chdir:(path) => {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },createDefaultDirectories:() => {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },createDefaultDevices:() => {\n        // create /dev\n        FS.mkdir('/dev');\n        // setup /dev/null\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n        // setup /dev/tty and /dev/tty1\n        // stderr needs to print output using err() rather than out()\n        // so we register a second tty just for it.\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n        // setup /dev/[u]random\n        var random_device = getRandomDevice();\n        FS.createDevice('/dev', 'random', random_device);\n        FS.createDevice('/dev', 'urandom', random_device);\n        // we're not going to emulate the actual shm device,\n        // just create the tmp dirs that reside in it commonly\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },createSpecialDirectories:() => {\n        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the\n        // name of the stream for fd 6 (see test_unistd_ttyname)\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount({\n          mount: () => {\n            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);\n            node.node_ops = {\n              lookup: (parent, name) => {\n                var fd = +name;\n                var stream = FS.getStream(fd);\n                if (!stream) throw new FS.ErrnoError(8);\n                var ret = {\n                  parent: null,\n                  mount: { mountpoint: 'fake' },\n                  node_ops: { readlink: () => stream.path },\n                };\n                ret.parent = ret; // make it look like a simple root node\n                return ret;\n              }\n            };\n            return node;\n          }\n        }, {}, '/proc/self/fd');\n      },createStandardStreams:() => {\n        // TODO deprecate the old functionality of a single\n        // input / output callback and that utilizes FS.createDevice\n        // and instead require a unique set of stream ops\n  \n        // by default, we symlink the standard streams to the\n        // default tty devices. however, if the standard streams\n        // have been overwritten we create a unique device for\n        // them instead.\n        if (Module['stdin']) {\n          FS.createDevice('/dev', 'stdin', Module['stdin']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (Module['stdout']) {\n          FS.createDevice('/dev', 'stdout', null, Module['stdout']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (Module['stderr']) {\n          FS.createDevice('/dev', 'stderr', null, Module['stderr']);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n  \n        // open default streams for the stdin, stdout and stderr devices\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },ensureErrnoError:() => {\n        if (FS.ErrnoError) return;\n        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {\n          this.node = node;\n          this.setErrno = /** @this{Object} */ function(errno) {\n            this.errno = errno;\n          };\n          this.setErrno(errno);\n          this.message = 'FS error';\n  \n        };\n        FS.ErrnoError.prototype = new Error();\n        FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n      },staticInit:() => {\n        FS.ensureErrnoError();\n  \n        FS.nameTable = new Array(4096);\n  \n        FS.mount(MEMFS, {}, '/');\n  \n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n  \n        FS.filesystems = {\n          'MEMFS': MEMFS,\n        };\n      },init:(input, output, error) => {\n        FS.init.initialized = true;\n  \n        FS.ensureErrnoError();\n  \n        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here\n        Module['stdin'] = input || Module['stdin'];\n        Module['stdout'] = output || Module['stdout'];\n        Module['stderr'] = error || Module['stderr'];\n  \n        FS.createStandardStreams();\n      },quit:() => {\n        FS.init.initialized = false;\n        // force-flush all streams, so we get musl std streams printed out\n        // close all of our streams\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },getMode:(canRead, canWrite) => {\n        var mode = 0;\n        if (canRead) mode |= 292 | 73;\n        if (canWrite) mode |= 146;\n        return mode;\n      },findObject:(path, dontResolveLastLink) => {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },analyzePath:(path, dontResolveLastLink) => {\n        // operate from within the context of the symlink's target\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {\n        }\n        var ret = {\n          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,\n          parentExists: false, parentPath: null, parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        };\n        return ret;\n      },createPath:(parent, path, canRead, canWrite) => {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {\n            // ignore EEXIST\n          }\n          parent = current;\n        }\n        return current;\n      },createFile:(parent, name, properties, canRead, canWrite) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS.getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          // make sure we can write to the file\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n        return node;\n      },createDevice:(parent, name, input, output) => {\n        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        // Create a fake device that a set of stream ops to emulate\n        // the old behavior.\n        FS.registerDevice(dev, {\n          open: (stream) => {\n            stream.seekable = false;\n          },\n          close: (stream) => {\n            // flush any pending line data\n            if (output && output.buffer && output.buffer.length) {\n              output(10);\n            }\n          },\n          read: (stream, buffer, offset, length, pos /* ignored */) => {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset+i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: (stream, buffer, offset, length, pos) => {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset+i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },forceLoadFile:(obj) => {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n        } else if (read_) {\n          // Command-line.\n          try {\n            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as\n            //          read() will try to parse UTF8.\n            obj.contents = intArrayFromString(read_(obj.url), true);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        } else {\n          throw new Error('Cannot load without read() or XMLHttpRequest.');\n        }\n      },createLazyFile:(parent, name, url, canRead, canWrite) => {\n        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.\n        /** @constructor */\n        function LazyUint8Array() {\n          this.lengthKnown = false;\n          this.chunks = []; // Loaded chunks. Index is the chunk number\n        }\n        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {\n          if (idx > this.length-1 || idx < 0) {\n            return undefined;\n          }\n          var chunkOffset = idx % this.chunkSize;\n          var chunkNum = (idx / this.chunkSize)|0;\n          return this.getter(chunkNum)[chunkOffset];\n        };\n        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n          this.getter = getter;\n        };\n        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n          // Find length\n          var xhr = new XMLHttpRequest();\n          xhr.open('HEAD', url, false);\n          xhr.send(null);\n          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n          var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n          var header;\n          var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n          var usesGzip = (header = xhr.getResponseHeader(\"Content-Encoding\")) && header === \"gzip\";\n  \n          var chunkSize = 1024*1024; // Chunk size in bytes\n  \n          if (!hasByteServing) chunkSize = datalength;\n  \n          // Function to get a range from the remote URL.\n          var doXHR = (from, to) => {\n            if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n            if (to > datalength-1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n  \n            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n  \n            // Some hints to the browser that we want binary data.\n            xhr.responseType = 'arraybuffer';\n            if (xhr.overrideMimeType) {\n              xhr.overrideMimeType('text/plain; charset=x-user-defined');\n            }\n  \n            xhr.send(null);\n            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n            if (xhr.response !== undefined) {\n              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));\n            }\n            return intArrayFromString(xhr.responseText || '', true);\n          };\n          var lazyArray = this;\n          lazyArray.setDataGetter((chunkNum) => {\n            var start = chunkNum * chunkSize;\n            var end = (chunkNum+1) * chunkSize - 1; // including this byte\n            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n              lazyArray.chunks[chunkNum] = doXHR(start, end);\n            }\n            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');\n            return lazyArray.chunks[chunkNum];\n          });\n  \n          if (usesGzip || !datalength) {\n            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length\n            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file\n            datalength = this.getter(0).length;\n            chunkSize = datalength;\n            out(\"LazyFiles on gzip forces download of the whole file when length is accessed\");\n          }\n  \n          this._length = datalength;\n          this._chunkSize = chunkSize;\n          this.lengthKnown = true;\n        };\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          Object.defineProperties(lazyArray, {\n            length: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._length;\n              }\n            },\n            chunkSize: {\n              get: /** @this{Object} */ function() {\n                if (!this.lengthKnown) {\n                  this.cacheLength();\n                }\n                return this._chunkSize;\n              }\n            }\n          });\n  \n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n  \n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        // This is a total hack, but I want to get this lazy file code out of the\n        // core of MEMFS. If we want to keep this lazy file concept I feel it should\n        // be its own thin LAZYFS proxying calls to MEMFS.\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        // Add a function that defers querying the file size until it is asked the first time.\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: /** @this {FSNode} */ function() { return this.contents.length; }\n          }\n        });\n        // override each stream op with one that tries to force load the lazy file first\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function forceLoadLazyFile() {\n            FS.forceLoadFile(node);\n            return fn.apply(null, arguments);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) { // normal array\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n        // use a custom read function\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position)\n        };\n        // use a custom mmap function\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr: ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {\n        // TODO we should allow people to just pass in a complete filename instead\n        // of parent and name being that we just join them anyways\n        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname\n        function processData(byteArray) {\n          function finish(byteArray) {\n            if (preFinish) preFinish();\n            if (!dontCreateFile) {\n              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n            }\n            if (onload) onload();\n            removeRunDependency(dep);\n          }\n          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {\n            if (onerror) onerror();\n            removeRunDependency(dep);\n          })) {\n            return;\n          }\n          finish(byteArray);\n        }\n        addRunDependency(dep);\n        if (typeof url == 'string') {\n          asyncLoad(url, (byteArray) => processData(byteArray), onerror);\n        } else {\n          processData(url);\n        }\n      },indexedDB:() => {\n        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n      },DB_NAME:() => {\n        return 'EM_FS_' + window.location.pathname;\n      },DB_VERSION:20,DB_STORE_NAME:\"FILE_DATA\",saveFilesToDB:(paths, onload, onerror) => {\n        onload = onload || (() => {});\n        onerror = onerror || (() => {});\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = () => {\n          out('creating db');\n          var db = openRequest.result;\n          db.createObjectStore(FS.DB_STORE_NAME);\n        };\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach((path) => {\n            var putRequest = files.put(FS.analyzePath(path).object.contents, path);\n            putRequest.onsuccess = () => { ok++; if (ok + fail == total) finish() };\n            putRequest.onerror = () => { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      },loadFilesFromDB:(paths, onload, onerror) => {\n        onload = onload || (() => {});\n        onerror = onerror || (() => {});\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = onerror; // no database to load from\n        openRequest.onsuccess = () => {\n          var db = openRequest.result;\n          try {\n            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');\n          } catch(e) {\n            onerror(e);\n            return;\n          }\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach((path) => {\n            var getRequest = files.get(path);\n            getRequest.onsuccess = () => {\n              if (FS.analyzePath(path).exists) {\n                FS.unlink(path);\n              }\n              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);\n              ok++;\n              if (ok + fail == total) finish();\n            };\n            getRequest.onerror = () => { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      }};\n  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n        // relative path\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);// removed by dead control flow\n\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },doStat:function(func, path, buf) {\n        try {\n          var stat = func(path);\n        } catch (e) {\n          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {\n            // an error occurred while trying to look up the path; we should just report ENOTDIR\n            return -54;\n          }\n          throw e;\n        }\n        HEAP32[((buf)>>2)] = stat.dev;\n        HEAP32[(((buf)+(8))>>2)] = stat.ino;\n        HEAP32[(((buf)+(12))>>2)] = stat.mode;\n        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;\n        HEAP32[(((buf)+(20))>>2)] = stat.uid;\n        HEAP32[(((buf)+(24))>>2)] = stat.gid;\n        HEAP32[(((buf)+(28))>>2)] = stat.rdev;\n        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);\n        HEAP32[(((buf)+(48))>>2)] = 4096;\n        HEAP32[(((buf)+(52))>>2)] = stat.blocks;\n        (tempI64 = [Math.floor(stat.atime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.atime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(64))>>2)] = 0;\n        (tempI64 = [Math.floor(stat.mtime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.mtime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(80))>>2)] = 0;\n        (tempI64 = [Math.floor(stat.ctime.getTime() / 1000)>>>0,(tempDouble=Math.floor(stat.ctime.getTime() / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);\n        HEAPU32[(((buf)+(96))>>2)] = 0;\n        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);\n        return 0;\n      },doMsync:function(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          // MAP_PRIVATE calls need not to be synced back to underlying fs\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },varargs:undefined,get:function() {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\n        return ret;\n      },getStr:function(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },getStreamFromFD:function(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) throw new FS.ErrnoError(8);\n        return stream;\n      }};\n  function _environ_get(__environ, environ_buf) {\n      var bufSize = 0;\n      getEnvStrings().forEach(function(string, i) {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;\n        writeAsciiToMemory(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    }\n\n  function _environ_sizes_get(penviron_count, penviron_buf_size) {\n      var strings = getEnvStrings();\n      HEAPU32[((penviron_count)>>2)] = strings.length;\n      var bufSize = 0;\n      strings.forEach(function(string) {\n        bufSize += string.length + 1;\n      });\n      HEAPU32[((penviron_buf_size)>>2)] = bufSize;\n      return 0;\n    }\n\n  function _proc_exit(code) {\n      EXITSTATUS = code;\n      if (!keepRuntimeAlive()) {\n        if (Module['onExit']) Module['onExit'](code);\n        ABORT = true;\n      }\n      quit_(code, new ExitStatus(code));\n    }\n  /** @param {boolean|number=} implicit */\n  function exitJS(status, implicit) {\n      EXITSTATUS = status;\n  \n      _proc_exit(status);\n    }\n  var _exit = exitJS;\n\n  function _fd_close(fd) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doReadv(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break; // nothing more to read\n      }\n      return ret;\n    }\n  function _fd_read(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doReadv(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n    return e.errno;\n  }\n  }\n\n  function convertI32PairToI53Checked(lo, hi) {\n      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;\n    }\n  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {\n  try {\n  \n      var offset = convertI32PairToI53Checked(offset_low, offset_high); if (isNaN(offset)) return 61;\n      var stream = SYSCALLS.getStreamFromFD(fd);\n      FS.llseek(stream, offset, whence);\n      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n    return e.errno;\n  }\n  }\n\n  /** @param {number=} offset */\n  function doWritev(stream, iov, iovcnt, offset) {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[((iov)>>2)];\n        var len = HEAPU32[(((iov)+(4))>>2)];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8,ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n      }\n      return ret;\n    }\n  function _fd_write(fd, iov, iovcnt, pnum) {\n  try {\n  \n      var stream = SYSCALLS.getStreamFromFD(fd);\n      var num = doWritev(stream, iov, iovcnt);\n      HEAPU32[((pnum)>>2)] = num;\n      return 0;\n    } catch (e) {\n    if (typeof FS == 'undefined' || !(e instanceof FS.ErrnoError)) throw e;\n    return e.errno;\n  }\n  }\n\n  function _getentropy(buffer, size) {\n      if (!_getentropy.randomDevice) {\n        _getentropy.randomDevice = getRandomDevice();\n      }\n      for (var i = 0; i < size; i++) {\n        HEAP8[(((buffer)+(i))>>0)] = _getentropy.randomDevice();\n      }\n      return 0;\n    }\n\n  function __isLeapYear(year) {\n        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);\n    }\n  \n  function __arraySum(array, index) {\n      var sum = 0;\n      for (var i = 0; i <= index; sum += array[i++]) {\n        // no-op\n      }\n      return sum;\n    }\n  \n  var __MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];\n  \n  var __MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];\n  function __addDays(date, days) {\n      var newDate = new Date(date.getTime());\n      while (days > 0) {\n        var leap = __isLeapYear(newDate.getFullYear());\n        var currentMonth = newDate.getMonth();\n        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];\n  \n        if (days > daysInCurrentMonth-newDate.getDate()) {\n          // we spill over to next month\n          days -= (daysInCurrentMonth-newDate.getDate()+1);\n          newDate.setDate(1);\n          if (currentMonth < 11) {\n            newDate.setMonth(currentMonth+1)\n          } else {\n            newDate.setMonth(0);\n            newDate.setFullYear(newDate.getFullYear()+1);\n          }\n        } else {\n          // we stay in current month\n          newDate.setDate(newDate.getDate()+days);\n          return newDate;\n        }\n      }\n  \n      return newDate;\n    }\n  function _strftime(s, maxsize, format, tm) {\n      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);\n      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html\n  \n      var tm_zone = HEAP32[(((tm)+(40))>>2)];\n  \n      var date = {\n        tm_sec: HEAP32[((tm)>>2)],\n        tm_min: HEAP32[(((tm)+(4))>>2)],\n        tm_hour: HEAP32[(((tm)+(8))>>2)],\n        tm_mday: HEAP32[(((tm)+(12))>>2)],\n        tm_mon: HEAP32[(((tm)+(16))>>2)],\n        tm_year: HEAP32[(((tm)+(20))>>2)],\n        tm_wday: HEAP32[(((tm)+(24))>>2)],\n        tm_yday: HEAP32[(((tm)+(28))>>2)],\n        tm_isdst: HEAP32[(((tm)+(32))>>2)],\n        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],\n        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''\n      };\n  \n      var pattern = UTF8ToString(format);\n  \n      // expand format\n      var EXPANSION_RULES_1 = {\n        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013\n        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y\n        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d\n        '%h': '%b',                       // Equivalent to %b\n        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation\n        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation\n        '%T': '%H:%M:%S',                 // Replaced by the time\n        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation\n        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation\n        // Modified Conversion Specifiers\n        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.\n        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.\n        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.\n        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.\n        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.\n        '%EY': '%Y',                      // Replaced by the full alternative year representation.\n        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.\n        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.\n        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.\n        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.\n        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.\n        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.\n        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.\n        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).\n        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.\n        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.\n        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.\n        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.\n        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.\n      };\n      for (var rule in EXPANSION_RULES_1) {\n        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);\n      }\n  \n      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  \n      function leadingSomething(value, digits, character) {\n        var str = typeof value == 'number' ? value.toString() : (value || '');\n        while (str.length < digits) {\n          str = character[0]+str;\n        }\n        return str;\n      }\n  \n      function leadingNulls(value, digits) {\n        return leadingSomething(value, digits, '0');\n      }\n  \n      function compareByDay(date1, date2) {\n        function sgn(value) {\n          return value < 0 ? -1 : (value > 0 ? 1 : 0);\n        }\n  \n        var compare;\n        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {\n          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {\n            compare = sgn(date1.getDate()-date2.getDate());\n          }\n        }\n        return compare;\n      }\n  \n      function getFirstWeekStartDate(janFourth) {\n          switch (janFourth.getDay()) {\n            case 0: // Sunday\n              return new Date(janFourth.getFullYear()-1, 11, 29);\n            case 1: // Monday\n              return janFourth;\n            case 2: // Tuesday\n              return new Date(janFourth.getFullYear(), 0, 3);\n            case 3: // Wednesday\n              return new Date(janFourth.getFullYear(), 0, 2);\n            case 4: // Thursday\n              return new Date(janFourth.getFullYear(), 0, 1);\n            case 5: // Friday\n              return new Date(janFourth.getFullYear()-1, 11, 31);\n            case 6: // Saturday\n              return new Date(janFourth.getFullYear()-1, 11, 30);\n          }\n      }\n  \n      function getWeekBasedYear(date) {\n          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);\n  \n          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);\n          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);\n  \n          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);\n          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);\n  \n          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {\n            // this date is after the start of the first week of this year\n            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {\n              return thisDate.getFullYear()+1;\n            }\n            return thisDate.getFullYear();\n          }\n          return thisDate.getFullYear()-1;\n      }\n  \n      var EXPANSION_RULES_2 = {\n        '%a': function(date) {\n          return WEEKDAYS[date.tm_wday].substring(0,3);\n        },\n        '%A': function(date) {\n          return WEEKDAYS[date.tm_wday];\n        },\n        '%b': function(date) {\n          return MONTHS[date.tm_mon].substring(0,3);\n        },\n        '%B': function(date) {\n          return MONTHS[date.tm_mon];\n        },\n        '%C': function(date) {\n          var year = date.tm_year+1900;\n          return leadingNulls((year/100)|0,2);\n        },\n        '%d': function(date) {\n          return leadingNulls(date.tm_mday, 2);\n        },\n        '%e': function(date) {\n          return leadingSomething(date.tm_mday, 2, ' ');\n        },\n        '%g': function(date) {\n          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.\n          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes\n          // January 4th, which is also the week that includes the first Thursday of the year, and\n          // is also the first week that contains at least four days in the year.\n          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of\n          // the last week of the preceding year; thus, for Saturday 2nd January 1999,\n          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,\n          // or 31st is a Monday, it and any following days are part of week 1 of the following year.\n          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.\n  \n          return getWeekBasedYear(date).toString().substring(2);\n        },\n        '%G': function(date) {\n          return getWeekBasedYear(date);\n        },\n        '%H': function(date) {\n          return leadingNulls(date.tm_hour, 2);\n        },\n        '%I': function(date) {\n          var twelveHour = date.tm_hour;\n          if (twelveHour == 0) twelveHour = 12;\n          else if (twelveHour > 12) twelveHour -= 12;\n          return leadingNulls(twelveHour, 2);\n        },\n        '%j': function(date) {\n          // Day of the year (001-366)\n          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);\n        },\n        '%m': function(date) {\n          return leadingNulls(date.tm_mon+1, 2);\n        },\n        '%M': function(date) {\n          return leadingNulls(date.tm_min, 2);\n        },\n        '%n': function() {\n          return '\\n';\n        },\n        '%p': function(date) {\n          if (date.tm_hour >= 0 && date.tm_hour < 12) {\n            return 'AM';\n          }\n          return 'PM';\n        },\n        '%S': function(date) {\n          return leadingNulls(date.tm_sec, 2);\n        },\n        '%t': function() {\n          return '\\t';\n        },\n        '%u': function(date) {\n          return date.tm_wday || 7;\n        },\n        '%U': function(date) {\n          var days = date.tm_yday + 7 - date.tm_wday;\n          return leadingNulls(Math.floor(days / 7), 2);\n        },\n        '%V': function(date) {\n          // Replaced by the week number of the year (Monday as the first day of the week)\n          // as a decimal number [01,53]. If the week containing 1 January has four\n          // or more days in the new year, then it is considered week 1.\n          // Otherwise, it is the last week of the previous year, and the next week is week 1.\n          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]\n          var val = Math.floor((date.tm_yday + 7 - (date.tm_wday + 6) % 7 ) / 7);\n          // If 1 Jan is just 1-3 days past Monday, the previous week\n          // is also in this year.\n          if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {\n            val++;\n          }\n          if (!val) {\n            val = 52;\n            // If 31 December of prev year a Thursday, or Friday of a\n            // leap year, then the prev year has 53 weeks.\n            var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;\n            if (dec31 == 4 || (dec31 == 5 && __isLeapYear(date.tm_year%400-1))) {\n              val++;\n            }\n          } else if (val == 53) {\n            // If 1 January is not a Thursday, and not a Wednesday of a\n            // leap year, then this year has only 52 weeks.\n            var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;\n            if (jan1 != 4 && (jan1 != 3 || !__isLeapYear(date.tm_year)))\n              val = 1;\n          }\n          return leadingNulls(val, 2);\n        },\n        '%w': function(date) {\n          return date.tm_wday;\n        },\n        '%W': function(date) {\n          var days = date.tm_yday + 7 - ((date.tm_wday + 6) % 7);\n          return leadingNulls(Math.floor(days / 7), 2);\n        },\n        '%y': function(date) {\n          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]\n          return (date.tm_year+1900).toString().substring(2);\n        },\n        '%Y': function(date) {\n          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]\n          return date.tm_year+1900;\n        },\n        '%z': function(date) {\n          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).\n          // For example, \"-0430\" means 4 hours 30 minutes behind UTC (west of Greenwich).\n          var off = date.tm_gmtoff;\n          var ahead = off >= 0;\n          off = Math.abs(off) / 60;\n          // convert from minutes into hhmm format (which means 60 minutes = 100 units)\n          off = (off / 60)*100 + (off % 60);\n          return (ahead ? '+' : '-') + String(\"0000\" + off).slice(-4);\n        },\n        '%Z': function(date) {\n          return date.tm_zone;\n        },\n        '%%': function() {\n          return '%';\n        }\n      };\n  \n      // Replace %% with a pair of NULLs (which cannot occur in a C string), then\n      // re-inject them after processing.\n      pattern = pattern.replace(/%%/g, '\\0\\0')\n      for (var rule in EXPANSION_RULES_2) {\n        if (pattern.includes(rule)) {\n          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));\n        }\n      }\n      pattern = pattern.replace(/\\0\\0/g, '%')\n  \n      var bytes = intArrayFromString(pattern, false);\n      if (bytes.length > maxsize) {\n        return 0;\n      }\n  \n      writeArrayToMemory(bytes, s);\n      return bytes.length-1;\n    }\n  function _strftime_l(s, maxsize, format, tm) {\n      return _strftime(s, maxsize, format, tm); // no locale support yet\n    }\n\n\n  function uleb128Encode(n, target) {\n      if (n < 128) {\n        target.push(n);\n      } else {\n        target.push((n % 128) | 128, n >> 7);\n      }\n    }\n  \n  function sigToWasmTypes(sig) {\n      var typeNames = {\n        'i': 'i32',\n        'j': 'i64',\n        'f': 'f32',\n        'd': 'f64',\n        'p': 'i32',\n      };\n      var type = {\n        parameters: [],\n        results: sig[0] == 'v' ? [] : [typeNames[sig[0]]]\n      };\n      for (var i = 1; i < sig.length; ++i) {\n        type.parameters.push(typeNames[sig[i]]);\n      }\n      return type;\n    }\n  \n  function generateFuncType(sig, target){\n      var sigRet = sig.slice(0, 1);\n      var sigParam = sig.slice(1);\n      var typeCodes = {\n        'i': 0x7f, // i32\n        'p': 0x7f, // i32\n        'j': 0x7e, // i64\n        'f': 0x7d, // f32\n        'd': 0x7c, // f64\n      };\n    \n      // Parameters, length + signatures\n      target.push(0x60 /* form: func */);\n      uleb128Encode(sigParam.length, target);\n      for (var i = 0; i < sigParam.length; ++i) {\n    target.push(typeCodes[sigParam[i]]);\n      }\n    \n      // Return values, length + signatures\n      // With no multi-return in MVP, either 0 (void) or 1 (anything else)\n      if (sigRet == 'v') {\n        target.push(0x00);\n      } else {\n        target.push(0x01, typeCodes[sigRet]);\n      }\n    }\n  function convertJsFunctionToWasm(func, sig) {\n  \n      // If the type reflection proposal is available, use the new\n      // \"WebAssembly.Function\" constructor.\n      // Otherwise, construct a minimal wasm module importing the JS function and\n      // re-exporting it.\n      if (typeof WebAssembly.Function == \"function\") {\n        return new WebAssembly.Function(sigToWasmTypes(sig), func);\n      }\n  \n      // The module is static, with the exception of the type section, which is\n      // generated based on the signature passed in.\n      var typeSectionBody = [\n        0x01, // count: 1\n      ];\n      generateFuncType(sig, typeSectionBody);\n  \n      // Rest of the module is static\n      var bytes = [\n        0x00, 0x61, 0x73, 0x6d, // magic (\"\\0asm\")\n        0x01, 0x00, 0x00, 0x00, // version: 1\n        0x01, // Type section code\n      ];\n      // Write the overall length of the type section followed by the body\n      uleb128Encode(typeSectionBody.length, bytes);\n      bytes.push.apply(bytes, typeSectionBody);\n  \n      // The rest of the module is static\n      bytes.push(\n        0x02, 0x07, // import section\n          // (import \"e\" \"f\" (func 0 (type 0)))\n          0x01, 0x01, 0x65, 0x01, 0x66, 0x00, 0x00,\n        0x07, 0x05, // export section\n          // (export \"f\" (func 0 (type 0)))\n          0x01, 0x01, 0x66, 0x00, 0x00,\n      );\n  \n      // We can compile this wasm module synchronously because it is very small.\n      // This accepts an import (at \"e.f\"), that it reroutes to an export (at \"f\")\n      var module = new WebAssembly.Module(new Uint8Array(bytes));\n      var instance = new WebAssembly.Instance(module, { 'e': { 'f': func } });\n      var wrappedFunc = instance.exports['f'];\n      return wrappedFunc;\n    }\n  \n  function updateTableMap(offset, count) {\n      if (functionsInTableMap) {\n        for (var i = offset; i < offset + count; i++) {\n          var item = getWasmTableEntry(i);\n          // Ignore null values.\n          if (item) {\n            functionsInTableMap.set(item, i);\n          }\n        }\n      }\n    }\n  \n  var functionsInTableMap = undefined;\n  \n  var freeTableIndexes = [];\n  function getEmptyTableSlot() {\n      // Reuse a free index if there is one, otherwise grow.\n      if (freeTableIndexes.length) {\n        return freeTableIndexes.pop();\n      }\n      // Grow the table\n      try {\n        wasmTable.grow(1);\n      } catch (err) {\n        if (!(err instanceof RangeError)) {\n          throw err;\n        }\n        throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';\n      }\n      return wasmTable.length - 1;\n    }\n  \n  function setWasmTableEntry(idx, func) {\n      wasmTable.set(idx, func);\n      // With ABORT_ON_WASM_EXCEPTIONS wasmTable.get is overriden to return wrapped\n      // functions so we need to call it here to retrieve the potential wrapper correctly\n      // instead of just storing 'func' directly into wasmTableMirror\n      wasmTableMirror[idx] = wasmTable.get(idx);\n    }\n  /** @param {string=} sig */\n  function addFunction(func, sig) {\n  \n      // Check if the function is already in the table, to ensure each function\n      // gets a unique index. First, create the map if this is the first use.\n      if (!functionsInTableMap) {\n        functionsInTableMap = new WeakMap();\n        updateTableMap(0, wasmTable.length);\n      }\n      if (functionsInTableMap.has(func)) {\n        return functionsInTableMap.get(func);\n      }\n  \n      // It's not in the table, add it now.\n  \n      var ret = getEmptyTableSlot();\n  \n      // Set the new value.\n      try {\n        // Attempting to call this with JS function will cause of table.set() to fail\n        setWasmTableEntry(ret, func);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n        var wrapped = convertJsFunctionToWasm(func, sig);\n        setWasmTableEntry(ret, wrapped);\n      }\n  \n      functionsInTableMap.set(func, ret);\n  \n      return ret;\n    }\n\n  function removeFunction(index) {\n      functionsInTableMap.delete(getWasmTableEntry(index));\n      freeTableIndexes.push(index);\n    }\n\n  function getCFunc(ident) {\n      var func = Module['_' + ident]; // closure exported function\n      return func;\n    }\n  \n    /**\n     * @param {string|null=} returnType\n     * @param {Array=} argTypes\n     * @param {Arguments|Array=} args\n     * @param {Object=} opts\n     */\n  function ccall(ident, returnType, argTypes, args, opts) {\n      // For fast lookup of conversion functions\n      var toC = {\n        'string': (str) => {\n          var ret = 0;\n          if (str !== null && str !== undefined && str !== 0) { // null string\n            // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\n            var len = (str.length << 2) + 1;\n            ret = stackAlloc(len);\n            stringToUTF8(str, ret, len);\n          }\n          return ret;\n        },\n        'array': (arr) => {\n          var ret = stackAlloc(arr.length);\n          writeArrayToMemory(arr, ret);\n          return ret;\n        }\n      };\n  \n      function convertReturnValue(ret) {\n        if (returnType === 'string') {\n          \n          return UTF8ToString(ret);\n        }\n        if (returnType === 'boolean') return Boolean(ret);\n        return ret;\n      }\n  \n      var func = getCFunc(ident);\n      var cArgs = [];\n      var stack = 0;\n      if (args) {\n        for (var i = 0; i < args.length; i++) {\n          var converter = toC[argTypes[i]];\n          if (converter) {\n            if (stack === 0) stack = stackSave();\n            cArgs[i] = converter(args[i]);\n          } else {\n            cArgs[i] = args[i];\n          }\n        }\n      }\n      var ret = func.apply(null, cArgs);\n      function onDone(ret) {\n        if (stack !== 0) stackRestore(stack);\n        return convertReturnValue(ret);\n      }\n  \n      ret = onDone(ret);\n      return ret;\n    }\n\n  \n    /**\n     * @param {string=} returnType\n     * @param {Array=} argTypes\n     * @param {Object=} opts\n     */\n  function cwrap(ident, returnType, argTypes, opts) {\n      argTypes = argTypes || [];\n      // When the function takes numbers and returns a number, we can just return\n      // the original function\n      var numericArgs = argTypes.every((type) => type === 'number' || type === 'boolean');\n      var numericRet = returnType !== 'string';\n      if (numericRet && numericArgs && !opts) {\n        return getCFunc(ident);\n      }\n      return function() {\n        return ccall(ident, returnType, argTypes, arguments, opts);\n      }\n    }\n\n\n\nInternalError = Module['InternalError'] = extendError(Error, 'InternalError');;\nembind_init_charCodes();\nBindingError = Module['BindingError'] = extendError(Error, 'BindingError');;\ninit_ClassHandle();\ninit_embind();;\ninit_RegisteredPointer();\nUnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;\ninit_emval();;\n\n  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {\n    if (!parent) {\n      parent = this;  // root node sets parent to itself\n    }\n    this.parent = parent;\n    this.mount = parent.mount;\n    this.mounted = null;\n    this.id = FS.nextInode++;\n    this.name = name;\n    this.mode = mode;\n    this.node_ops = {};\n    this.stream_ops = {};\n    this.rdev = rdev;\n  };\n  var readMode = 292/*292*/ | 73/*73*/;\n  var writeMode = 146/*146*/;\n  Object.defineProperties(FSNode.prototype, {\n   read: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & readMode) === readMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= readMode : this.mode &= ~readMode;\n    }\n   },\n   write: {\n    get: /** @this{FSNode} */function() {\n     return (this.mode & writeMode) === writeMode;\n    },\n    set: /** @this{FSNode} */function(val) {\n     val ? this.mode |= writeMode : this.mode &= ~writeMode;\n    }\n   },\n   isFolder: {\n    get: /** @this{FSNode} */function() {\n     return FS.isDir(this.mode);\n    }\n   },\n   isDevice: {\n    get: /** @this{FSNode} */function() {\n     return FS.isChrdev(this.mode);\n    }\n   }\n  });\n  FS.FSNode = FSNode;\n  FS.staticInit();;\nvar ASSERTIONS = false;\n\n// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n/**\n * Decodes a base64 string.\n * @param {string} input The string to decode.\n */\nvar decodeBase64 = typeof atob == 'function' ? atob : function (input) {\n  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n  var output = '';\n  var chr1, chr2, chr3;\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n  do {\n    enc1 = keyStr.indexOf(input.charAt(i++));\n    enc2 = keyStr.indexOf(input.charAt(i++));\n    enc3 = keyStr.indexOf(input.charAt(i++));\n    enc4 = keyStr.indexOf(input.charAt(i++));\n\n    chr1 = (enc1 << 2) | (enc2 >> 4);\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n    chr3 = ((enc3 & 3) << 6) | enc4;\n\n    output = output + String.fromCharCode(chr1);\n\n    if (enc3 !== 64) {\n      output = output + String.fromCharCode(chr2);\n    }\n    if (enc4 !== 64) {\n      output = output + String.fromCharCode(chr3);\n    }\n  } while (i < input.length);\n  return output;\n};\n\n// Converts a string of base64 into a byte array.\n// Throws error on invalid input.\nfunction intArrayFromBase64(s) {\n  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {\n    var buf = Buffer.from(s, 'base64');\n    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);\n  }\n\n  try {\n    var decoded = decodeBase64(s);\n    var bytes = new Uint8Array(decoded.length);\n    for (var i = 0 ; i < decoded.length ; ++i) {\n      bytes[i] = decoded.charCodeAt(i);\n    }\n    return bytes;\n  } catch (_) {\n    throw new Error('Converting base64 string to bytes failed.');\n  }\n}\n\n// If filename is a base64 data URI, parses and returns data (Buffer on node,\n// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.\nfunction tryParseAsDataURI(filename) {\n  if (!isDataURI(filename)) {\n    return;\n  }\n\n  return intArrayFromBase64(filename.slice(dataURIPrefix.length));\n}\n\n\nvar asmLibraryArg = {\n  \"AdaptiveWrapper\": AdaptiveWrapper,\n  \"QuantumStateMultiplyElementwiseFunctionWrapper\": QuantumStateMultiplyElementwiseFunctionWrapper,\n  \"ReversibleBooleanWrapper\": ReversibleBooleanWrapper,\n  \"__assert_fail\": ___assert_fail,\n  \"__cxa_allocate_exception\": ___cxa_allocate_exception,\n  \"__cxa_begin_catch\": ___cxa_begin_catch,\n  \"__cxa_end_catch\": ___cxa_end_catch,\n  \"__cxa_find_matching_catch_2\": ___cxa_find_matching_catch_2,\n  \"__cxa_find_matching_catch_3\": ___cxa_find_matching_catch_3,\n  \"__cxa_free_exception\": ___cxa_free_exception,\n  \"__cxa_rethrow\": ___cxa_rethrow,\n  \"__cxa_throw\": ___cxa_throw,\n  \"__cxa_uncaught_exceptions\": ___cxa_uncaught_exceptions,\n  \"__resumeException\": ___resumeException,\n  \"_embind_finalize_value_object\": __embind_finalize_value_object,\n  \"_embind_register_bigint\": __embind_register_bigint,\n  \"_embind_register_bool\": __embind_register_bool,\n  \"_embind_register_class\": __embind_register_class,\n  \"_embind_register_class_constructor\": __embind_register_class_constructor,\n  \"_embind_register_class_function\": __embind_register_class_function,\n  \"_embind_register_class_property\": __embind_register_class_property,\n  \"_embind_register_emval\": __embind_register_emval,\n  \"_embind_register_float\": __embind_register_float,\n  \"_embind_register_function\": __embind_register_function,\n  \"_embind_register_integer\": __embind_register_integer,\n  \"_embind_register_memory_view\": __embind_register_memory_view,\n  \"_embind_register_std_string\": __embind_register_std_string,\n  \"_embind_register_std_wstring\": __embind_register_std_wstring,\n  \"_embind_register_value_object\": __embind_register_value_object,\n  \"_embind_register_void\": __embind_register_void,\n  \"_emval_as\": __emval_as,\n  \"_emval_call_method\": __emval_call_method,\n  \"_emval_call_void_method\": __emval_call_void_method,\n  \"_emval_decref\": __emval_decref,\n  \"_emval_get_global\": __emval_get_global,\n  \"_emval_get_method_caller\": __emval_get_method_caller,\n  \"_emval_get_property\": __emval_get_property,\n  \"_emval_incref\": __emval_incref,\n  \"_emval_new_array\": __emval_new_array,\n  \"_emval_new_cstring\": __emval_new_cstring,\n  \"_emval_run_destructors\": __emval_run_destructors,\n  \"_emval_take_value\": __emval_take_value,\n  \"abort\": _abort,\n  \"convertCPPCTYPEToJSComplex\": convertCPPCTYPEToJSComplex,\n  \"convertDoubleArrayToJSComplexArray\": convertDoubleArrayToJSComplexArray,\n  \"convertIntArrayToJSArray\": convertIntArrayToJSArray,\n  \"convertMatrix\": convertMatrix,\n  \"emscripten_memcpy_big\": _emscripten_memcpy_big,\n  \"emscripten_resize_heap\": _emscripten_resize_heap,\n  \"environ_get\": _environ_get,\n  \"environ_sizes_get\": _environ_sizes_get,\n  \"exit\": _exit,\n  \"fd_close\": _fd_close,\n  \"fd_read\": _fd_read,\n  \"fd_seek\": _fd_seek,\n  \"fd_write\": _fd_write,\n  \"getentropy\": _getentropy,\n  \"invoke_dii\": invoke_dii,\n  \"invoke_diii\": invoke_diii,\n  \"invoke_diiiij\": invoke_diiiij,\n  \"invoke_fiii\": invoke_fiii,\n  \"invoke_i\": invoke_i,\n  \"invoke_ii\": invoke_ii,\n  \"invoke_iid\": invoke_iid,\n  \"invoke_iii\": invoke_iii,\n  \"invoke_iiid\": invoke_iiid,\n  \"invoke_iiii\": invoke_iiii,\n  \"invoke_iiiii\": invoke_iiiii,\n  \"invoke_iiiiid\": invoke_iiiiid,\n  \"invoke_iiiiii\": invoke_iiiiii,\n  \"invoke_iiiiiii\": invoke_iiiiiii,\n  \"invoke_iiiiiiii\": invoke_iiiiiiii,\n  \"invoke_iiiiiiiiii\": invoke_iiiiiiiiii,\n  \"invoke_iiiiiiiiiii\": invoke_iiiiiiiiiii,\n  \"invoke_iiiiiiiiiiii\": invoke_iiiiiiiiiiii,\n  \"invoke_iiiiiiiiiiiii\": invoke_iiiiiiiiiiiii,\n  \"invoke_iiiiij\": invoke_iiiiij,\n  \"invoke_iij\": invoke_iij,\n  \"invoke_ij\": invoke_ij,\n  \"invoke_jiiii\": invoke_jiiii,\n  \"invoke_v\": invoke_v,\n  \"invoke_vi\": invoke_vi,\n  \"invoke_vii\": invoke_vii,\n  \"invoke_viid\": invoke_viid,\n  \"invoke_viii\": invoke_viii,\n  \"invoke_viiid\": invoke_viiid,\n  \"invoke_viiii\": invoke_viiii,\n  \"invoke_viiiii\": invoke_viiiii,\n  \"invoke_viiiiiii\": invoke_viiiiiii,\n  \"invoke_viiiiiiiiii\": invoke_viiiiiiiiii,\n  \"invoke_viiiiiiiiiiiiiii\": invoke_viiiiiiiiiiiiiii,\n  \"invoke_vij\": invoke_vij,\n  \"strftime_l\": _strftime_l\n};\nvar asm = createWasm();\n/** @type {function(...*):?} */\nvar ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n  return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar getTempRet0 = Module[\"getTempRet0\"] = function() {\n  return (getTempRet0 = Module[\"getTempRet0\"] = Module[\"asm\"][\"getTempRet0\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _free = Module[\"_free\"] = function() {\n  return (_free = Module[\"_free\"] = Module[\"asm\"][\"free\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _malloc = Module[\"_malloc\"] = function() {\n  return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"malloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___getTypeName = Module[\"___getTypeName\"] = function() {\n  return (___getTypeName = Module[\"___getTypeName\"] = Module[\"asm\"][\"__getTypeName\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar __embind_initialize_bindings = Module[\"__embind_initialize_bindings\"] = function() {\n  return (__embind_initialize_bindings = Module[\"__embind_initialize_bindings\"] = Module[\"asm\"][\"_embind_initialize_bindings\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___errno_location = Module[\"___errno_location\"] = function() {\n  return (___errno_location = Module[\"___errno_location\"] = Module[\"asm\"][\"__errno_location\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar _setThrew = Module[\"_setThrew\"] = function() {\n  return (_setThrew = Module[\"_setThrew\"] = Module[\"asm\"][\"setThrew\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar setTempRet0 = Module[\"setTempRet0\"] = function() {\n  return (setTempRet0 = Module[\"setTempRet0\"] = Module[\"asm\"][\"setTempRet0\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackSave = Module[\"stackSave\"] = function() {\n  return (stackSave = Module[\"stackSave\"] = Module[\"asm\"][\"stackSave\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackRestore = Module[\"stackRestore\"] = function() {\n  return (stackRestore = Module[\"stackRestore\"] = Module[\"asm\"][\"stackRestore\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar stackAlloc = Module[\"stackAlloc\"] = function() {\n  return (stackAlloc = Module[\"stackAlloc\"] = Module[\"asm\"][\"stackAlloc\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___cxa_can_catch = Module[\"___cxa_can_catch\"] = function() {\n  return (___cxa_can_catch = Module[\"___cxa_can_catch\"] = Module[\"asm\"][\"__cxa_can_catch\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar ___cxa_is_pointer_type = Module[\"___cxa_is_pointer_type\"] = function() {\n  return (___cxa_is_pointer_type = Module[\"___cxa_is_pointer_type\"] = Module[\"asm\"][\"__cxa_is_pointer_type\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_ij = Module[\"dynCall_ij\"] = function() {\n  return (dynCall_ij = Module[\"dynCall_ij\"] = Module[\"asm\"][\"dynCall_ij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_vij = Module[\"dynCall_vij\"] = function() {\n  return (dynCall_vij = Module[\"dynCall_vij\"] = Module[\"asm\"][\"dynCall_vij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_diiiij = Module[\"dynCall_diiiij\"] = function() {\n  return (dynCall_diiiij = Module[\"dynCall_diiiij\"] = Module[\"asm\"][\"dynCall_diiiij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_iij = Module[\"dynCall_iij\"] = function() {\n  return (dynCall_iij = Module[\"dynCall_iij\"] = Module[\"asm\"][\"dynCall_iij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_jiii = Module[\"dynCall_jiii\"] = function() {\n  return (dynCall_jiii = Module[\"dynCall_jiii\"] = Module[\"asm\"][\"dynCall_jiii\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_vidij = Module[\"dynCall_vidij\"] = function() {\n  return (dynCall_vidij = Module[\"dynCall_vidij\"] = Module[\"asm\"][\"dynCall_vidij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_viijii = Module[\"dynCall_viijii\"] = function() {\n  return (dynCall_viijii = Module[\"dynCall_viijii\"] = Module[\"asm\"][\"dynCall_viijii\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_viij = Module[\"dynCall_viij\"] = function() {\n  return (dynCall_viij = Module[\"dynCall_viij\"] = Module[\"asm\"][\"dynCall_viij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_viiij = Module[\"dynCall_viiij\"] = function() {\n  return (dynCall_viiij = Module[\"dynCall_viiij\"] = Module[\"asm\"][\"dynCall_viiij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_ji = Module[\"dynCall_ji\"] = function() {\n  return (dynCall_ji = Module[\"dynCall_ji\"] = Module[\"asm\"][\"dynCall_ji\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_jiji = Module[\"dynCall_jiji\"] = function() {\n  return (dynCall_jiji = Module[\"dynCall_jiji\"] = Module[\"asm\"][\"dynCall_jiji\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = function() {\n  return (dynCall_iiiiij = Module[\"dynCall_iiiiij\"] = Module[\"asm\"][\"dynCall_iiiiij\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_jiiii = Module[\"dynCall_jiiii\"] = function() {\n  return (dynCall_jiiii = Module[\"dynCall_jiiii\"] = Module[\"asm\"][\"dynCall_jiiii\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = function() {\n  return (dynCall_iiiiijj = Module[\"dynCall_iiiiijj\"] = Module[\"asm\"][\"dynCall_iiiiijj\"]).apply(null, arguments);\n};\n\n/** @type {function(...*):?} */\nvar dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = function() {\n  return (dynCall_iiiiiijj = Module[\"dynCall_iiiiiijj\"] = Module[\"asm\"][\"dynCall_iiiiiijj\"]).apply(null, arguments);\n};\n\nvar ___start_em_js = Module['___start_em_js'] = 64304;\nvar ___stop_em_js = Module['___stop_em_js'] = 65530;\nfunction invoke_iii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vi(index,a1) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_diii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ii(index,a1) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_v(index) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)();\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iid(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_dii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiid(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viid(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiid(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiid(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_fiii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_i(index) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)();\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {\n  var sp = stackSave();\n  try {\n    return getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(index)(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_ij(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    return dynCall_ij(index,a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_vij(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    dynCall_vij(index,a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_diiiij(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return dynCall_diiiij(index,a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iij(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return dynCall_iij(index,a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_iiiiij(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return dynCall_iiiiij(index,a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\nfunction invoke_jiiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    return dynCall_jiiii(index,a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (e !== e+0) throw e;\n    _setThrew(1, 0);\n  }\n}\n\n\n\n\n// === Auto-generated postamble setup entry stuff ===\n\nModule[\"dynCall\"] = dynCall;\nModule[\"ccall\"] = ccall;\nModule[\"cwrap\"] = cwrap;\nModule[\"addFunction\"] = addFunction;\nModule[\"removeFunction\"] = removeFunction;\nModule[\"setValue\"] = setValue;\nModule[\"getValue\"] = getValue;\n\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!calledRun) run();\n  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n};\n\n/** @type {function(Array=)} */\nfunction run(args) {\n  args = args || arguments_;\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  preRun();\n\n  // a preRun added a dependency, run will be called later\n  if (runDependencies > 0) {\n    return;\n  }\n\n  function doRun() {\n    // run may have just been called through dependencies being fulfilled just in this very frame,\n    // or while the async setStatus time below was happening\n    if (calledRun) return;\n    calledRun = true;\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    initRuntime();\n\n    readyPromiseResolve(Module);\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else\n  {\n    doRun();\n  }\n}\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\nrun();\n\n\n\n\n\n\n\n  return ModuleQulacsWasm.ready\n}\n);\n})();\nif (true)\n  module.exports = ModuleQulacsWasm;\nelse // removed by dead control flow\n{}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/qulacs-wasm/lib/bundle/wasm/module.js?\n}");

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("{if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/util/node_modules/inherits/inherits_browser.js?\n}");

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

eval("{module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/util/support/isBufferBrowser.js?\n}");

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("{// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(__webpack_require__.g.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/util/node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n//# sourceURL=webpack://qasm-quantum-simulator/./node_modules/util/util.js?\n}");

/***/ }),

/***/ "?13b2":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

eval("{/* (ignored) */\n\n//# sourceURL=webpack://qasm-quantum-simulator/crypto_(ignored)?\n}");

/***/ }),

/***/ "?253a":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("{/* (ignored) */\n\n//# sourceURL=webpack://qasm-quantum-simulator/fs_(ignored)?\n}");

/***/ }),

/***/ "?2e5e":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("{/* (ignored) */\n\n//# sourceURL=webpack://qasm-quantum-simulator/fs_(ignored)?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/app.js");
/******/ 	
/******/ })()
;